{"version":3,"sources":["FormSbt.js","Toolbar.js","Cluster/ClusterToolbar.js","Cluster/myCluster.js","About/about.js","Cluster/Algorithms/Kmeans/form.js","Cluster/Algorithms/Kmeans/EvaluationForm.js","Cluster/Algorithms/Kmeans/Kmeans.js","Cluster/Algorithms/LDA/form.js","Cluster/Algorithms/LDA/LDA.js","Cluster/Algorithms/PIC/TheForm.js","Cluster/Algorithms/PIC/PIC.js","Classification/ClassificationAlgorithms/ClassificationToolbar.js","Classification/ClassificationAlgorithms/ClassificationPreview.js","Cluster/Algorithms/GMM/Myform.js","Cluster/Algorithms/GMM/GMM.js","Cluster/Algorithms/BisectingKmeans/Myform.js","Cluster/Algorithms/BisectingKmeans/BisectingKmeans.js","Classification/ClassificationAlgorithms/LinearSVM/MyForm.js","Classification/ClassificationAlgorithms/LinearSVM/LinearSVM.js","Classification/RegressionAlgorithms/RegressionToolbar.js","Classification/RegressionAlgorithms/RegressionPreview.js","Classification/ClassificationAlgorithms/NaiveBayes/Splitter.js","Classification/ClassificationAlgorithms/NaiveBayes/TheForm.js","Classification/ClassificationAlgorithms/NaiveBayes/Myeval.js","Classification/ClassificationAlgorithms/NaiveBayes/NaiveBayes.js","Classification/ClassificationAlgorithms/MultilayerPerceptron/MyForm.js","Classification/ClassificationAlgorithms/MultilayerPerceptron/MultiLayerPerceptron.js","Classification/ClassificationAlgorithms/DecisionTree/StringIndexer.js","Classification/ClassificationAlgorithms/DecisionTree/RightForm.js","Classification/ClassificationAlgorithms/DecisionTree/IndexToString.js","Classification/ClassificationAlgorithms/DecisionTree/VectorIndexer.js","Classification/ClassificationAlgorithms/DecisionTree/DecisionTree.js","Classification/RegressionAlgorithms/LinearRegression/TheForm.js","Classification/RegressionAlgorithms/LinearRegression/LinearRegression.js","Classification/RegressionAlgorithms/RandomForestRegression/RegressionEval.js","Classification/RegressionAlgorithms/RandomForestRegression/RegressionForm.js","Classification/RegressionAlgorithms/RandomForestRegression/RandomForestRegression.js","Classification/RegressionAlgorithms/GradientBoostedTreeRegressor/GradientForm.js","Classification/RegressionAlgorithms/GradientBoostedTreeRegressor/GradientBoostedTreeRegressor.js","App.js","serviceWorker.js","index.js"],"names":["FormSbt","props","Modal","show","onHide","handleModalOpen","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","required","type","placeholder","Footer","Button","variant","onClick","localStorage","setItem","document","getElementById","value","Toolbar","useState","setShow","className","id","to","ClusterToolbar","Mycluster","class","Jumbotron","href","target","rel","myabout","Component","Myforms","state","showForm","myfun","percentage","parentCallback","console","log","name","as","disabled","selected","setState","this","EvalForm","submitForm","myK","concat","myevalForm","myeval","Kmeans","makeid","charactersLength","length","i","charAt","Math","floor","random","pressed","pivot","theToggle","evalColor","mycolor","skipcolor","showbutton","showButtonIndex","skipbutton","changeLibs","libs","standars","basic","dataset","constructor","predictions","evaluator","silhouette","results","handleEdit","window","scrollTo","top","behavior","evalEdit","callbackFunction","childData","myToggler","e","preventDefault","myToggle","skipEval","notDefaultFile","file","Blob","parts","File","zip","JSZip","getItem","generateAsync","then","content","FileSaver","saveAs","downloadTxtFile","onSubmit","height","loaderSpeed","transitionTime","color","progress","onLoaderFinished","ref","statsRef","title","LDA","theshowup","trainning","continue","topics","printTopics","mytopic","min","TheForm","PIC","prediction","ClassificationToolbar","ClassificationPreview","Myform","GMM","theFor","fitmodel","mix","BisectingKmeans","cost","onfocus","MyForm","LinearSVM","setPivot","setShowbutton","setPercentage","setMycolor","toggle","setToggle","training","fitting","stopper","currPercentage","currPivot","RegressionToolbar","RegressionPreview","Splitter","Myeval","mysplit","evalForm","NaiveBayes","skipB","setskipB","nextStep","setNextStep","setshowButtonIndex","setevalColor","showModel","setShowModel","changer","first","splits","comma","con","model","predict","ending","theend","max","MultiLayerPerceptron","mytry","setMytry","variables","layers","trainers","altend","StringIndexer","RightForm","IndexToString","VectorIndexer","mystringIndexer","myVectorIndexer","myIndexToString","DecisionTree","evalbutt","setevalbutt","DecisionButton","setDecisionButton","IndexString","setIndexString","theNext","setTheNext","setThisColor","setThecolor","setIndexColor","mybutton","setMyButton","mystring","myvector","DecisionModel","myindex","mypipeline","mymodel","altEnd","theReturnFunction","LinearRegression","Linear","printer","Summarize","RegressionEval","RegressionForm","m","my","RandomForestRegression","setformColor","formButton","setformButton","vectorButton","setvectorButton","setthecolor","thesplitter","thetrainer","thepipeline","themodel","thepredict","notEval","GradientForm","GradientBoostedTreeRegressor","theEvaluator","App","path","component","Myabout","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6TAsDeA,G,MAlDC,SAACC,GASb,OACI,oCACI,kBAACC,EAAA,EAAD,CAAOC,KAAMF,EAAME,KAAMC,OAAQH,EAAMI,iBACnC,kBAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,EAAA,EAAMM,MAAP,oCAEJ,kBAACN,EAAA,EAAMO,KAAP,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,UAClB,kBAACF,EAAA,EAAKG,MAAN,aACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMC,KAAK,OAAOC,YAAY,gCAE1D,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAClB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMC,KAAK,OAAOC,YAAY,wBAE1D,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMC,KAAK,OAAOC,YAAY,8BAE1D,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMC,KAAK,OAAOC,YAAY,iCAIlE,kBAACf,EAAA,EAAMgB,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASpB,EAAMI,iBAA3C,SAGA,kBAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,WApChDC,aAAaC,QAAQ,eAAgBC,SAASC,eAAe,kBAAkBC,OAC/EJ,aAAaC,QAAQ,eAAgBC,SAASC,eAAe,kBAAkBC,OAC/EJ,aAAaC,QAAQ,OAAQC,SAASC,eAAe,UAAUC,OAC/DJ,aAAaC,QAAQ,UAAWC,SAASC,eAAe,aAAaC,OAmCpDzB,EAAMI,oBAFV,qBCJLsB,MA/Bf,WAAoB,IAAD,EACSC,oBAAS,GADlB,mBACRzB,EADQ,KACF0B,EADE,KAGTxB,EAAkB,WACpBwB,GAAS1B,IAGb,OAEI,yBAAK2B,UAAU,wBAAwBC,GAAG,mBAEtC,yBAAKD,UAAU,mBAAkB,2CACjC,yBAAKA,UAAU,+BACX,kBAAC,IAAD,CAAMT,QAAShB,EAAiByB,UAAU,kDAAkDE,GAAG,YAA/F,cACA,kBAAC,IAAD,CAAMX,QAAShB,EAAiByB,UAAU,kDAAkDE,GAAG,mBAA/F,kBACA,kBAAC,IAAD,CAAMX,QAAShB,EAAiByB,UAAU,kDAAkDE,GAAG,eAA/F,cACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,UAArE,uBAEJ,kBAAC,EAAD,CACI7B,KAAMA,EACNE,gBAAiBA,MCPlB4B,EAjBQ,kBAEf,yBAAKH,UAAU,wBAAwBC,GAAG,mBACtC,yBAAKD,UAAU,mBACX,2CAEJ,yBAAKA,UAAU,+BACX,kBAAC,IAAD,CAAMA,UAAU,kDAAkDE,GAAG,mBAArE,UACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,gBAArE,qCACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,gBAArE,oCACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,gBAArE,gCACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,oBAArE,wB,QCgEDE,EAzEG,kBAEd,yBAAKJ,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKK,MAAM,mBACP,6BACI,+HAEA,kBAACC,EAAA,EAAD,KACI,sCACA,qJAIA,uBAAGC,KAAK,mDAAmDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACrG,kBAAC,IAAD,CAAMH,GAAG,mBAAkB,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAG/B,kBAACC,EAAA,EAAD,KACI,mEACA,wLAKA,uBAAGC,KAAK,4DAA4DC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SAC9G,kBAAC,IAAD,CAAMH,GAAG,gBAAe,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAG5B,kBAACC,EAAA,EAAD,KACI,iDACA,qHAC8C,6BAD9C,+GAG8D,6BAH9D,0HAOA,uBAAGC,KAAK,wDAAwDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SAC1G,kBAAC,IAAD,CAAMH,GAAG,oBAAmB,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAGhC,kBAACC,EAAA,EAAD,KACI,uDACA,mKAGkC,6BAHlC,0IAOA,uBAAGC,KAAK,kFAAkFC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACpI,kBAAC,IAAD,CAAMH,GAAG,gBAAe,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAG5B,kBAACC,EAAA,EAAD,KACI,iEACA,+FACqE,6BADrE,uKAMA,uBAAGC,KAAK,6DAA6DC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SAC/G,kBAAC,IAAD,CAAMH,GAAG,gBAAe,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,uB,oCCjD7BK,E,uKAhBP,OACI,yBAAKV,UAAU,WACX,6BACA,6BACA,6BACI,kFACJ,6BACA,6BACI,2J,GAVEW,aC8EPC,E,4MA3EXC,MAAQ,CACJC,UAAU,G,EAIdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAciB,GAAG,QAAQf,KAAK,SAASkC,KAAK,IAAIjC,YAAY,mFAG5D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,UAAUjC,YAAY,2FAGpE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,WAAWmB,KAAK,OAAOjC,YAAY,iEAGlE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,MAAMjC,YAAY,mGAIhE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,gBAAgBjC,YAAY,4DAElF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,cAAcjC,YAAY,yDAE9E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,sBAAsBmB,KAAK,mBAC5D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,yDACA,4BAAQ3B,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,WAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,YAAYjC,YAAY,qDAE1E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,eAAemB,KAAK,YACrD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,oDACA,4BAAQ3B,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,YAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,gBAAgBmB,KAAK,YAAYjC,YAAY,mG,uDAQlF,IAAD,OACL,OACI,6BACI,4BAAQc,GAAK,aAAaf,KAAK,SAASmB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxI,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAtEnCH,aC4CPe,E,4MA5CXb,MAAQ,CACJC,UAAU,G,EAGVC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WACP,OACI,kBAAClC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,gBAAgBjC,YAAY,8DAElF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,eAAemB,KAAK,aAAajC,YAAY,4FAE1E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,sBAAsBmB,KAAK,mBAC5D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,6EACA,4BAAQ3B,MAAM,2BAAd,2BACA,4BAAQA,MAAM,UAAd,WAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,cAAcjC,YAAY,0D,uDAMhF,IAAD,OACL,OACI,6BACI,4BAAQD,KAAK,SAASmB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAU,EAAKC,SAAlH,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAvCtCH,a,0CCSvB,SAASgB,IACP,IAAIC,EAAM,4BAgCV,MA/B+C,KAA3ClC,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,QAAUnC,SAASC,eAAe,SAASC,MAAQ,MAE3B,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,WAAWC,MAAQ,MAE3B,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,mBAAmBC,MAA9E,QAEkD,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,qBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,OAEpD,KAA9CF,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,YAAYC,MAAQ,OAEjC,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,WAAWC,MAAQ,MAEnB,KAAzDF,SAASC,eAAe,uBAAuBC,QACjDgC,EAAOA,EAAIC,OAAO,IAAK,uBAA0BnC,SAASC,eAAe,uBAAuBC,MAAQ,OAEnD,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,OAExC,KAAlDF,SAASC,eAAe,gBAAgBC,QAC1CgC,EAAOA,EAAIC,OAAO,IAAK,gBAAmBnC,SAASC,eAAe,gBAAgBC,MAAQ,OAErC,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,OAGtFgC,EAIV,SAASE,IACP,IAAIC,EAAS,8CAeb,MAb2D,KAAvDrC,SAASC,eAAe,qBAAqBC,QAC/CmC,EAAUA,EAAOF,OAAO,IAAK,qBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,OAEtD,KAAlDF,SAASC,eAAe,gBAAgBC,QAC1CmC,EAAUA,EAAOF,OAAO,IAAK,kBAAqBnC,SAASC,eAAe,gBAAgBC,MAAQ,OAEvC,KAAzDF,SAASC,eAAe,uBAAuBC,QACjDmC,EAAUA,EAAOF,OAAO,IAAK,uBAA0BnC,SAASC,eAAe,uBAAuBC,MAAQ,OAEvD,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CmC,EAAUA,EAAOF,OAAO,IAAd,0BAAsCnC,SAASC,eAAe,mBAAmBC,MAAjF,QAGJmC,E,IAqOKC,E,4MAhObC,OAAS,WAKP,IAJA,IAAIb,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,G,EAGTP,MAAQ,CACN4B,QAAS,EACTC,MAAO,EACPC,WAAW,EACX3B,WAAY,EACZ4B,UAAW,gBACXC,QAAS,gBACTC,UAAW,gBACXC,YAAY,EACZC,iBAAiB,EACjBC,YAAY,EACZC,WAAY,CAAC,gDACbC,KAAM,CAAC,2GACPC,SAAU,CAAC,wDACXhC,KAAM,CAAC,EAAKa,UACZoB,MAAO,CAAC,mNACRC,QAAS,CAAC,WACVC,YAAa,CAAC,+BACdC,YAAa,CAAC,uFACdC,UAAW,CAAC,mDACZC,WAAY,CAAC,kIACbC,QAAS,CAAC,qG,EAIZC,WAAa,WACX1C,QAAQC,IAAI,EAAKN,MAAMkC,YACvB,EAAKvB,SAAS,CACZuB,YAAY,EACZF,QAAS,UAEX,EAAKrB,SAAS,CAAEiB,QAAS,EAAK5B,MAAM4B,QAAU,IAC1C,EAAK5B,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KAEtD6C,OAAOC,SAAS,CACVC,IAAK,IACLC,SAAU,Y,EAKlBC,SAAW,WACT,EAAKzC,SAAS,CACZwB,iBAAkB,EAAKnC,MAAMmC,gBAC7BJ,UAAW,UAET,EAAK/B,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDkD,iBAAmB,SAACC,GAClB,EAAK3C,SAAS,CAAER,WAAYmD,IAC5B,EAAK3C,SAAS,CAAEiB,QAAS,EAAK5B,MAAM4B,QAAU,K,EAGhD2B,UAAY,SAACC,GACXA,EAAEC,iBACF,IAAMC,EAAW,EAAK1D,MAAM8B,UAC5B,EAAKnB,SAAS,CAAEmB,WAAY4B,IACxB,EAAK1D,MAAMG,YAAc,GAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDwD,SAAW,WACT,EAAKhD,SAAS,CACZyB,YAAY,EACZH,UAAW,UAET,EAAKjC,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDyD,eAAiB,WACf,EAAKjD,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAE1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMqC,YAAa,CAAEhE,KAAM,eAC1C,IAAIyF,KAAK,CAAC,EAAK9D,MAAMuC,UAAW,CAAElE,KAAM,eACxC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,WACK,IAA1B,EAAKzC,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAM0C,cAAgB,IAAIoB,KAAK,CAAChD,MAChF,IAAIgD,KAAK,CAAC,EAAK9D,MAAM2C,cACrB,IAAImB,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,8BAA+BE,GACxCE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,kB,EAI9BG,gBAAkB,WAChB,EAAK9D,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAE1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMsC,MAAO,CAAEjE,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMuC,UAAW,CAAElE,KAAM,eACxC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,WACK,IAA1B,EAAKzC,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAM0C,cAAgB,IAAIoB,KAAK,CAAChD,MAChF,IAAIgD,KAAK,CAAC,EAAK9D,MAAM2C,eACU,IAA/B,EAAK3C,MAAMmC,gBAA2B,IAAI2B,KAAK,CAAC,EAAK9D,MAAM4C,YAAc,IAAIkB,KAAK,CAAC7C,MACnF,IAAI6C,KAAK,CAAC,EAAK9D,MAAM6C,aACrB,IAAIiB,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UAGvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,8BAA+BE,GACxCE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,kB,uDAOpB,IAAD,OACP,OACE,yBAAKnF,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kDACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAAU9D,KAAK2C,WACnB,kBAACxF,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAUnE,KAAKZ,MAAMG,WAAY6E,iBAAkB,kBAAM,EAAKhF,MAAMG,eAEzH,IAAzBS,KAAKZ,MAAM8B,UACT,6BACE,kBAACrC,EAAA,EAAD,KACE,0DACA,6BACA,4BAAQpB,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAKmC,YAAjE,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAS5C,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAEnE,6BAEEzC,KAAKZ,MAAM4B,SAAW,EACpB,kBAACnC,EAAA,EAAD,CAAWwF,IAAKrE,KAAKsE,UACnB,6DACA,6BACA,4BAAQ7G,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAKwC,UAAjE,sBAGA,4BAAQ/E,KAAK,SAASmB,MAAM,kBAAkBd,QAASkC,KAAK+C,UAA5D,mBAGA,6BACA,6BACA,kBAAC,EAAD,CAAUxD,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAElE,KAEN,8BAE4B,IAA1BzC,KAAKZ,MAAMoC,WACT,6BACE,4BAAQ3B,SAAUG,KAAKZ,MAAMG,YAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAKgD,gBAAxG,cACsB,IAArBhD,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAT,IAAqB,4BAAQG,MAAM,mBAAd,qBACnB,MAGN,6BACE,4BAAQiB,SAAUG,KAAKZ,MAAMG,YAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAK6D,iBAAxG,aACsB,IAArB7D,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAT,IAAqB,4BAAQG,MAAM,mBAAd,oBAArB,KACE,MAIV,8BACO,W,GAvNFM,aCWNC,E,4MA3EXC,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcgH,MAAQ,0EAA0E9G,KAAK,SAASe,GAAG,uBAAuBmB,KAAK,qBAAqBjC,YAAY,sGAG9K,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,mFAGxF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,yDAG5E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,MAAMmB,KAAK,IAAIjC,YAAY,kGAI1D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,+EAItE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,oFAGxE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,yCAEhE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgH,MAAM,6CAA6C9G,KAAK,SAASe,GAAG,oBAAoBmB,KAAK,kBAAkBjC,YAAY,0FAGzI,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,uBAAuBmB,KAAK,qBAAqBjC,YAAY,yGAI5F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgH,MAAM,kDAAkD9G,KAAK,SAASe,GAAG,yBAAyBmB,KAAK,uBAAuBjC,YAAY,4F,uDAS9J,IAAD,OACL,OACI,6BACI,4BAAQc,GAAK,aAAaf,KAAK,SAASmB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArI,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAtEnCH,aCQtB,SAASgB,IACP,IAAIC,EAAM,sBA+BV,MA9B8D,KAA1DlC,SAASC,eAAe,wBAAwBC,QAClDgC,EAAOA,EAAIC,OAAO,IAAK,yBAA2BnC,SAASC,eAAe,wBAAwBC,MAAQ,MAEhD,KAAxDF,SAASC,eAAe,sBAAsBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAK,uBAAyBnC,SAASC,eAAe,sBAAsBC,MAAQ,MAEjD,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,iBAAiBC,MAA5E,QAEoC,KAAzCF,SAASC,eAAe,OAAOC,QACjCgC,EAAOA,EAAIC,OAAO,IAAK,QAAUnC,SAASC,eAAe,OAAOC,MAAQ,MAEvB,KAA/CF,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEjC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEuC,KAA5CF,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,UAAUC,MAAQ,MAErB,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAExC,KAA1DF,SAASC,eAAe,wBAAwBC,QAClDgC,EAAOA,EAAIC,OAAO,IAAK,yBAA2BnC,SAASC,eAAe,wBAAwBC,MAAQ,MAE5C,KAA5DF,SAASC,eAAe,0BAA0BC,QACpDgC,EAAOA,EAAIC,OAAO,IAAK,2BAA6BnC,SAASC,eAAe,0BAA0BC,MAAQ,MAExGgC,E,IA8JKqE,E,4MAzJbhE,OAAS,WAKP,IAJA,IAAIb,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,G,EAGTP,MAAQ,CACNqF,UAAW,EACXxD,MAAO,EACPC,WAAW,EACX3B,WAAY,EACZ+B,YAAY,EACZI,KAAM,CAAC,iGACP/B,KAAM,CAAC,EAAKa,UACZoB,MAAO,CAAC,mNACRC,QAAS,CAAC,WACV6C,UAAW,CAAC,yBACZC,SAAU,CAAC,2PACXC,OAAQ,CAAC,0CACTC,YAAa,CAAC,6FACd3C,QAAS,CAAC,qG,EAGZS,UAAY,SAACC,GACXA,EAAEC,iBACF,IAAMC,EAAW,EAAK1D,MAAM8B,UAC5B,EAAKnB,SAAS,CAAEmB,WAAY4B,IAC5B,EAAK/C,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAGtD4C,WAAa,WACX1C,QAAQC,IAAI,EAAKN,MAAMkC,YACvB,EAAKvB,SAAS,CACZuB,YAAY,EACZF,QAAS,QACTqD,UAAW,IAET,EAAKrF,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDkD,iBAAmB,SAACC,GAClB,EAAK3C,SAAS,CACZR,WAAYmD,EACZ+B,UAAW,K,EAIfK,QAAU,SAAClC,GACTA,EAAEC,iBACF,EAAK9C,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAGtDsE,gBAAkB,WAChB,EAAK9D,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAE1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMsC,MAAO,CAAEjE,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,WACK,IAA1B,EAAKzC,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAMsF,YAAc,IAAIxB,KAAK,CAAChD,MAC9E,IAAIgD,KAAK,CAAC,EAAK9D,MAAMuF,WACrB,IAAIzB,KAAK,CAAC,EAAK9D,MAAMwF,SACrB,IAAI1B,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyF,cACrB,IAAI3B,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UAGvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,2BAA4BE,GACrCE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,e,uDAMpB,IAAD,OACP,OACE,yBAAKnF,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,sEACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAAU9D,KAAK2C,WACnB,kBAACxF,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAUnE,KAAKZ,MAAMG,WAAY6E,iBAAkB,kBAAM,EAAKhF,MAAMG,eAIzH,IAAzBS,KAAKZ,MAAM8B,UACT,6BACE,kBAACrC,EAAA,EAAD,KACE,sDACA,6BACA,4BAAQpB,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAKmC,YAAjE,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAS5C,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAGxC,IAAzBzC,KAAKZ,MAAMqF,UACT,6BACE,kBAAC5F,EAAA,EAAD,KACE,kEACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SAAU9D,KAAK8E,SACnB,kBAAC3H,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcwH,IAAM,IAAIpF,KAAK,QAAQlC,KAAK,SAASD,UAAU,EAAME,YAAY,sBAEjF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,gBAGJ,6BACE,4BAAQiB,SAAUG,KAAKZ,MAAMG,YAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAK6D,iBAAxG,YACsB,IAArB7D,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAW,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,oBAClB,OAGC,MAEN,W,GAlJLM,aCUH8F,E,4MApDX5F,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,WAAWmB,KAAK,SAASjC,YAAY,0FAElE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,MAAMmB,KAAK,KAAKjC,YAAY,wEAE3D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,2EAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,WAAWmB,KAAK,SAASjC,YAAY,+FAElE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,qDAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,6GAGtE,gC,uDAMN,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA/CnCH,aCMtB,SAASgB,IACP,IAAIC,EAAM,6CAmBV,MAlBkD,KAA9ClC,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,qBAA8BnC,SAASC,eAAe,YAAYC,MAAlE,QAEoC,KAAzCF,SAASC,eAAe,OAAOC,QACjCgC,EAAOA,EAAIC,OAAO,IAAK,QAAUnC,SAASC,eAAe,OAAOC,MAAQ,MAEvB,KAA/CF,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEpC,KAA9CF,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,qBAA8BnC,SAASC,eAAe,YAAYC,MAAlE,QAE4C,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEDgC,E,IA0GK8E,E,4MApGbzE,OAAS,WAKP,IAJA,IAAIb,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,G,EAGTP,MAAQ,CACN6B,MAAO,EACPC,WAAW,EACX3B,WAAY,EACZ6B,QAAS,gBACTE,YAAY,EACZI,KAAM,CAAC,sHACP/B,KAAM,CAAC,EAAKa,UACZoB,MAAO,CAAC,8MACRC,QAAS,CAAC,iJACV6C,UAAW,CAAC,oDACZQ,WAAY,CAAC,gFACbhD,QAAS,CAAC,sD,EAGZC,WAAa,WACX1C,QAAQC,IAAI,EAAKN,MAAMkC,YACvB,EAAKvB,SAAS,CACZuB,YAAY,EACZF,QAAS,UAEP,EAAKhC,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDkD,iBAAmB,SAACC,GAClB,EAAK3C,SAAS,CAAER,WAAYmD,K,EAG9BmB,gBAAkB,WAChB,EAAK9D,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAE1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMsC,MAAO,CAAEjE,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,SAAU,CAAEpE,KAAM,gBACb,IAA1B,EAAK2B,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAMsF,YAAc,IAAIxB,KAAK,CAAChD,MAC9E,IAAIgD,KAAK,CAAC,EAAK9D,MAAM8F,aACrB,IAAIhC,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UAGvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,2BAA4BE,GACrCE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,e,uDAIpB,IAAD,OACP,OACE,yBAAKnF,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,sEACA,kBAAC,IAAD,CAAYwF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAUnE,KAAKZ,MAAMG,WAAY6E,iBAAkB,kBAAM,EAAKhF,MAAMG,cACpJ,6BACE,6BACA,kBAACV,EAAA,EAAD,KACE,sDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QAASkC,KAAKmC,YAA9C,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAS5C,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAEnE,6BACA,4BAAQ5C,SAAUG,KAAKZ,MAAMG,YAAc,GAAKX,MAAM,uBAAuBd,QAASkC,KAAK6D,iBAA3F,YACsB,IAArB7D,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAW,4BAAQG,MAAM,mBAAd,mBAApB,KACE,Y,GA5FEM,aCfHiG,G,MAhBe,kBAEtB,yBAAK5G,UAAU,wBAAwBC,GAAG,mBACtC,yBAAKD,UAAU,mBACX,+CAEJ,yBAAKA,UAAU,+BACX,kBAAC,IAAD,CAAMA,UAAU,kDAAkDE,GAAG,gCAArE,iBACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,wCAArE,yBACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,6BAArE,iCACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAG,8BAArE,mBC8DD2G,EApEe,kBAE1B,yBAAK7G,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKK,MAAM,mBACP,6BACI,iIAKA,kBAACC,EAAA,EAAD,KACI,6CACA,qJAE2C,6BAF3C,oPASA,uBAAGC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACzG,kBAAC,IAAD,CAAMH,GAAG,gCAA+B,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAG5C,kBAACC,EAAA,EAAD,KACI,qDACA,0IAEoB,6BAFpB,iKAOA,uBAAGC,KAAK,2DAA2DC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SAC7G,kBAAC,IAAD,CAAMH,GAAG,wCAAuC,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAGpD,kBAACC,EAAA,EAAD,KACI,6DACA,iNAKA,uBAAGC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACzG,kBAAC,IAAD,CAAMH,GAAG,6BAA4B,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAGzC,kBAACC,EAAA,EAAD,KACI,2CACA,qOACsM,6BADtM,yTAMA,uBAAGC,KAAK,uDAAuDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACzG,kBAAC,IAAD,CAAMH,GAAG,8BAA6B,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,uBCa3CyG,E,4MA1EXjG,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,0BAAMhB,UAAU,WACZ,6BACA,kBAACpB,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,QAAQmB,KAAK,IAAIjC,YAAY,2GAG5D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,UAAUjC,YAAY,0FAIpE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,WAAWmB,KAAK,OAAOjC,YAAY,yCAGlE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,MAAMjC,YAAY,kGAKhE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,gBAAgBjC,YAAY,4DAGlF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,cAAcjC,YAAY,yDAG9E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,mBAAmBmB,KAAK,iBAAiBjC,YAAY,iGAGlF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,YAAYjC,YAAY,oDAG1E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,yFAGxF,gC,uDAQN,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArG,0BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GArEpCH,aCMrB,SAASgB,IACP,IAAIC,EAAM,kCA8BV,MA7B+C,KAA3ClC,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,QAAUnC,SAASC,eAAe,SAASC,MAAQ,MAG3B,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,WAAWC,MAAQ,MAE3B,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,mBAAmBC,MAA9E,QAEkD,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,qBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,OAEpD,KAA9CF,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,YAAYC,MAAQ,OAEjC,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,WAAWC,MAAQ,MAEpB,KAAxDF,SAASC,eAAe,sBAAsBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAK,uBAAyBnC,SAASC,eAAe,sBAAsBC,MAAQ,MAEjD,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,OAEpC,KAAtDF,SAASC,eAAe,oBAAoBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAyBnC,SAASC,eAAe,oBAAoBC,MAAQ,OAG9FgC,E,IAiIKmF,E,4MA3Hb9E,OAAS,WAKP,IAJA,IAAIb,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,G,EAGTP,MAAQ,CACN6B,MAAO,EACPC,WAAW,EACX3B,WAAY,EACZ6B,QAAS,gBACTE,YAAY,EACZI,KAAM,CAAC,6GACP/B,KAAM,CAAC,EAAKa,UACZoB,MAAO,CAAC,mNACRC,QAAS,CAAC,WACV6C,UAAW,CAAC,yCACZa,OAAQ,CAAC,uCACTC,SAAU,CAAC,sCACXC,IAAK,CAAC,oJACNvD,QAAS,CAAC,iC,EAGZS,UAAY,SAACC,GACXA,EAAEC,iBACF,IAAMC,EAAW,EAAK1D,MAAM8B,UAC5B,EAAKnB,SAAS,CAAEmB,WAAY4B,IAC5B,EAAK/C,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAGtD4C,WAAa,WACX1C,QAAQC,IAAI,EAAKN,MAAMkC,YACvB,EAAKvB,SAAS,CACZuB,YAAY,EACZF,QAAS,UAEP,EAAKhC,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDkD,iBAAmB,SAACC,GAClB,EAAK3C,SAAS,CAAER,WAAYmD,K,EAG9BmB,gBAAkB,WAChB,EAAK9D,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAE1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMsC,MAAO,CAAEjE,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,SAAU,CAAEpE,KAAM,gBACb,IAA1B,EAAK2B,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAMsF,YAAc,IAAIxB,KAAK,CAAChD,MAC9E,IAAIgD,KAAK,CAAC,EAAK9D,MAAMoG,WACrB,IAAItC,KAAK,CAAC,EAAK9D,MAAMmG,SACrB,IAAIrC,KAAK,CAAC,EAAK9D,MAAMqG,MACrB,IAAIvC,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,2BAA4BE,GACrCE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,e,uDAIpB,IAAD,OACP,OACE,yBAAKnF,UAAU,UACb,kBAAC,EAAD,MACA,6BACA,yBAAKA,UAAU,WACb,kEACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAAU9D,KAAK2C,WACnB,kBAACxF,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAUnE,KAAKZ,MAAMG,WAAY6E,iBAAkB,kBAAM,EAAKhF,MAAMG,eAEzH,IAAzBS,KAAKZ,MAAM8B,UACT,6BACE,kBAACrC,EAAA,EAAD,KACI,2DACA,6BACA,4BAAQD,MAAM,kBAAkBd,QAASkC,KAAKmC,YAA9C,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAQ5C,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAEpE,6BACA,6BACE,4BAAQ5C,SAAUG,KAAKZ,MAAMG,YAAc,GAAIX,MAAM,uBAAuBd,QAASkC,KAAK6D,iBAA1F,YACsB,IAArB7D,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAW,4BAAQG,MAAM,mBAAd,sBAClB,OAGC,W,GArHLM,aCwBHmG,E,4MAhEXjG,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,QAAQmB,KAAK,IAAIjC,YAAY,mFAG5D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,UAAUjC,YAAY,2FAGpE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,WAAWmB,KAAK,OAAOjC,YAAY,kEAGlE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,gBAAgBjC,YAAY,4DAElF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,cAAcjC,YAAY,yDAE9E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,sBAAsBmB,KAAK,mBAC5D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,yDACA,4BAAQ3B,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,WAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,4BAA4BmB,KAAK,0BAA0BjC,YAAY,6EAEtG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,YAAYjC,YAAY,uD,uDAShF,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArG,0BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA3DpCH,aCQrB,SAASgB,IACP,IAAIC,EAAM,kCA0BV,MAzB+C,KAA3ClC,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,QAAUnC,SAASC,eAAe,SAASC,MAAQ,MAE3B,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,WAAWC,MAAQ,MAE3B,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,mBAAmBC,MAA9E,QAEkD,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,qBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,OAEpD,KAA9CF,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,YAAYC,MAAQ,OAEf,KAA/DF,SAASC,eAAe,6BAA6BC,QACvDgC,EAAOA,EAAIC,OAAO,IAAK,8BAAgCnC,SAASC,eAAe,6BAA6BC,MAAQ,MAEzD,KAAzDF,SAASC,eAAe,uBAAuBC,QACjDgC,EAAOA,EAAIC,OAAO,IAAK,uBAA0BnC,SAASC,eAAe,uBAAuBC,MAAQ,OAEnD,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,OAGtFgC,EAIV,SAASE,IACP,IAAIC,EAAS,8CAeb,MAb2D,KAAvDrC,SAASC,eAAe,qBAAqBC,QAC/CmC,EAAUA,EAAOF,OAAO,IAAK,qBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,OAEtD,KAAlDF,SAASC,eAAe,gBAAgBC,QAC1CmC,EAAUA,EAAOF,OAAO,IAAK,kBAAqBnC,SAASC,eAAe,gBAAgBC,MAAQ,OAEvC,KAAzDF,SAASC,eAAe,uBAAuBC,QACjDmC,EAAUA,EAAOF,OAAO,IAAK,uBAA0BnC,SAASC,eAAe,uBAAuBC,MAAQ,OAEvD,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CmC,EAAUA,EAAOF,OAAO,IAAd,0BAAsCnC,SAASC,eAAe,mBAAmBC,MAAjF,QAGJmC,E,IA4NKoF,E,4MAtNblF,OAAS,WAKP,IAJA,IAAIb,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,G,EAGTP,MAAQ,CACN4B,QAAS,EACTE,WAAW,EACXD,MAAO,EACP1B,WAAY,EACZ4B,UAAW,gBACXC,QAAS,gBACTC,UAAW,gBACXC,YAAY,EACZC,iBAAiB,EACjBC,YAAY,EACZC,WAAY,CAAC,2DACbC,KAAM,CAAC,+DACPC,SAAU,CAAC,sDACXhC,KAAM,CAAC,EAAKa,UACZoB,MAAO,CAAC,mNACRC,QAAS,CAAC,WACVC,YAAa,CAAC,yCACdC,YAAa,CAAC,sFACdC,UAAW,CAAC,mDACZ2D,KAAM,CAAC,uGACP1D,WAAY,CAAC,kIACbC,QAAS,CAAC,gI,EAIZC,WAAa,WACX1C,QAAQC,IAAI,EAAKN,MAAMkC,YACvB,EAAKvB,SAAS,CACZuB,YAAY,EACZF,QAAS,UAEX,EAAKrB,SAAS,CAAEiB,QAAS,EAAK5B,MAAM4B,QAAU,IAC1C,EAAK5B,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDiD,SAAW,WACT,EAAKzC,SAAS,CACZwB,iBAAkB,EAAKnC,MAAMmC,gBAC7BJ,UAAW,UAET,EAAK/B,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDkD,iBAAmB,SAACC,GAClB,EAAK3C,SAAS,CAAER,WAAYmD,IAC5B,EAAK3C,SAAS,CAAEiB,QAAS,EAAK5B,MAAM4B,QAAU,K,EAGhD2B,UAAY,SAACC,GACXA,EAAEC,iBACF,IAAMC,EAAW,EAAK1D,MAAM8B,UAC5B,EAAKnB,SAAS,CAAEmB,WAAY4B,IAC5B,EAAK/C,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAItDwD,SAAW,WACT,EAAKhD,SAAS,CACZyB,YAAY,EACZH,UAAW,UAET,EAAKjC,MAAMG,YAAc,IAC3B,EAAKQ,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,M,EAIxDyD,eAAiB,WACf,EAAKjD,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAC1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMqC,YAAa,CAAEhE,KAAM,eAC1C,IAAIyF,KAAK,CAAC,EAAK9D,MAAMuC,UAAW,CAAElE,KAAM,eACxC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,WACK,IAA1B,EAAKzC,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAM0C,cAAgB,IAAIoB,KAAK,CAAChD,IAChF,IAAIgD,KAAK,CAAC,EAAK9D,MAAM2C,cACrB,IAAImB,KAAK,CAAC,EAAK9D,MAAMuG,OACrB,IAAIzC,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,wCAAyCE,GAClDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,mB,EAI9BG,gBAAkB,WAChB,EAAK9D,SAAS,CAAER,WAAY,EAAKH,MAAMG,WAAa,KACpD,EAAKQ,SAAS,CAAEkB,MAAO,EAAK7B,MAAM6B,MAAQ,IAC1C,IAAMgC,EAAO,CACX,IAAIC,KAAK,CAAC,EAAK9D,MAAMqC,YAAa,CAAEhE,KAAM,eAC1C,IAAIyF,KAAK,CAAC,EAAK9D,MAAMsC,MAAO,CAAEjE,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMuC,UAAW,CAAElE,KAAM,eACxC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMO,MAAO,CAAElC,KAAM,eACpC,IAAIyF,KAAK,CAAC,EAAK9D,MAAMwC,OAAQ,CAAEnE,KAAM,eACrC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC,EAAK9D,MAAMyC,WACK,IAA1B,EAAKzC,MAAMkC,WAAsB,IAAI4B,KAAK,CAAC,EAAK9D,MAAM0C,cAAgB,IAAIoB,KAAK,CAAChD,MAChF,IAAIgD,KAAK,CAAC,EAAK9D,MAAM2C,eACU,IAA/B,EAAK3C,MAAMmC,gBAA2B,IAAI2B,KAAK,CAAC,EAAK9D,MAAM4C,YAAc,IAAIkB,KAAK,CAAC7C,MACnF,IAAI6C,KAAK,CAAC,EAAK9D,MAAM6C,aACrB,IAAIiB,KAAK,CAAC,EAAK9D,MAAM8C,WAGnBiB,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,wCAAyCE,GAClDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,mB,uDAKpB,IAAD,OACP,OACE,yBAAKnF,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,6DACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAAU9D,KAAK2C,WACnB,kBAACxF,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcqI,QAAQ,GAAGpI,UAAU,EAAME,YAAY,qCAEvD,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAUnE,KAAKZ,MAAMG,WAAY6E,iBAAkB,kBAAM,EAAKhF,MAAMG,eAEzH,IAAzBS,KAAKZ,MAAM8B,UACT,6BACE,kBAACrC,EAAA,EAAD,KACE,yEACA,6BACA,4BAAQD,MAAM,kBAAkBd,QAASkC,KAAKmC,YAA9C,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAQ5C,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAElE,6BAEEzC,KAAKZ,MAAM4B,SAAW,EACpB,kBAACnC,EAAA,EAAD,KACE,uEACA,6BACA,4BAAQpB,KAAK,SAASmB,MAAM,uBAAuBd,QAASkC,KAAKwC,UAAjE,sBAGA,4BAAQ/E,KAAK,SAASmB,MAAM,kBAAkBd,QAASkC,KAAK+C,UAA5D,mBAGA,6BACA,6BACA,kBAAC,EAAD,CAAUxD,WAAYS,KAAKZ,MAAMG,WAAYC,eAAgBQ,KAAKyC,oBAEpE,KAEJ,8BAE4B,IAA1BzC,KAAKZ,MAAMoC,WACT,6BACE,4BAAQ5C,MAAM,uBAAuBd,QAASkC,KAAKgD,gBAAnD,YACsB,IAArBhD,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAW,4BAAQG,MAAM,mBAAd,sBAClB,MAGN,6BACE,4BAAQA,MAAM,uBAAuBiB,SAAUG,KAAKZ,MAAMG,YAAc,GAAIzB,QAASkC,KAAK6D,iBAA1F,YACsB,IAArB7D,KAAKZ,MAAM6B,MACV,kBAAC,IAAD,CAAMxC,GAAG,YAAW,4BAAQG,MAAM,mBAAd,sBAClB,MAIV,8BACO,W,GA9MOM,aCOf2G,E,4MAjEPzG,MAAQ,CACJC,UAAU,G,EAEdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI9DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE7E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,iBAAiBmB,KAAK,eAAejC,YAAY,sFAE/E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAgBE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,oEAEvE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEjF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,wFAEvF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,gEAEzE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,kBAAkBjC,YAAY,6GAErF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAegH,MAAQ,kIAAkI9G,KAAK,SAASe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,6FAErN,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,QAAQmB,KAAK,MAAMjC,YAAY,sFAE/D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ/E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA5DpCH,aCQfgB,EAAa,WACjB,IAAIC,EAAM,qCAkCV,MAjCuD,KAAnDlC,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,mBAAqBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAEvC,KAApDF,SAASC,eAAe,kBAAkBC,QAC5CgC,EAAOA,EAAIC,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,kBAAkBC,MAAQ,MAE7C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAE7B,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,mBAAmBC,MAAQ,MAEtC,KAAxDF,SAASC,eAAe,sBAAsBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAX,+BAAwCnC,SAASC,eAAe,sBAAsBC,MAAtF,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE7B,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,uBAAyBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAElD,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAE3C,KAA3CF,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,SAASC,MAAQ,MAE1B,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,iBAAmBnC,SAASC,eAAe,eAAeC,MAAQ,MAEnFgC,GAoHK2F,MAjHf,WAEE,IAFmB,EAaOzH,mBAAS,GAbhB,mBAaZ4C,EAbY,KAaL8E,EAbK,OAciB1H,oBAAS,GAd1B,mBAcZiD,EAdY,KAcA0E,EAdA,OAeiB3H,mBAAS,GAf1B,mBAeZkB,EAfY,KAeA0G,EAfA,OAgBW5H,mBAAS,iBAhBpB,mBAgBH6H,GAhBG,aAiBS7H,oBAAS,GAjBlB,mBAiBZ8H,EAjBY,KAiBJC,EAjBI,OAkBJ/H,mBAAS,4GAAjBqD,EAlBY,sBAmBJrD,mBAjBA,WAKb,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,EASea,IAAjBb,EAnBY,sBAoBHtB,mBAAS,gJAAlBuD,EApBY,sBAqBDvD,mBAAS,yDAApBwD,EArBY,sBAsBAxD,mBAAS,sCAArBgI,EAtBY,sBAuBDhI,mBAAS,4CAApBiI,EAvBY,sBAwBDjI,mBAAS,wHAApBkI,EAxBY,oBAsEnB,OACE,yBAAKhI,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,yEACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAlDI,SAAClB,GACjBA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAgDzC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAEjH,IAAXE,EACE,6BACE,kBAACtH,EAAA,EAAD,KACI,uDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QA3D7B,WACjBkI,GAAc,GACdE,EAAW,SACP3G,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAuDrC,sBAGA,6BACA,6BACA,kBAAC,EAAD,CAAQjH,WAAYA,EAAYC,eAxDvB,WACvByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,UAyDvC,6BACE,4BAAQ5H,MAAM,uBAAuBiB,SAAUN,GAAc,GAAIzB,QAvDvD,WACtBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACvD,GAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,GAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,GAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC9C,IAAf6D,EAAsB,IAAI4B,KAAK,CAACmD,IAAa,IAAInD,KAAK,CAAChD,MACvD,IAAIgD,KAAK,CAACoD,GAAU,CAAE7I,KAAM,eAC5B,IAAIyF,KAAK,CAACqD,GAAU,CAAE9I,KAAM,gBAE1B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,iCAAkCE,GAC3CE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,sBAmChB,YACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,mBAAkB,4BAAQG,MAAM,mBAAd,oBACzB,OAGC,QCzIN8H,EAhBW,kBAElB,yBAAKnI,UAAU,wBAAwBC,GAAG,mBACtC,yBAAKD,UAAU,mBACX,2CAEJ,yBAAKA,UAAU,+BACX,kBAAC,IAAD,CAAMA,UAAU,kDAAkDE,GAAG,gCAArE,qBACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAK,sCAAvE,4BACA,kBAAC,IAAD,CAAMF,UAAU,kDAAkDE,GAAK,4CAAvE,qCAEJ,+BCqCGkI,EA7CW,kBAEtB,yBAAKpI,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKK,MAAM,mBACP,6BACI,6HAMA,kBAACC,EAAA,EAAD,KACA,iDACA,qOAKA,uBAAGC,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACpG,kBAAC,IAAD,CAAMH,GAAG,gCAA+B,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAGxC,kBAACC,EAAA,EAAD,KACA,wDACA,oHAGA,uBAAGC,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SAChG,kBAAC,IAAD,CAAMH,GAAG,sCAAqC,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,mBAG9C,kBAACC,EAAA,EAAD,KACA,gEACA,6FAGA,uBAAGC,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAAsB,4BAAQvB,KAAK,SAASmB,MAAM,0BAA5B,SACpG,kBAAC,IAAD,CAAMH,GAAG,4CAA2C,4BAAQhB,KAAK,SAASmB,MAAM,mBAA5B,uBCGrDgI,E,4MAzCXxH,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAK1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,4DAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,qCAEhE,gC,uDAMN,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,wBAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAnClCH,aCgER8F,G,4MAhEX5F,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE5E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,cAAcmB,KAAK,aACxD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,aACA,4BAAQ3B,MAAM,eAAd,eACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,aAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,mBAAmBmB,KAAK,iBAAiBjC,YAAY,6FAEpF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEhF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,wFAEtF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,0DAE1E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgH,MAAM,kIAAkI9G,KAAK,SAASe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,6FAElN,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ9E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA3DnCH,aC0EP2H,G,4MAzEXzH,MAAQ,CACJC,UAAU,EACV+B,QAAS,iB,EAGb9B,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,OAAOe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,uEAErF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,eAAemB,KAAK,cACzD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,cACA,4BAAQ3B,MAAM,MAAd,MACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,qBAAd,qBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,4BAAd,4BACA,4BAAQA,MAAM,6BAAd,6BACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,2BAAd,2BACA,4BAAQA,MAAM,4BAAd,4BACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,eAAd,gBAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAE7F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,SAASe,GAAG,mBAAmBmB,KAAK,iBAAiBjC,YAAY,6FAE3G,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEvG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,SAASe,GAAG,QAAQmB,KAAK,MAAMjC,YAAY,gCAErF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,SAASe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,wDAErG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgB,UAAU,aAAad,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQrG,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GApEpCH,aCQf4H,GAAU,WACd,IAAI3G,EAAM,IAOV,MANmD,KAA/ClC,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,aAAenC,SAASC,eAAe,aAAaC,MAAQ,MAErC,KAA5CF,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,UAAUC,MAAQ,aAEvEgC,GAGJD,GAAa,WACjB,IAAIC,EAAM,uDA4BV,MA3BuD,KAAnDlC,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,kBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAEzC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEiD,KAAtDF,SAASC,eAAe,oBAAoBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAK,qBAAuBnC,SAASC,eAAe,oBAAoBC,MAAQ,MAE3C,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,mBAAmBC,MAAQ,MAEtC,KAAxDF,SAASC,eAAe,sBAAsBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAX,+BAAwCnC,SAASC,eAAe,sBAAsBC,MAAtF,QAE4C,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,eAAiBnC,SAASC,eAAe,eAAeC,MAAQ,MAEpC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAErC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAElFgC,GAGJ4G,GAAW,WACf,IAAI5G,EAAM,gEAyBV,MAxBgD,KAA5ClC,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAX,mBAA4BnC,SAASC,eAAe,UAAUC,MAA9D,QAE6C,KAAlDF,SAASC,eAAe,gBAAgBC,QAC1CgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEiD,KAAtDF,SAASC,eAAe,oBAAoBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAK,qBAAuBnC,SAASC,eAAe,oBAAoBC,MAAQ,MAE3C,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,SAEsC,KAA3CF,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,UAAWnC,SAASC,eAAe,SAASC,MAAQ,MAEtB,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAmBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAExC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEDgC,GAoPK6G,OAjPf,WAEE,IAFoB,EAaM3I,oBAAS,GAbf,mBAab4I,EAba,KAaNC,EAbM,OAcY7I,mBAAS,GAdrB,mBAcb8I,EAda,KAcHC,EAdG,OAe0B/I,oBAAS,GAfnC,mBAebkD,EAfa,KAeI8F,EAfJ,OAgBUhJ,oBAAS,GAhBnB,mBAgBb+C,EAhBa,KAgBJ8E,EAhBI,OAiBc7H,mBAAS,iBAjBvB,mBAiBFiJ,GAjBE,aAkBQjJ,oBAAS,GAlBjB,mBAkBb8H,EAlBa,KAkBLC,EAlBK,OAmBgB/H,oBAAS,GAnBzB,mBAmBbiD,EAnBa,KAmBD0E,EAnBC,OAoBc3H,oBAAS,GApBvB,mBAoBbkJ,EApBa,KAoBFC,EApBE,OAqBMnJ,mBAAS,GArBf,mBAqBb4C,EArBa,KAqBN8E,EArBM,OAsBgB1H,mBAAS,GAtBzB,mBAsBbkB,EAtBa,KAsBD0G,EAtBC,OAuBL5H,mBAAS,qGAAjBqD,EAvBa,sBAwBFrD,mBAAS,6EAApBoJ,EAxBa,uBAyBJpJ,mBAAS,eAAlBqJ,GAzBa,wBA0BLrJ,mBAxBA,WAKb,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,EAgBea,IAAjBb,GA1Ba,wBA2BJtB,mBAAS,gJAAlBuD,GA3Ba,wBA4BFvD,mBAAS,qDAApBwD,GA5Ba,wBA6BHxD,mBAAS,uEAAnBsJ,GA7Ba,wBA8BJtJ,mBAAS,KAAlBuJ,GA9Ba,wBA+BNvJ,mBAAS,YAAhBwJ,GA/Ba,wBAgCJxJ,mBAAS,kDAAlByJ,GAhCa,wBAiCFzJ,mBAAS,2EAApB0J,GAjCa,wBAkCA1J,mBAAS,iEAAtB2D,GAlCa,wBAmCH3D,mBAAS,4HAAnB2J,GAnCa,wBAoCH3J,mBAAS,6BAAnB4J,GApCa,qBA2DdxF,GAAmB,WACvBwD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDN,GAAW,IA2Fb,OACE,yBAAK3H,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,uDACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAxHI,SAAClB,GACjBA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAsHzC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAEjH,IAAXE,EACE,6BACE,kBAACtH,EAAA,EAAD,KACE,gHACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SAjIJ,SAAClB,GACfA,EAAEC,iBACFoD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDY,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OA+HrB,kBAAChK,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASD,UAAU,EAAMmC,KAAK,QAAQuI,IAAI,MAAMxK,YAAY,gGAEjF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,iBAEF,6BACA,kBAAC,EAAD,CAAU0C,WAAYA,EAAY/B,WAAYA,EAAYC,eA3G9C,WACxByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDR,GAAc,OA4GFmB,GAAY,EACV,6BACE,kBAACtI,EAAA,EAAD,KACE,mEACA,6BACA,4BAAQD,MAAM,kBAAkBd,QA1IjC,WACjB0J,GAAa,GACbtB,GAAW,GACP3G,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAsIjC,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAASjH,WAAYA,EAAYC,eAAgBiD,OAGvC,IAAZrB,EACE,6BACE,kBAACvC,EAAA,EAAD,KACE,sEACA,6BACA,4BAAQD,MAAM,uBAAuBd,QAxI5C,WACfuJ,GAAmB,GACnBC,EAAa,SACT/H,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAoI7B,sBAGA,4BAAQ/I,KAAK,SAASmB,MAAM,kBAAkBd,QA9HrD,WACfoJ,GAAS,GACL3H,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA2H/B,mBAGA,6BACA,6BACA,kBAAC,GAAD,CAAQjH,WAAYA,EAAYC,eAAgBiD,OAE5C,MAGE,IAAVwE,EACE,6BACE,4BAAQpH,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAnIhF,WACrBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACrC,IAAdS,EAAqB,IAAIrE,KAAK,CAAC4E,KAAU,IAAI5E,KAAK,CAAChD,OACnD,IAAIgD,KAAK,CAAC6E,IAAU,CAAEtK,KAAM,eAC5B,IAAIyF,KAAK,CAAC+E,IAAS,CAAExK,KAAM,gBAGzB0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,kCAAmCE,GAC5CE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,uBAwGN,cACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,4CAAT,IAAqD,4BAAQG,MAAM,mBAAd,qBACnD,MAGN,6BACE,4BAAQiB,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAzG/E,WACtBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACuE,GAAU,CAAChK,KAAM,eAC3B,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACrC,IAAdS,EAAqB,IAAIrE,KAAK,CAAC4E,KAAU,IAAI5E,KAAK,CAAChD,OACnD,IAAIgD,KAAK,CAAC6E,IAAU,CAAEtK,KAAM,gBACR,IAApB8D,EAA2B,IAAI2B,KAAK,CAAClB,KAAc,IAAIkB,KAAK,CAAC6D,OAC7D,IAAI7D,KAAK,CAAC8E,IAAS,CAAEvK,KAAM,gBAGzB0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,kCAAmCE,GAC5CE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,uBA4EN,aACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,mBAAT,IAA4B,4BAAQG,MAAM,mBAAd,oBAA5B,KACE,OAIH,MAGN,QCxPNoG,G,4MAjEX5F,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE5E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,UAAUmB,KAAK,SAASjC,YAAY,0DAEnE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,oEAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,mBAAmBmB,KAAK,iBAAiBjC,YAAY,6FAEpF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEhF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,wFAEtF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,yCAEhE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgH,MAAM,kIAAkI9G,KAAK,SAASe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,6FAElN,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,QAAQmB,KAAK,MAAMjC,YAAY,sFAE9D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,iG,uDAQ9E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA5DnCH,aCShB4H,GAAU,WACd,IAAI3G,EAAM,IAOV,MANmD,KAA/ClC,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,aAAenC,SAASC,eAAe,aAAaC,QAE7B,KAA5CF,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,UAAUC,MAAQ,aAEvEgC,GAGJD,GAAa,WACjB,IAAIC,EAAM,4DAkCV,MAjCuD,KAAnDlC,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,iBAAiBC,MAA5E,QAEwC,KAA7CF,SAASC,eAAe,WAAWC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,aAAenC,SAASC,eAAe,WAAWC,MAAQ,MAE/B,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEiD,KAAtDF,SAASC,eAAe,oBAAoBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAX,6BAAsCnC,SAASC,eAAe,oBAAoBC,MAAlF,QAEgD,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAEmD,KAAxDF,SAASC,eAAe,sBAAsBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAX,+BAAwCnC,SAASC,eAAe,sBAAsBC,MAAtF,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEvC,KAA3CF,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,SAASC,MAAQ,MAE1B,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAE1C,KAA5CF,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,UAAUC,MAAQ,OAE5B,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAEhFgC,GAGJ4G,GAAW,WACf,IAAI5G,EAAM,gEAyBV,MAxBgD,KAA5ClC,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAX,mBAA4BnC,SAASC,eAAe,UAAUC,MAA9D,QAE6C,KAAlDF,SAASC,eAAe,gBAAgBC,QAC1CgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEiD,KAAtDF,SAASC,eAAe,oBAAoBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,oBAAoBC,MAAQ,MAE5C,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,SAEsC,KAA3CF,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAX,kBAA2BnC,SAASC,eAAe,SAASC,MAA5D,QAE8C,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,iBAAmBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAExC,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,SAEDgC,GA+RKgI,OA5Rf,WAEE,IAF8B,EAaJ9J,oBAAS,GAbL,mBAavB4I,EAbuB,KAahBC,EAbgB,OAcJ7I,mBAAS,GAdL,mBAcvB+J,EAduB,KAchBC,EAdgB,OAeMhK,oBAAS,GAff,mBAevBiD,EAfuB,KAeX0E,EAfW,OAgBE3H,mBAAS,GAhBX,mBAgBvB8I,EAhBuB,KAgBbC,EAhBa,OAiBI/I,oBAAS,GAjBb,mBAiBvBkJ,EAjBuB,KAiBZC,EAjBY,OAkBFnJ,oBAAS,GAlBP,mBAkBvB8H,EAlBuB,KAkBfC,EAlBe,OAmBJ/H,mBAAS,GAnBL,mBAmBvB4C,EAnBuB,KAmBhB8E,EAnBgB,OAoBA1H,mBAAS,iBApBT,mBAoBd6H,GApBc,aAqBgB7H,oBAAS,GArBzB,mBAqBvBkD,EArBuB,KAqBN8F,EArBM,OAsBIhJ,mBAAS,iBAtBb,mBAsBZiJ,GAtBY,aAuBMjJ,mBAAS,GAvBf,mBAuBvBkB,EAvBuB,KAuBX0G,EAvBW,OAwBf5H,mBAAS,sHAAjBqD,GAxBuB,uBAyBZrD,mBAAS,6EAApBoJ,GAzBuB,wBA0BdpJ,mBAAS,eAAlBqJ,GA1BuB,wBA2BfrJ,mBAzBA,WAKb,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,EAiBea,IAAjBb,GA3BuB,wBA4BdtB,mBAAS,+JAAlBuD,GA5BuB,wBA6BZvD,mBAAS,qDAApBwD,GA7BuB,wBA8BbxD,mBAAS,gDAAnBsJ,GA9BuB,wBA+BdtJ,mBAAS,KAAlBuJ,GA/BuB,wBAgChBvJ,mBAAS,YAAhBwJ,GAhCuB,wBAiCVxJ,mBAAS,iDAAtBiK,GAjCuB,wBAkCbjK,mBAAS,kCAAnBkK,GAlCuB,wBAmCXlK,mBAAS,6DAArBmK,GAnCuB,wBAoCdnK,mBAAS,wCAAlByJ,GApCuB,wBAqCZzJ,mBAAS,8GAApB6D,GArCuB,wBAsCV7D,mBAAS,+DAAtB2D,GAtCuB,wBAuCb3D,mBAAS,6GAAnB2J,GAvCuB,wBAwCb3J,mBAAS,6BAAnBoK,GAxCuB,qBA0ExBhG,GAAmB,WACvBwD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,OAyGnD,OACE,yBAAKjI,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,iEACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SAhJI,SAAClB,GACjBA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA8IzC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAEjH,IAAXE,EACE,6BACE,kBAACtH,EAAA,EAAD,KACE,gHACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SAzJJ,SAAClB,GACfA,EAAEC,iBACFoD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDY,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OAuJrB,kBAAChK,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASD,UAAU,EAAMmC,KAAK,QAAQuI,IAAI,MAAMxK,YAAY,gGAEjF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,iBAEF,6BACA,kBAAC,EAAD,CAAU0C,WAAYA,EAAY/B,WAAYA,EAAYC,eA1J9C,WACxByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDR,GAAc,OA2JFmB,GAAY,EACV,6BACE,kBAACtI,EAAA,EAAD,KACE,uEACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SA7JT,SAAClB,GAChBA,EAAEC,iBACFoD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjD6B,EAAS,KA2JW,kBAAClL,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMuH,IAAI,IAAItH,KAAK,SAASe,GAAG,eAAemB,KAAK,aAAajC,YAAY,4BACpG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMuH,IAAI,IAAItH,KAAK,SAASe,GAAG,UAAUmB,KAAK,UAAUjC,YAAY,mCAC5F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcwH,IAAI,IAAItH,KAAK,SAASe,GAAG,WAAWmB,KAAK,QAAQjC,YAAY,mCAC3E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAMuH,IAAI,IAAItH,KAAK,SAASe,GAAG,QAAQmB,KAAK,MAAMjC,YAAY,6BACtF,6BACA,4BAAQkB,MAAM,mBAAd,kBAIFwJ,GAAS,EACP,6BACE,kBAACvJ,EAAA,EAAD,KACE,uDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QAzKvC,WACjB0J,GAAa,GACbtB,EAAW,SACP3G,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAqK3B,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAAQjH,WAAYA,EAAYC,eAAgBiD,MAElD,kBAAC5D,EAAA,EAAD,KACE,0DACA,6BACA,4BAAQD,MAAM,uBAAuBd,QArK9C,WACfuJ,GAAmB,GACnBC,EAAa,SACT/H,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAiK3B,sBAGA,4BAAQ/I,KAAK,SAASmB,MAAM,kBAAkBd,QAhKvD,WACfoJ,GAAS,GACL3H,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA6J3B,mBAGA,6BACA,6BACA,kBAAC,GAAD,CAAQjH,WAAYA,EAAYC,eAAgBiD,OAGtC,IAAVwE,EACE,6BACE,4BAAQpH,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAnKtF,WACrBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,IAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACwE,IAAQ,CAAEjK,KAAM,eAC1B,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,OACnD,IAAI5D,KAAK,CAACoF,IAAY,CAAE7K,KAAM,eAC9B,IAAIyF,KAAK,CAACqF,IAAS,CAAE9K,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,gBAAgBC,OAAQ,CAAEV,KAAM,eAClE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,YAAYC,OAAQ,CAAEV,KAAM,eAC9D,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,SAASC,OAAQ,CAAEV,KAAM,gBAC7C,IAAd8J,EAAqB,IAAIrE,KAAK,CAACsF,KAAa,IAAItF,KAAK,CAAChD,OACtD,IAAIgD,KAAK,CAAC4E,IAAQ,CAAErK,KAAM,eAC1B,IAAIyF,KAAK,CAAChB,IAAU,CAAEzE,KAAM,eAC5B,IAAIyF,KAAK,CAACuF,IAAS,CAAEhL,KAAM,gBAGzB0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,4CAA6CE,GACtDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,iCA8HA,cACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,4CAAT,IAAqD,4BAAQG,MAAM,mBAAd,qBACnD,MAGN,6BACE,4BAAQiB,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAhIrF,WACtBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,IAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACuE,IAAU,CAAEhK,KAAM,eAC5B,IAAIyF,KAAK,CAACwE,IAAQ,CAAEjK,KAAM,eAC1B,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,OACnD,IAAI5D,KAAK,CAACoF,IAAY,CAAE7K,KAAM,eAC9B,IAAIyF,KAAK,CAACqF,IAAS,CAAE9K,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,gBAAgBC,OAAQ,CAAEV,KAAM,eAClE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,eAC7D,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,YAAYC,OAAQ,CAAEV,KAAM,eAC9D,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,SAASC,OAAQ,CAAEV,KAAM,gBAC7C,IAAd8J,EAAqB,IAAIrE,KAAK,CAACsF,KAAa,IAAItF,KAAK,CAAChD,OACtD,IAAIgD,KAAK,CAAC4E,IAAQ,CAAErK,KAAM,eAC1B,IAAIyF,KAAK,CAAChB,IAAU,CAAEzE,KAAM,gBACR,IAApB8D,EAA2B,IAAI2B,KAAK,CAAClB,KAAc,IAAIkB,KAAK,CAAC6D,OAC7D,IAAI7D,KAAK,CAAC8E,IAAS,CAAEvK,KAAM,gBAGzB0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,4CAA6CE,GACtDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,iCAyFA,aACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,mBAAT,IAA4B,4BAAQG,MAAM,mBAAd,oBAA5B,KACE,OAIH,MAGN,MAEN,QC/SN8J,G,4MA3DXtJ,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,iBAC5D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,iBACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,mBACA,4BAAQA,MAAM,QAAd,SAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,oDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,oDAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,oDAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,eAAemB,KAAK,aAAajC,YAAY,sDAE1E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAAS2E,MAAM,sDAAsD9G,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,mBAC1H,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,mBACA,4BAAQ3B,MAAM,iBAAd,iBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,eAAd,gBAEJ,gC,uDAMN,IAAD,OACL,OACI,6BACI,4BAAQS,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAtD7BH,aCiFbyJ,G,4MAhFXvJ,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,uBAAuBmB,KAAK,qBAAqBjC,YAAY,oGAE5F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE5E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,aAAamB,KAAK,YACvD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,6CACA,4BAAQ3B,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,mBAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,4CAEpE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,2IAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,2DAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,wBAAwBmB,KAAK,sBAAsBjC,YAAY,2FAE9F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,6BAA6BmB,KAAK,2BAA2BjC,YAAY,uHAExG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEhF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,mBAAmBmB,KAAK,iBAAiBjC,YAAY,6FAEpF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,qBAAqBmB,KAAK,mBAAmBjC,YAAY,wFAEtF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,yCAE9D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcgH,MAAM,kIAAkI9G,KAAK,SAASe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,6FAElN,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ9E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,mBAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA3EjCH,aCyCT0J,G,4MAzCXxJ,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,oDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,WAAWmB,KAAK,SAASjC,YAAY,+FAElE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,oDAExE,gC,uDAMN,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GApC7BH,aCkDb2J,G,4MAhDXzJ,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,iBAC5D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,wDACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,mBACA,4BAAQA,MAAM,QAAd,SAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,oDAEvE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,oGAEnF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,oDAEzE,gC,uDAMN,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA3C7BH,aCUtBgB,GAAa,WACf,IAAIC,EAAM,+CA8CV,MA7C8D,KAA1DlC,SAASC,eAAe,wBAAwBC,QAChDgC,EAAOA,EAAIC,OAAO,IAAK,yBAA2BnC,SAASC,eAAe,wBAAwBC,MAAQ,MAEvD,KAAnDF,SAASC,eAAe,iBAAiBC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,iBAAiBC,MAA5E,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAEwC,KAA/CF,SAASC,eAAe,aAAaC,QACrCgC,EAAOA,EAAIC,OAAO,IAAX,sBAA+BnC,SAASC,eAAe,aAAaC,MAApE,QAEwC,KAA/CF,SAASC,eAAe,aAAaC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEpC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE3B,KAA3DF,SAASC,eAAe,yBAAyBC,QACjDgC,EAAOA,EAAIC,OAAO,IAAK,0BAA4BnC,SAASC,eAAe,yBAAyBC,MAAQ,MAE5C,KAAhEF,SAASC,eAAe,8BAA8BC,QACtDgC,EAAOA,EAAIC,OAAO,IAAK,+BAAiCnC,SAASC,eAAe,8BAA8BC,MAAQ,MAEhE,KAAtDF,SAASC,eAAe,oBAAoBC,QAC5CgC,EAAOA,EAAIC,OAAO,IAAX,6BAAsCnC,SAASC,eAAe,oBAAoBC,MAAlF,QAE8C,KAArDF,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAEiD,KAAxDF,SAASC,eAAe,sBAAsBC,QAC9CgC,EAAOA,EAAIC,OAAO,IAAX,+BAAwCnC,SAASC,eAAe,sBAAsBC,MAAtF,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAE5C,KAA5CF,SAASC,eAAe,UAAUC,QAClCgC,EAAOA,EAAIC,OAAO,IAAK,WAAanC,SAASC,eAAe,UAAUC,MAAQ,OAE7B,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEHgC,GAGN2I,GAAkB,WACpB,IAAI3I,EAAM,2DAmBV,MAlByD,KAArDlC,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAE2C,KAAlDF,SAASC,eAAe,gBAAgBC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAEgD,KAAvDF,SAASC,eAAe,qBAAqBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,8BAAuCnC,SAASC,eAAe,qBAAqBC,MAApF,QAEHgC,GAGN4I,GAAkB,WACpB,IAAI5I,EAAM,2DAaV,MAZyD,KAArDlC,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAE8C,KAArDF,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,mBAAmBC,MAAQ,MAE5FgC,GAGN6I,GAAkB,WACpB,IAAI7I,EAAM,iDAUV,MAToD,KAAhDlC,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEuC,KAA9CF,SAASC,eAAe,YAAYC,QACpCgC,EAAOA,EAAIC,OAAO,IAAX,qBAA8BnC,SAASC,eAAe,YAAYC,MAAlE,QAEHgC,GAGN4G,GAAW,WACb,IAAI5G,EAAM,gEAyBV,MAxBgD,KAA5ClC,SAASC,eAAe,UAAUC,QAClCgC,EAAOA,EAAIC,OAAO,IAAX,mBAA4BnC,SAASC,eAAe,UAAUC,MAA9D,SAE2C,KAAlDF,SAASC,eAAe,gBAAgBC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE+C,KAAtDF,SAASC,eAAe,oBAAoBC,QAC5CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,oBAAoBC,MAAQ,MAE9C,KAArDF,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,SAEoC,KAA3CF,SAASC,eAAe,SAASC,QACjCgC,EAAOA,EAAIC,OAAO,IAAX,kBAA2BnC,SAASC,eAAe,SAASC,MAA5D,QAE4C,KAAnDF,SAASC,eAAe,iBAAiBC,QACzCgC,EAAOA,EAAIC,OAAO,IAAK,iBAAmBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAE1C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,SAEHgC,GAgVG8I,OA7Uf,WAEI,IAFoB,EAaM5K,oBAAS,GAbf,mBAab4I,EAba,KAaNC,EAbM,OAcc7I,mBAAS,iBAdvB,mBAcFiJ,GAdE,aAeYjJ,oBAAS,GAfrB,mBAeb6K,EAfa,KAeHC,EAfG,OAgBwB9K,oBAAS,GAhBjC,mBAgBb+K,EAhBa,KAgBGC,EAhBH,OAiBkBhL,oBAAS,GAjB3B,mBAiBbiL,EAjBa,KAiBAC,EAjBA,OAkBYlL,oBAAS,GAlBrB,mBAkBb8I,EAlBa,KAkBHC,EAlBG,OAmBU/I,oBAAS,GAnBnB,mBAmBbmL,EAnBa,KAmBJC,EAnBI,OAoBUpL,mBAAS,iBApBnB,mBAoBJ6H,GApBI,aAqBc7H,mBAAS,iBArBvB,mBAqBFqL,GArBE,aAsBYrL,mBAAS,iBAtBrB,mBAsBHsL,GAtBG,aAuBgBtL,mBAAS,iBAvBzB,mBAuBDuL,GAvBC,aAwBgBvL,oBAAS,GAxBzB,mBAwBbiD,EAxBa,KAwBD0E,EAxBC,QAyBY3H,oBAAS,GAzBrB,qBAyBbwL,GAzBa,MAyBHC,GAzBG,SA0BMzL,mBAAS,GA1Bf,qBA0Bb4C,GA1Ba,MA0BN8E,GA1BM,SA2BgB1H,mBAAS,GA3BzB,qBA2BbkB,GA3Ba,MA2BD0G,GA3BC,SA4BQ5H,oBAAS,GA5BjB,qBA4Bb8H,GA5Ba,MA4BLC,GA5BK,SA6BL/H,mBAAS,gTAAjBqD,GA7Ba,wBA8BFrD,mBAAS,6EAApBoJ,GA9Ba,wBA+BJpJ,mBAAS,eAAlBqJ,GA/Ba,wBAgCLrJ,mBA9BA,WAKX,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IACxBhB,GAJa,6BAIMiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEzD,OAAOd,EAsBaa,IAAjBb,GAhCa,wBAiCJtB,mBAAS,+JAAlBuD,GAjCa,wBAkCFvD,mBAAS,qDAApBwD,GAlCa,wBAmCDxD,mBAAS,4DAArB0L,GAnCa,wBAoCD1L,mBAAS,4DAArB2L,GApCa,wBAqCH3L,mBAAS,qEAAnBsJ,GArCa,wBAsCJtJ,mBAAS,KAAlBuJ,GAtCa,wBAuCIvJ,mBAAS,iDAA1B4L,GAvCa,wBAwCF5L,mBAAS,kDAApB6L,GAxCa,wBAyCC7L,mBAAS,0GAAvB8L,GAzCa,wBA0CF9L,mBAAS,wKAApB+L,GA1Ca,wBA2CA/L,mBAAS,iEAAtB2D,GA3Ca,wBA4CF3D,mBAAS,mSAApBkI,GA5Ca,wBA6CHlI,mBAAS,+LAAnBgM,GA7Ca,qBA6HdC,GAAoB,WAClB/K,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErDR,GAAc,IAwFlB,OACI,yBAAKzH,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACX,wDACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACjB,kBAACpB,EAAA,EAAD,CAAM2G,SA3GJ,SAAClB,GACfA,EAAEC,iBACFuD,IAAU,GACN7G,IAAc,GACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QAwGrC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE9C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGR,6BACA,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,GAAY6E,iBAAkB,kBAAM6B,OAE/G,IAAXE,GACI,6BACI,kBAACtH,EAAA,EAAD,KACI,gEACA,6BACA,kBAAC,GAAD,CAAeU,WAAYA,GAAYC,eAAgB8K,KACvD,6BACA,4BAAQ1L,MAAM,kBAAkBd,QAlGzC,WAEfoI,EAAW,SACP3G,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QA8F7B,uBAIJ,kBAAC3H,EAAA,EAAD,KACI,gHACA,6BACA,kBAAC,GAAD,CAAeU,WAAYA,GAAYC,eApH1C,WACjBD,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErDsD,IAAY,GACZ1C,GAAY,GACR7H,IAAc,IACd8J,GAAkB,MA8GE,6BACA,4BAAQzK,MAAM,kBAAkBd,QAnG1C,WAEd6L,EAAY,SACRpK,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErDY,GAAY,KA6FY,wBAKa,IAAbD,EACI,6BACI,kBAACtI,EAAA,EAAD,KACI,gHACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SApG9B,SAAClB,GACbA,EAAEC,iBACEtD,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErDiD,GAAW,KAgG6B,kBAACtM,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASD,UAAU,EAAMmC,KAAK,QAAQuI,IAAI,MAAMxK,YAAY,gGAEnF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,iBAEJ,6BACA,kBAAC,EAAD,CAAU0C,WAAYA,EAAY/B,WAAYA,GAAYC,eAAgB8K,OAG9D,IAAZd,EACI,6BACI,kBAAC3K,EAAA,EAAD,KACI,uDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QA3G9D,WAClB4L,EAAa,SACTnK,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QAwGL,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAAWjH,WAAYA,GAAYC,eAzG/D,WAChBD,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErD6C,GAAkB,OAuG0B,kBAACxK,EAAA,EAAD,KACI,8EACA,6BACA,kBAAC,GAAD,CAAeU,WAAYA,GAAYC,eAvGxE,WACXD,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErD+C,GAAe,MAoGiC,6BACA,4BAAQ3K,MAAM,kBAAkBd,QAlG9D,WAElB8L,EAAc,SACVrK,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QA8FL,uBAIJ,kBAAC3H,EAAA,EAAD,KACI,0DACA,6BACA,4BAAQD,MAAM,uBAAuBd,QA7FxE,WACbqL,GAAY,GACZ7B,EAAa,SACT/H,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QAyFL,sBAGA,4BAAQ/I,KAAK,SAASmB,MAAM,kBAAkBd,QAxFjF,WACboJ,GAAS,GACL3H,IAAc,IACd0G,IAAc,SAAAO,GAAc,OAAIA,EAAiB,QAqFL,mBAGA,6BACA,6BACA,kBAAC,GAAD,CAAQjH,WAAYA,GAAYC,eAzG/D,WACjByG,IAAc,SAAAO,GAAc,OAAIA,EAAiB,WA2Ga,IAAVS,EACI,6BACI,4BAAQpH,SAAUN,IAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAhOxH,WACnBmI,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,IAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACT,IAAIC,KAAK,CAACxB,IAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACwE,IAAQ,CAAEjK,KAAM,eAC1B,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC9C,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC6G,KAAa,IAAI7G,KAAK,CAAC4F,QAC3C,IAAbe,GAAqB,IAAI3G,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OACtD,IAAI7F,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBACxD,IAAnB2L,EAA2B,IAAIlG,KAAK,CAAC+G,KAAkB,IAAI/G,KAAK,CAAChD,QACjD,IAAhBoJ,EAAwB,IAAIpG,KAAK,CAACgH,KAAY,IAAIhH,KAAK,CAAC8F,OACxD,IAAI9F,KAAK,CAACiH,IAAa,CAAE1M,KAAM,eAC/B,IAAIyF,KAAK,CAACkH,IAAU,CAAE3M,KAAM,eAC5B,IAAIyF,KAAK,CAACmH,IAAS,CAAE5M,KAAM,gBAG3B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,oCAAqCE,GAC9CE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAE/CC,IAAUC,OAAOF,EAAS,yBAkM8B,cACW,IAAVzC,GACG,kBAAC,IAAD,CAAMxC,GAAG,4CAAT,IAAqD,4BAAQG,MAAM,mBAAd,qBACnD,MAGV,6BACI,4BAAQiB,SAAUN,IAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QA3QvH,WACpBmI,IAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,IAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACT,IAAIC,KAAK,CAACxB,IAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACuE,IAAU,CAAEhK,KAAM,eAC5B,IAAIyF,KAAK,CAACwE,IAAQ,CAAEjK,KAAM,eAC1B,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC9C,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC6G,KAAa,IAAI7G,KAAK,CAAC4F,QAC3C,IAAbe,GAAqB,IAAI3G,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OACtD,IAAI7F,KAAK,CAACyE,IAAS,CAAElK,KAAM,eAC3B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBACxD,IAAnB2L,EAA2B,IAAIlG,KAAK,CAAC+G,KAAkB,IAAI/G,KAAK,CAAChD,QACjD,IAAhBoJ,EAAwB,IAAIpG,KAAK,CAACgH,KAAY,IAAIhH,KAAK,CAAC8F,OACxD,IAAI9F,KAAK,CAACiH,IAAa,CAAE1M,KAAM,eAC/B,IAAIyF,KAAK,CAACkH,IAAU,CAAE3M,KAAM,gBACf,IAAbyL,EAAoB,IAAIhG,KAAK,CAAClB,KAAc,IAAIkB,KAAK,CAAC6D,OACtD,IAAI7D,KAAK,CAACqD,IAAU,CAAE9I,KAAM,gBAG5B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAmBlF,aAAawF,QAAQ,QAAxC,oBAAoFxF,aAAawF,QAAQ,WAAzG,wBAA4JxF,aAAawF,QAAQ,gBAAjL,8EAAwSxF,aAAawF,QAAQ,gBAA7T,gDAAiZxF,aAAawF,QAAQ,gBAAkB,QAC9cF,EAAIJ,KAAK,oCAAqCE,GAC9CE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAE/CC,IAAUC,OAAOF,EAAS,yBA2O8B,aACW,IAAVzC,GACG,kBAAC,IAAD,CAAMxC,GAAG,mBAAT,IAA4B,4BAAQG,MAAM,mBAAd,oBAA5B,KACE,OAIb,MAEhB,MAEA,QClY9BoG,G,4MAjFP5F,MAAQ,CACJC,UAAU,G,EAEdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI9DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,oBAAoBmB,KAAK,kBAAkBjC,YAAY,0FAEtF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE7E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,iBAAiBmB,KAAK,gBACvD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,kBACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,UAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEvE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,oEAEvE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEjF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,WAAWmB,KAAK,UACjD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,YACA,4BAAQ3B,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,mBAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,gEAEzE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,oBAAoBmB,KAAK,mBAC1D,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,qBACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,UAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,SAASmB,KAAK,QAC/C,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,SACA,4BAAQ3B,MAAM,gBAAd,0BACA,4BAAQA,MAAM,QAAd,SAER,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,QAAQmB,KAAK,MAAMjC,YAAY,sFAE/D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ/E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAO,EAAKiC,SAAS,CAACV,UAAW,EAAKD,MAAMC,UAAW,EAAKC,WAArG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA5EnCH,aCKhBgB,GAAa,WACjB,IAAIC,EAAM,0CAqCV,MApC2D,KAAvDlC,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAE/C,KAAnDF,SAASC,eAAe,iBAAiBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,0BAAmCnC,SAASC,eAAe,iBAAiBC,MAA5E,QAE+C,KAApDF,SAASC,eAAe,kBAAkBC,QAC5CgC,EAAOA,EAAIC,OAAO,IAAK,mBAAqBnC,SAASC,eAAe,kBAAkBC,MAAQ,MAE5C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACvCgC,EAAOA,EAAIC,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAE7B,KAArDF,SAASC,eAAe,mBAAmBC,QAC7CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAEuC,KAA5CF,SAASC,eAAe,UAAUC,QACpCgC,EAAOA,EAAIC,OAAO,IAAX,mBAA4BnC,SAASC,eAAe,UAAUC,MAA9D,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACxCgC,EAAOA,EAAIC,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE7B,KAAvDF,SAASC,eAAe,qBAAqBC,QAC/CgC,EAAOA,EAAIC,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAEpD,KAA9CF,SAASC,eAAe,YAAYC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,qBAA8BnC,SAASC,eAAe,YAAYC,MAAlE,QAEsC,KAA3CF,SAASC,eAAe,SAASC,QACnCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,SAASC,MAAQ,MAEzB,KAAjDF,SAASC,eAAe,eAAeC,QACzCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEDgC,GAsHKoK,OAnHf,WAEE,IAF0B,EAaAlM,mBAAS,GAbT,mBAanB4C,EAbmB,KAaZ8E,EAbY,OAcU1H,oBAAS,GAdnB,mBAcnBiD,EAdmB,KAcP0E,EAdO,OAeU3H,mBAAS,GAfnB,mBAenBkB,EAfmB,KAeP0G,EAfO,OAgBI5H,mBAAS,iBAhBb,mBAgBV6H,GAhBU,aAiBE7H,oBAAS,GAjBX,mBAiBnB8H,EAjBmB,KAiBXC,EAjBW,OAkBX/H,mBAAS,+GAAjBqD,EAlBmB,sBAmBXrD,mBAjBA,WAKb,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IAC1BhB,GAJe,6BAIIiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEvD,OAAOd,EASea,IAAjBb,EAnBmB,sBAoBVtB,mBAAS,+JAAlBuD,EApBmB,sBAqBRvD,mBAAS,yDAApBwD,EArBmB,sBAsBTxD,mBAAS,2CAAnBmM,EAtBmB,sBAuBRnM,mBAAS,wCAApBiI,EAvBmB,sBAwBRjI,mBAAS,4FAApBoM,EAxBmB,sBAyBNpM,mBAAS,wWAAtBqM,EAzBmB,oBAyE1B,OACE,yBAAKnM,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,6DACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACpB,EAAA,EAAD,CAAM2G,SApDI,SAAClB,GACjBA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAkDzC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE5C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGJ,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAEjH,IAAXE,EACE,6BACE,kBAACtH,EAAA,EAAD,KACE,sDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QA5D3B,WACjBkI,GAAc,GACdE,EAAW,SACP3G,GAAc,IAChB0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAwDvC,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAASjH,WAAYA,EAAYC,eAzDtB,WACvByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,UA0DvC,6BACE,4BAAQ5H,MAAM,uBAAuBiB,SAAUN,GAAc,GAAIzB,QAtDvD,WACtBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACvD,GAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,GAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,GAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC9C,IAAf6D,EAAsB,IAAI4B,KAAK,CAACsH,IAAW,IAAItH,KAAK,CAAChD,OACrD,IAAIgD,KAAK,CAACoD,GAAU,CAAE7I,KAAM,eAC5B,IAAIyF,KAAK,CAACuH,GAAU,CAAEhN,KAAM,eAC5B,IAAIyF,KAAK,CAACwH,GAAY,CAAEjN,KAAM,gBAE5B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,wCAAyCE,GAClDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,oBAiChB,YACW,IAAVzC,EACC,kBAAC,IAAD,CAAMxC,GAAG,eAAc,4BAAQG,MAAM,mBAAd,qBACrB,OAGC,QCtGN+L,G,4MApDXvL,MAAQ,CACJC,UAAU,EACV+B,QAAS,iB,EAGb9B,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAI1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,eAAemB,KAAK,cACzD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,cACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEhF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ9E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GA/C5BH,aC4Fd0L,G,4MA1FXxL,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,uBAAuBmB,KAAK,qBAAqBjC,YAAY,oGAE7F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,0BAA0BmB,KAAK,yBACpE,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,2FACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,MAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE7E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,aAAamB,KAAK,YACvD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,6CACA,4BAAQ3B,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,mBAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEvE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,4CAErE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,2IAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,2DAEzE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0FAE/E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,wBAAwBmB,KAAK,sBAAsBjC,YAAY,2FAE/F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,6BAA6BmB,KAAK,2BAA2BjC,YAAY,uHAEzG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,wDAEzE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEjF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,yCAE/D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,SAASe,GAAG,oBAAoBmB,KAAK,kBAAkBjC,YAAY,6GAEvF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAeE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ/E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GArF5BH,aCQvBgB,GAAa,WACf,IAAI2K,EAAI,+CAiDR,MAhD8D,KAA1D5M,SAASC,eAAe,wBAAwBC,QAChD0M,EAAKA,EAAEzK,OAAO,IAAK,yBAA2BnC,SAASC,eAAe,wBAAwBC,MAAQ,MAEzC,KAA7DF,SAASC,eAAe,2BAA2BC,QACnD0M,EAAKA,EAAEzK,OAAO,IAAT,oCAA2CnC,SAASC,eAAe,2BAA2BC,MAA9F,QAE8C,KAAnDF,SAASC,eAAe,iBAAiBC,QACzC0M,EAAKA,EAAEzK,OAAO,IAAT,0BAAiCnC,SAASC,eAAe,iBAAiBC,MAA1E,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAT,uBAA8BnC,SAASC,eAAe,cAAcC,MAApE,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAT,uBAA8BnC,SAASC,eAAe,cAAcC,MAApE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACrC0M,EAAKA,EAAEzK,OAAO,IAAT,sBAA6BnC,SAASC,eAAe,aAAaC,MAAlE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACrC0M,EAAKA,EAAEzK,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEhC,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE/B,KAAnDF,SAASC,eAAe,iBAAiBC,QACzC0M,EAAKA,EAAEzK,OAAO,IAAK,kBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAE7B,KAA3DF,SAASC,eAAe,yBAAyBC,QACjD0M,EAAKA,EAAEzK,OAAO,IAAK,0BAA4BnC,SAASC,eAAe,yBAAyBC,MAAQ,MAExC,KAAhEF,SAASC,eAAe,8BAA8BC,QACtD0M,EAAKA,EAAEzK,OAAO,IAAK,+BAAiCnC,SAASC,eAAe,8BAA8BC,MAAQ,MAElE,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE7B,KAArDF,SAASC,eAAe,mBAAmBC,QAC3C0M,EAAKA,EAAEzK,OAAO,IAAT,4BAAmCnC,SAASC,eAAe,mBAAmBC,MAA9E,QAEkD,KAAvDF,SAASC,eAAe,qBAAqBC,QAC7C0M,EAAKA,EAAEzK,OAAO,IAAK,sBAAwBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAEpD,KAA5CF,SAASC,eAAe,UAAUC,QAClC0M,EAAKA,EAAEzK,OAAO,IAAK,WAAanC,SAASC,eAAe,UAAUC,MAAQ,OAEzB,KAAjDF,SAASC,eAAe,eAAeC,QACvC0M,EAAKA,EAAEzK,OAAO,IAAT,wBAA+BnC,SAASC,eAAe,sBAAsBC,MAA7E,QAED0M,GAIN/D,GAAU,WACZ,IAAI3G,EAAM,IAOV,MANmD,KAA/ClC,SAASC,eAAe,aAAaC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,aAAenC,SAASC,eAAe,aAAaC,QAE/B,KAA5CF,SAASC,eAAe,UAAUC,QAClCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,UAAUC,MAAQ,aAEzEgC,GAGN4G,GAAW,WACb,IAAI5G,EAAM,sEAaV,MAZsD,KAAlDlC,SAASC,eAAe,gBAAgBC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE8C,KAArDF,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEHgC,GAGN4I,GAAkB,WACpB,IAAI+B,EAAK,2DAaT,MAZyD,KAArD7M,SAASC,eAAe,mBAAmBC,QAC3C2M,EAAMA,EAAG1K,OAAO,IAAV,4BAAoCnC,SAASC,eAAe,mBAAmBC,MAA/E,QAE0C,KAAhDF,SAASC,eAAe,cAAcC,QACtC2M,EAAMA,EAAG1K,OAAO,IAAV,uBAA+BnC,SAASC,eAAe,cAAcC,MAArE,QAE2C,KAAjDF,SAASC,eAAe,eAAeC,QACvC2M,EAAMA,EAAG1K,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAEjC,KAArDF,SAASC,eAAe,mBAAmBC,QAC3C2M,EAAMA,EAAG1K,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,mBAAmBC,MAAQ,MAE1F2M,GA8QGC,OA3Qf,WAEI,IAF8B,EAaJ1M,oBAAS,GAbL,mBAavB4I,EAbuB,KAahBC,EAbgB,OAcI7I,mBAAS,iBAdb,mBAcZ2M,GAdY,aAeM3M,oBAAS,GAff,mBAevB4M,EAfuB,KAeXC,EAfW,OAgBI7M,mBAAS,iBAhBb,mBAgBZiJ,GAhBY,aAiBgBjJ,oBAAS,GAjBzB,mBAiBvBkD,EAjBuB,KAiBN8F,EAjBM,OAkBMhJ,oBAAS,GAlBf,mBAkBvBiD,EAlBuB,KAkBX0E,EAlBW,OAmBU3H,oBAAS,GAnBnB,mBAmBvB8M,EAnBuB,KAmBTC,EAnBS,OAoBJ/M,mBAAS,GApBL,mBAoBvB4C,EApBuB,KAoBhB8E,EApBgB,OAqBF1H,oBAAS,GArBP,mBAqBvB8H,EArBuB,KAqBfC,EArBe,OAsBE/H,mBAAS,iBAtBX,mBAsBbgN,GAtBa,aAuBMhN,mBAAS,GAvBf,mBAuBvBkB,EAvBuB,KAuBX0G,EAvBW,OAwBf5H,mBAAS,+NAAjBqD,EAxBuB,uBAyBZrD,mBAAS,+DAApBoJ,GAzBuB,wBA0BdpJ,mBAAS,eAAlBqJ,GA1BuB,wBA2BfrJ,mBAzBA,WAKX,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IACxBhB,GAJa,6BAIMiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEzD,OAAOd,EAiBaa,IAAjBb,GA3BuB,wBA4BdtB,mBAAS,+JAAlBuD,GA5BuB,wBA6BZvD,mBAAS,qDAApBwD,GA7BuB,wBA8BXxD,mBAAS,4DAArB2L,GA9BuB,wBA+BR3L,mBAAS,qEAAxBiN,GA/BuB,wBAgCdjN,mBAAS,KAAlBuJ,GAhCuB,wBAiChBvJ,mBAAS,MAAhBwJ,GAjCuB,wBAkCTxJ,mBAAS,8CAAvBkN,GAlCuB,wBAmCRlN,mBAAS,4EAAxBmN,GAnCuB,wBAoCXnN,mBAAS,gDAArBoN,GApCuB,wBAqCTpN,mBAAS,wHAAvBqN,GArCuB,wBAsCPrN,mBAAS,uEAtCF,yBAuCbA,mBAAS,iSAAnB2J,GAvCuB,wBAwCZ3J,mBAAS,sLAApBsN,GAxCuB,qBAqL9B,OACI,yBAAKpN,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACX,oEACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACjB,kBAACpB,EAAA,EAAD,CAAM2G,SAlJJ,SAAClB,GACfA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAgJjC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE9C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGR,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAE/G,IAAXE,EACI,6BACI,kBAACtH,EAAA,EAAD,KACI,oHACA,6BACA,kBAAC,GAAD,CAAeU,WAAYA,EAAYC,eA1J1C,WACjBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErD4E,GAAgB,MAuJQ,6BACA,4BAAQxM,MAAM,kBAAkBd,QArJ1C,WACduN,EAAY,SACR9L,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAkJ7B,uBAIJ,kBAAC3H,EAAA,EAAD,KACI,gHACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SApJlB,SAAClB,GACbA,EAAEC,iBACFoD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAmJrB,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASD,UAAU,EAAMmC,KAAK,QAAQuI,IAAI,MAAMxK,YAAY,gGAEnF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,iBAEJ,6BACA,kBAAC,EAAD,CAAU0C,WAAYA,EAAY/B,WAAYA,EAAYC,eAtJ5D,WACtByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDR,GAAc,OAsJM,kBAACnH,EAAA,EAAD,KACI,sDACA,4BAAQD,MAAM,kBAAkBd,QA/HzC,WACfkN,EAAa,SACbE,GAAc,GACV3L,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA2H7B,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAAgBjH,WAAYA,EAAYC,eA3I5C,WAChBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,UA2IjC,kBAAC3H,EAAA,EAAD,KACI,wDACA,6BACA,4BAAQD,MAAM,uBAAuBd,QA/JhD,WACbuJ,GAAmB,GACnBC,EAAa,SACT/H,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA2J7B,sBAGA,4BAAQ/I,KAAK,SAASmB,MAAM,kBAAkBd,QApIzD,WACboJ,GAAS,GACL3H,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAiI7B,mBAGA,6BACA,6BACA,kBAAC,GAAD,CAAgBjH,WAAYA,EAAYC,eA/J5C,WAChBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,WAiKnB,IAAVS,EACA,6BACI,4BAAQpH,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAxIxF,WACnBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC5C,IAAjB0N,EAAyB,IAAIjI,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OAC1D,IAAI7F,KAAK,CAACoI,IAAc,CAAE7N,KAAM,eAChC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACpC,IAAfmE,EAAsB,IAAI/H,KAAK,CAACqI,KAAe,IAAIrI,KAAK,CAAChD,OACzD,IAAIgD,KAAK,CAACsI,IAAc,CAAE/N,KAAM,eAChC,IAAIyF,KAAK,CAACuI,IAAW,CAAEhO,KAAM,eAC7B,IAAIyF,KAAK,CAACwI,IAAa,CAAEjO,KAAM,eAC/B,IAAIyF,KAAK,CAACyI,IAAU,CAAElO,KAAM,gBAG1B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,8CAA+CE,GACxDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,mCA0GA,cACW,IAAVzC,EACG,kBAAC,IAAD,CAAMxC,GAAG,4CAAT,IAAqD,4BAAQG,MAAM,mBAAd,qBACnD,MAGV,6BACI,4BAAQiB,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QA7GvF,WACpBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACT,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACuE,IAAU,CAAChK,KAAM,eAC3B,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC5C,IAAjB0N,EAAyB,IAAIjI,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OAC1D,IAAI7F,KAAK,CAACoI,IAAc,CAAE7N,KAAM,eAChC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACpC,IAAfmE,EAAsB,IAAI/H,KAAK,CAACqI,KAAe,IAAIrI,KAAK,CAAChD,OACzD,IAAIgD,KAAK,CAACsI,IAAc,CAAE/N,KAAM,eAChC,IAAIyF,KAAK,CAACuI,IAAW,CAAEhO,KAAM,eAC7B,IAAIyF,KAAK,CAACwI,IAAa,CAAEjO,KAAM,gBAEX,IAApB8D,EAA2B,GAAK,IAAI2B,KAAK,CAAC6D,OAC1C,IAAI7D,KAAK,CAAC8E,IAAS,CAAEvK,KAAM,gBAG3B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,8CAA+CE,GACxDE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAE/CC,IAAUC,OAAOF,EAAS,8BA4EF,aACW,IAAVzC,EACG,kBAAC,IAAD,CAAMxC,GAAG,eAAT,IAAwB,4BAAQG,MAAM,mBAAd,oBAAxB,KACE,OAIT,QCxQlBgN,G,4MAtGXxM,MAAQ,CACJC,UAAU,G,EAGdC,MAAQ,WACA,EAAK5C,MAAM6C,YAAc,IACzB,EAAK7C,MAAM8C,eAAe,EAAK9C,MAAM6C,WAAa,K,EAG1DF,SAAW,WAEP,OADAI,QAAQC,IAAI,EAAKhD,MAAM6C,YAEnB,6BACI,kBAACpC,EAAA,EAAD,KACI,6BACA,kBAACA,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,uBAAuBmB,KAAK,qBAAqBjC,YAAY,oGAE5F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,0BAA0BmB,KAAK,yBACpE,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,2FACA,4BAAQ3B,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,MAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0DAE5E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,aAAamB,KAAK,YACvD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,6CACA,4BAAQ3B,MAAM,WAAd,WACA,4BAAQA,MAAM,QAAd,mBAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,kDAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,4CAEpE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcqC,GAAG,SAASnC,KAAK,OAAOe,GAAG,aAAamB,KAAK,YACvD,4BAAQxB,MAAM,GAAG0B,UAAQ,EAACC,UAAQ,GAAlC,yDACA,4BAAQ3B,MAAM,WAAd,qBACA,4BAAQA,MAAM,YAAd,aAEJ,6BACA,kBAAChB,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,2IAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,2DAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,YAAYmB,KAAK,UAAUjC,YAAY,6DAEtE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,gBAAgBmB,KAAK,cAAcjC,YAAY,0FAE9E,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,wBAAwBmB,KAAK,sBAAsBjC,YAAY,2FAE9F,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,6BAA6BmB,KAAK,2BAA2BjC,YAAY,uHAExG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,kBAAkBmB,KAAK,gBAAgBjC,YAAY,4DAEhF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,SAASmB,KAAK,OAAOjC,YAAY,yCAE9D,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,aAAamB,KAAK,WAAWjC,YAAY,qIAExE,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASe,GAAG,oBAAoBmB,KAAK,kBAAkBjC,YAAY,6GAEtF,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,2BAA2BmB,KAAK,yBAAyBjC,YAAY,mIAElG,6BACA,kBAACP,EAAA,EAAKI,QAAN,CAAcE,KAAK,OAAOe,GAAG,cAAcmB,KAAK,YAAYjC,YAAY,iF,uDAQ9E,IAAD,OACL,OACI,6BACI,4BAAQkB,MAAM,kBAAkBd,QAAS,WAAQ,EAAKiC,SAAS,CAAEV,UAAW,EAAKD,MAAMC,UAAY,EAAKC,WAAxG,8BAGCU,KAAKZ,MAAMC,SAAWW,KAAKX,WAAa,U,GAjG9BH,aCQrBgB,GAAa,WACf,IAAI2K,EAAI,sCA0DR,MAzD8D,KAA1D5M,SAASC,eAAe,wBAAwBC,QAChD0M,EAAKA,EAAEzK,OAAO,IAAK,yBAA2BnC,SAASC,eAAe,wBAAwBC,MAAQ,MAEzC,KAA7DF,SAASC,eAAe,2BAA2BC,QACnD0M,EAAKA,EAAEzK,OAAO,IAAT,oCAA2CnC,SAASC,eAAe,2BAA2BC,MAA9F,QAE8C,KAAnDF,SAASC,eAAe,iBAAiBC,QACzC0M,EAAKA,EAAEzK,OAAO,IAAT,0BAAiCnC,SAASC,eAAe,iBAAiBC,MAA1E,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAT,uBAA8BnC,SAASC,eAAe,cAAcC,MAApE,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAT,uBAA8BnC,SAASC,eAAe,cAAcC,MAApE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACrC0M,EAAKA,EAAEzK,OAAO,IAAT,sBAA6BnC,SAASC,eAAe,aAAaC,MAAlE,QAE2C,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAT,uBAA8BnC,SAASC,eAAe,cAAcC,MAApE,QAE0C,KAA/CF,SAASC,eAAe,aAAaC,QACrC0M,EAAKA,EAAEzK,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAEhC,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAEnC,KAA/CF,SAASC,eAAe,aAAaC,QACrC0M,EAAKA,EAAEzK,OAAO,IAAK,cAAgBnC,SAASC,eAAe,aAAaC,MAAQ,MAE7B,KAAnDF,SAASC,eAAe,iBAAiBC,QACzC0M,EAAKA,EAAEzK,OAAO,IAAK,kBAAoBnC,SAASC,eAAe,iBAAiBC,MAAQ,MAE7B,KAA3DF,SAASC,eAAe,yBAAyBC,QACjD0M,EAAKA,EAAEzK,OAAO,IAAK,0BAA4BnC,SAASC,eAAe,yBAAyBC,MAAQ,MAExC,KAAhEF,SAASC,eAAe,8BAA8BC,QACtD0M,EAAKA,EAAEzK,OAAO,IAAK,+BAAiCnC,SAASC,eAAe,8BAA8BC,MAAQ,MAE7D,KAArDF,SAASC,eAAe,mBAAmBC,QAC3C0M,EAAKA,EAAEzK,OAAO,IAAT,4BAAmCnC,SAASC,eAAe,mBAAmBC,MAA9E,QAEuC,KAA5CF,SAASC,eAAe,UAAUC,QAClC0M,EAAKA,EAAEzK,OAAO,IAAK,WAAanC,SAASC,eAAe,UAAUC,MAAQ,OAE1B,KAAhDF,SAASC,eAAe,cAAcC,QACtC0M,EAAKA,EAAEzK,OAAO,IAAK,eAAiBnC,SAASC,eAAe,cAAcC,MAAQ,MAE3B,KAAvDF,SAASC,eAAe,qBAAqBC,QAC7C0M,EAAKA,EAAEzK,OAAO,IAAK,uBAAyBnC,SAASC,eAAe,qBAAqBC,MAAQ,MAEnC,KAA9DF,SAASC,eAAe,4BAA4BC,QACpD0M,EAAKA,EAAEzK,OAAO,IAAT,qCAA4CnC,SAASC,eAAe,4BAA4BC,MAAhG,QAE4C,KAAjDF,SAASC,eAAe,eAAeC,QACvC0M,EAAKA,EAAEzK,OAAO,IAAT,wBAA+BnC,SAASC,eAAe,sBAAsBC,MAA7E,QAED0M,GAGN/D,GAAU,WACZ,IAAI3G,EAAM,IAOV,MANmD,KAA/ClC,SAASC,eAAe,aAAaC,QACrCgC,EAAOA,EAAIC,OAAO,IAAK,aAAenC,SAASC,eAAe,aAAaC,QAE/B,KAA5CF,SAASC,eAAe,UAAUC,QAClCgC,EAAOA,EAAIC,OAAO,IAAK,UAAYnC,SAASC,eAAe,UAAUC,MAAQ,aAEzEgC,GAGN4G,GAAW,WACb,IAAI5G,EAAM,sEAaV,MAZsD,KAAlDlC,SAASC,eAAe,gBAAgBC,QACxCgC,EAAOA,EAAIC,OAAO,IAAX,yBAAkCnC,SAASC,eAAe,gBAAgBC,MAA1E,QAEyC,KAAhDF,SAASC,eAAe,cAAcC,QACtCgC,EAAOA,EAAIC,OAAO,IAAX,uBAAgCnC,SAASC,eAAe,cAAcC,MAAtE,QAE8C,KAArDF,SAASC,eAAe,mBAAmBC,QAC3CgC,EAAOA,EAAIC,OAAO,IAAX,4BAAqCnC,SAASC,eAAe,mBAAmBC,MAAhF,QAE0C,KAAjDF,SAASC,eAAe,eAAeC,QACvCgC,EAAOA,EAAIC,OAAO,IAAX,wBAAiCnC,SAASC,eAAe,eAAeC,MAAxE,QAEHgC,GAGN4I,GAAkB,WACpB,IAAI+B,EAAK,2DAaT,MAZyD,KAArD7M,SAASC,eAAe,mBAAmBC,QAC3C2M,EAAMA,EAAG1K,OAAO,IAAV,4BAAoCnC,SAASC,eAAe,mBAAmBC,MAA/E,QAE0C,KAAhDF,SAASC,eAAe,cAAcC,QACtC2M,EAAMA,EAAG1K,OAAO,IAAV,uBAA+BnC,SAASC,eAAe,cAAcC,MAArE,QAE2C,KAAjDF,SAASC,eAAe,eAAeC,QACvC2M,EAAMA,EAAG1K,OAAO,IAAK,gBAAkBnC,SAASC,eAAe,eAAeC,MAAQ,MAEjC,KAArDF,SAASC,eAAe,mBAAmBC,QAC3C2M,EAAMA,EAAG1K,OAAO,IAAK,oBAAsBnC,SAASC,eAAe,mBAAmBC,MAAQ,MAE1F2M,GA8QGe,OA3Qf,WAEI,IAFoC,EAaVxN,oBAAS,GAbC,mBAa7B4I,EAb6B,KAatBC,EAbsB,OAcF7I,mBAAS,iBAdP,mBAclB2M,GAdkB,aAeA3M,oBAAS,GAfT,mBAe7B4M,EAf6B,KAejBC,EAfiB,OAgBF7M,mBAAS,iBAhBP,mBAgBlBiJ,GAhBkB,aAiBUjJ,oBAAS,GAjBnB,mBAiB7BkD,EAjB6B,KAiBZ8F,EAjBY,OAkBAhJ,oBAAS,GAlBT,mBAkB7BiD,EAlB6B,KAkBjB0E,EAlBiB,OAmBI3H,oBAAS,GAnBb,mBAmB7B8M,EAnB6B,KAmBfC,EAnBe,OAoBV/M,mBAAS,GApBC,mBAoB7B4C,EApB6B,KAoBtB8E,EApBsB,OAqBR1H,oBAAS,GArBD,mBAqB7B8H,EArB6B,KAqBrBC,EArBqB,OAsBJ/H,mBAAS,iBAtBL,mBAsBnBgN,GAtBmB,aAuBAhN,mBAAS,GAvBT,mBAuB7BkB,EAvB6B,KAuBjB0G,EAvBiB,OAwBrB5H,mBAAS,+NAAjBqD,EAxB6B,uBAyBlBrD,mBAAS,+DAApBoJ,GAzB6B,wBA0BpBpJ,mBAAS,eAAlBqJ,GA1B6B,wBA2BrBrJ,mBAzBA,WAKX,IAJA,IAAIsB,EAAO,GAGPc,EAFa,6BAEiBC,OACzBC,EAAI,EAAGA,EAFH,EAEeA,IACxBhB,GAJa,6BAIMiB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEzD,OAAOd,EAiBaa,IAAjBb,GA3B6B,wBA4BpBtB,mBAAS,+JAAlBuD,GA5B6B,wBA6BlBvD,mBAAS,qDAApBwD,GA7B6B,wBA8BjBxD,mBAAS,4DAArB2L,GA9B6B,wBA+Bd3L,mBAAS,qEAAxBiN,GA/B6B,wBAgCpBjN,mBAAS,KAAlBuJ,GAhC6B,wBAiCtBvJ,mBAAS,MAAhBwJ,GAjC6B,wBAkCfxJ,mBAAS,sCAAvBkN,GAlC6B,wBAmCdlN,mBAAS,4EAAxBmN,GAnC6B,wBAoCjBnN,mBAAS,gDAArBoN,GApC6B,wBAqCfpN,mBAAS,wHAAvBqN,GArC6B,wBAsCbrN,mBAAS,mDAAzByN,GAtC6B,wBAuCnBzN,mBAAS,qRAAnB2J,GAvC6B,wBAwClB3J,mBAAS,sLAApBsN,GAxC6B,qBAqLpC,OACI,yBAAKpN,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACX,4EACA,6BACA,kBAACM,EAAA,EAAD,CAAWN,UAAU,WACjB,kBAACpB,EAAA,EAAD,CAAM2G,SAlJJ,SAAClB,GACfA,EAAEC,iBACFuD,GAAU,GACVH,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAgJjC,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcC,UAAU,EAAME,YAAY,qCAE9C,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,eAGR,kBAAC,IAAD,CAAYmF,OAAQ,GAAIC,YAAa,IAAMC,eAAgB,IAAKC,MAAM,UAAUC,SAAU5E,EAAY6E,iBAAkB,kBAAM6B,MAE/G,IAAXE,EACI,6BACI,kBAACtH,EAAA,EAAD,KACI,gHACA,6BACA,kBAAC,GAAD,CAAeU,WAAYA,EAAYC,eA1J1C,WACjBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MAErD4E,GAAgB,MAuJQ,6BACA,4BAAQxM,MAAM,kBAAkBd,QArJ1C,WACduN,EAAY,SACR9L,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAkJ7B,uBAIJ,kBAAC3H,EAAA,EAAD,KACI,gHACA,6BACA,kBAAC1B,EAAA,EAAD,CAAM2G,SApJlB,SAAClB,GACbA,EAAEC,iBACFoD,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAmJrB,kBAACrJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,WAClB,kBAACF,EAAA,EAAKI,QAAN,CAAcE,KAAK,SAASD,UAAU,EAAMmC,KAAK,QAAQuI,IAAI,MAAMxK,YAAY,gGAEnF,4BAAQD,KAAK,SAASmB,MAAM,mBAA5B,iBAEJ,6BACA,kBAAC,EAAD,CAAU0C,WAAYA,EAAY/B,WAAYA,EAAYC,eAtJ5D,WACtByG,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDR,GAAc,OAsJM,kBAACnH,EAAA,EAAD,KACI,sDACA,6BACA,4BAAQD,MAAM,kBAAkBd,QAhIzC,WACfkN,EAAa,SACbE,GAAc,GACV3L,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA4H7B,sBAGA,6BACA,6BACA,kBAAC,GAAD,CAAcjH,WAAYA,EAAYC,eA5I1C,WAChBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,UA4IjC,kBAAC3H,EAAA,EAAD,KACI,wDACA,6BACA,4BAAQD,MAAM,uBAAuBd,QAhKhD,WACbuJ,GAAmB,GACnBC,EAAa,SACT/H,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QA4J7B,sBAGA,4BAAQ/I,KAAK,SAASmB,MAAM,kBAAkBd,QArIzD,WACboJ,GAAS,GACL3H,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,QAkI7B,mBAGA,6BACA,6BACA,kBAAC,GAAD,CAAgBjH,WAAYA,EAAYC,eAhK5C,WAChBD,GAAc,IACd0G,GAAc,SAAAO,GAAc,OAAIA,EAAiB,WAiKnB,IAAVS,EACA,6BACI,4BAAQpH,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QAxIxF,WACnBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACX,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC5C,IAAjB0N,EAAyB,IAAIjI,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OAC1D,IAAI7F,KAAK,CAACoI,IAAc,CAAE7N,KAAM,eAChC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACpC,IAAfmE,EAAsB,IAAI/H,KAAK,CAACqI,KAAe,IAAIrI,KAAK,CAAChD,OACzD,IAAIgD,KAAK,CAACsI,IAAc,CAAE/N,KAAM,eAChC,IAAIyF,KAAK,CAACuI,IAAW,CAAEhO,KAAM,eAC7B,IAAIyF,KAAK,CAACwI,IAAa,CAAEjO,KAAM,eAC/B,IAAIyF,KAAK,CAACyI,IAAU,CAAElO,KAAM,gBAG1B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,oDAAqDE,GAC9DE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAEjDC,IAAUC,OAAOF,EAAS,wBA0GA,cACW,IAAVzC,EACG,kBAAC,IAAD,CAAMxC,GAAG,4CAAT,IAAqD,4BAAQG,MAAM,mBAAd,qBACnD,MAGV,6BACI,4BAAQiB,SAAUN,GAAc,GAAI9B,KAAK,SAASmB,MAAM,uBAAuBd,QA7GvF,WACpBmI,GAAc,SAAAO,GAAc,OAAIA,EAAiB,MACjDT,GAAS,SAAAU,GAAS,OAAIA,EAAY,KAElC,IAAMxD,EAAO,CACT,IAAIC,KAAK,CAACxB,GAAO,CAAEjE,KAAM,eACzB,IAAIyF,KAAK,CAACuE,IAAU,CAAChK,KAAM,eAC3B,IAAIyF,KAAK,CAACwE,IAAQ,CAACjK,KAAM,eACzB,IAAIyF,KAAK,CAACvD,IAAO,CAAElC,KAAM,eACzB,IAAIyF,KAAK,CAACtB,IAAQ,CAAEnE,KAAM,eAC1B,IAAIyF,KAAK,CAACrB,IAAU,CAAEpE,KAAM,eAC5B,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,OAAQ,CAAEV,KAAM,gBAC5C,IAAjB0N,EAAyB,IAAIjI,KAAK,CAAC8G,KAAa,IAAI9G,KAAK,CAAC6F,OAC1D,IAAI7F,KAAK,CAACoI,IAAc,CAAE7N,KAAM,eAChC,IAAIyF,KAAK,CAACjF,SAASC,eAAe,WAAWC,MAAQ,KAAM,CAAEV,KAAM,eACnE,IAAIyF,KAAK,CAAC0E,IAAQ,CAAEnK,KAAM,eAC1B,IAAIyF,KAAK,EAAE,IAAMjF,SAASC,eAAe,WAAWC,OAAS,KAAM,CAAEV,KAAM,gBAC5D,IAAf6D,EAAuB,IAAI4B,KAAK,CAAC2E,KAAQ,IAAI3E,KAAK,CAAC4D,QACpC,IAAfmE,EAAsB,IAAI/H,KAAK,CAACqI,KAAe,IAAIrI,KAAK,CAAChD,OACzD,IAAIgD,KAAK,CAACsI,IAAc,CAAE/N,KAAM,eAChC,IAAIyF,KAAK,CAACuI,IAAW,CAAEhO,KAAM,eAC7B,IAAIyF,KAAK,CAACwI,IAAa,CAAEjO,KAAM,gBAEX,IAApB8D,EAA2B,IAAI2B,KAAK,CAAC4I,KAAiB,IAAI5I,KAAK,CAAC6D,OAChE,IAAI7D,KAAK,CAAC8E,IAAS,CAAEvK,KAAM,gBAG3B0F,EAAQ,IAAIC,KAAKH,EAAM,UACvBI,EAAM,IAAIC,IACdD,EAAIJ,KAAK,YAAa,WAAkBlF,aAAawF,QAAQ,QAAvC,oBAAkFxF,aAAawF,QAAQ,WAAvG,wBAA2JxF,aAAawF,QAAQ,gBAAhL,8EAAuSxF,aAAawF,QAAQ,gBAA5T,gDAAgZxF,aAAawF,QAAQ,gBAAkB,QAC7cF,EAAIJ,KAAK,oDAAqDE,GAC9DE,EAAIG,cAAc,CAAE/F,KAAM,SAAUgG,MAAK,SAAUC,GAE/CC,IAAUC,OAAOF,EAAS,wBA4EF,aACW,IAAVzC,EACG,kBAAC,IAAD,CAAMxC,GAAG,eAAT,IAAwB,4BAAQG,MAAM,mBAAd,oBAAxB,KACE,OAIT,QCvUlBmN,OAjCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKxN,UAAU,cACb,kBAAC,EAAD,MACA,yBAAKC,GAAG,wBACN,yBAAKI,MAAM,uBACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoN,KAAK,IAAIC,UAAWC,EAASC,OAAK,IACzC,kBAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWtN,EAAWwN,OAAK,IAClD,kBAAC,IAAD,CAAOH,KAAK,kBAAkBC,UAAW1L,EAAQ4L,OAAK,IACtD,kBAAC,IAAD,CAAOH,KAAK,eAAeC,UAAWzH,EAAK2H,OAAK,IAChD,kBAAC,IAAD,CAAOH,KAAK,eAAeC,UAAWhH,EAAKkH,OAAK,IAChD,kBAAC,IAAD,CAAOH,KAAK,eAAeC,UAAW3G,EAAK6G,OAAK,IAChD,kBAAC,IAAD,CAAOH,KAAK,mBAAmBC,UAAWvG,EAAiByG,OAAK,IAChE,kBAAC,IAAD,CAAOH,KAAK,SAASC,UAAWC,EAASC,OAAK,IAC9C,kBAAC,IAAD,CAAOH,KAAK,kBAAkBC,UAAW7G,EAAuB+G,OAAK,IACrE,kBAAC,IAAD,CAAOH,KAAK,4BAA4BC,UAAWnG,EAAWqG,OAAK,IACnE,kBAAC,IAAD,CAAOH,KAAK,6BAA6BC,UAAWjF,GAAYmF,OAAK,IACrE,kBAAC,IAAD,CAAOH,KAAK,uCAAuCC,UAAW9D,GAAsBgE,OAAK,IACzF,kBAAC,IAAD,CAAOH,KAAK,+BAA+BC,UAAWhD,GAAckD,OAAK,IACzE,kBAAC,IAAD,CAAOH,KAAK,cAAcC,UAAWtF,EAAmBwF,OAAK,IAC7D,kBAAC,IAAD,CAAOH,KAAK,+BAA+BC,UAAW1B,GAAkB4B,OAAK,IAC7E,kBAAC,IAAD,CAAOH,KAAK,qCAAqCC,UAAWlB,GAAwBoB,OAAK,IACzF,kBAAC,IAAD,CAAOH,KAAK,2CAA2CC,UAAWJ,GAA8BM,OAAK,UChC/FC,QACW,cAA7BhK,OAAOiK,SAASC,UAEe,UAA7BlK,OAAOiK,SAASC,UAEhBlK,OAAOiK,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFzO,SAASC,eAAe,SDwHpB,kBAAmByO,WACrBA,UAAUC,cAAcC,MACrBpJ,MAAK,SAAAqJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxN,QAAQwN,MAAMA,EAAMC,c","file":"static/js/main.6d4f6f3c.chunk.js","sourcesContent":["import { Form, Button, Modal } from 'react-bootstrap'\r\nimport './Cluster/Algorithms/Algorithms.css'\r\nimport React from 'react'\r\n\r\nconst FormSbt = (props) => {\r\n\r\n    const myhadler = () => {\r\n       localStorage.setItem('SparkVersion', document.getElementById('SparkVersionID').value); \r\n       localStorage.setItem('ScalaVersion', document.getElementById('ScalaVersionID').value); \r\n       localStorage.setItem('Name', document.getElementById('nameID').value); \r\n       localStorage.setItem('Version', document.getElementById('VersionID').value);       \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={props.show} onHide={props.handleModalOpen}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Fill this form to continue</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group controlId=\"nameID\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control required={true} type=\"text\" placeholder=\"Enter the name of jar file\" />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"VersionID\">\r\n                            <Form.Label>Version</Form.Label>\r\n                            <Form.Control required={true} type=\"text\" placeholder=\"Enter your Version\" />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"SparkVersionID\">\r\n                            <Form.Label>Spark Version</Form.Label>\r\n                            <Form.Control required={true} type=\"text\" placeholder=\"Enter your Spark Version\" />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"ScalaVersionID\">\r\n                            <Form.Label>Scala Version</Form.Label>\r\n                            <Form.Control required={true} type=\"text\" placeholder=\"Enter your Scala Version \" />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={props.handleModalOpen}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={()=>{\r\n                        myhadler();\r\n                        props.handleModalOpen();\r\n                        }}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default FormSbt;\r\n","import React, { useState } from 'react'\r\n// import './toolbar.css'\r\nimport './toolbar.css'\r\nimport { Link } from 'react-router-dom';\r\nimport FormSbt from './FormSbt';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n//import { ReactComponent } from '*.svg';\r\n\r\nfunction Toolbar() {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleModalOpen = () => { //this is for default params in train\r\n        setShow(!show);\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n\r\n            <div className=\"sidebar-heading\"><h1>SparkReact</h1></div>\r\n            <div className=\"list-group list-group-flush\">\r\n                <Link onClick={handleModalOpen} className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster\">Clustering</Link>\r\n                <Link onClick={handleModalOpen} className=\"list-group-item list-group-item-action bg-light\" to=\"/classification\">Classification</Link>\r\n                <Link onClick={handleModalOpen} className=\"list-group-item list-group-item-action bg-light\" to=\"/regression\">Regression</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/about\">About this project</Link>\r\n            </div>\r\n            <FormSbt\r\n                show={show}\r\n                handleModalOpen={handleModalOpen}\r\n            />\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Toolbar; \r\n","import React from 'react'\r\n//import './myCluster.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ClusterToolbar = () => (\r\n    \r\n        <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n            <div className=\"sidebar-heading\">\r\n                <h1>Clustering</h1>\r\n            </div>\r\n            <div className=\"list-group list-group-flush\">\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster/Kmeans\">Kmeans</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster/LDA\">Latent Dirichlet allocation (LDA)</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster/PIC\">Power Iteration Clustering (PIC)</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster/GMM\">Gaussian Mixture Model (GMM)</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to=\"/cluster/BKmeans\">Bisecting k-means</Link>\r\n            </div>\r\n        </div>\r\n    \r\n)\r\n\r\nexport default ClusterToolbar","import React from 'react'\r\n//import './myCluster.css'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from './ClusterToolbar';\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nconst Mycluster = () => (\r\n\r\n    <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <div class=\"container-fluid\">\r\n            <div>\r\n                <p> This page describes clustering algorithms in MLlib.\r\n                    Below show up details about each algorithm </p>\r\n                <Jumbotron>\r\n                    <h1>Kmeans</h1>\r\n                    <p> \r\n                        One of the most commonly used clustering algorithms\r\n                        that clusters the data points into a predefined number of clusters \r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/K-means_clustering\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to='/cluster/Kmeans'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                    <h1> Latent Dirichlet allocation (LDA) </h1>\r\n                    <p>\r\n                        A generative statistical model\r\n                        that allows sets of observations to be\r\n                        explained by unobserved groups that explain why some parts of the data are similar.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to='/cluster/LDA'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                    <h1>Bisecting k-means</h1>\r\n                    <p> A kind of hierarchical clustering\r\n                        using a divisive (or “top-down”) approach:<br />\r\n                        all observations start in one cluster, and splits\r\n                        are performed recursively as one moves down the hierarchy.<br />\r\n                        Bisecting K-means can often be much faster than regular K-means,\r\n                        but it will generally produce a different clustering.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Hierarchical_clustering\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to='/cluster/BKmeans'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                    <h1>Gaussian Mixture Model </h1>\r\n                    <p>\r\n                        Represents a composite distribution\r\n                        whereby points are drawn from one of k Gaussian sub-distributions,\r\n                        each with its own probability.<br />\r\n                        The spark.ml implementation uses the expectation-maximization\r\n                        algorithm to induce the maximum-likelihood model given a set of samples.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Mixture_model#Multivariate_Gaussian_mixture_model\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to='/cluster/GMM'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                    <h1>Power Iteration Clustering (PIC) </h1>\r\n                    <p>\r\n                        A scalable graph clustering algorithm developed by Lin and Cohen.<br />\r\n                        From the abstract: PIC finds a very low-dimensional\r\n                        embedding of a dataset using truncated power iteration\r\n                        on a normalized pair-wise similarity matrix of the data.\r\n                    </p>\r\n                    <a href=\"http://www.cs.cmu.edu/~frank/papers/icml2010-pic-final.pdf\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to='/cluster/PIC'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n\r\n\r\nexport default Mycluster;","import React, { Component } from 'react'\r\nimport './../Cluster/Algorithms/Algorithms.css' \r\n\r\nclass myabout extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"welcome\">\r\n                <br />\r\n                <br />\r\n                <br />\r\n                    <h> Hello this is a GUI for MLib Apache Spark library.</h>\r\n                <br />\r\n                <br />\r\n                    <h> MLlib is Spark’s machine learning (ML) library. \r\n                        Its goal is to make practical machine learning scalable and easy. \r\n                    </h> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default myabout; ","\r\nimport React, { Component } from 'react';\r\nimport '../Algorithms.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass Myforms extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 30);\r\n        }\r\n    }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control id=\"kname\" type=\"number\" name=\"K\" placeholder=\"Κ -> \r\n                                    The number of clusters to create (k).\r\n                                    Must be > 1. (default: 2)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxname\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                    Parameter for maximum number of iterations. \r\n                                    Must be >= 0 (default: 20)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedname\" name=\"seed\" placeholder=\"seed ->\r\n                                    Parameter for random seed \r\n                                    default: -1689246527)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"tolname\" name=\"tol\" placeholder=\"tol ->\r\n                                    Parameter for the convergence tolerance \r\n                                    for iterative algorithms \r\n                                    (Must be >= 0)\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColname\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                    Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColname\" name=\"featuresCol\" placeholder=\"featuresCol ->\r\n                                    Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"distanceMeasurename\" name=\"distanceMeasure\" >\r\n                            <option value=\"\" disabled selected>distanceMeasure (Parameter for The distance measure.)</option>\r\n                            <option value=\"euclidean\">euclidean</option>\r\n                            <option value=\"cosine\">cosine</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColname\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                    Parameter for weight column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"initModename\" name=\"initMode\" >\r\n                            <option value=\"\" disabled selected>initmode (Parameter for initial cluster center.)</option>\r\n                            <option value=\"random\">random</option>\r\n                            <option value=\"k-means\">k-means</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"initStepsname\" name=\"initSteps\" placeholder=\"initSteps ->\r\n                                    Parameter for the number of steps for the k-means. Must be > 0. Default: 2.'\" />\r\n                </Form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button id = \"thebuttons\" type=\"submit\" class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Myforms\r\n\r\n","import React, { Component } from 'react'; \r\nimport { Form } from 'react-bootstrap';\r\nimport '../Algorithms.css'\r\n\r\nclass EvalForm extends Component {\r\n    state = { \r\n        showForm: false,\r\n    }\r\n\r\n        myfun = () => {\r\n            if (this.props.percentage <= 69) {\r\n                this.props.parentCallback(this.props.percentage + 30);\r\n            }            \r\n        } \r\n\r\n        showForm = () => {\r\n            return (\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColName\" name=\"predictionCol\" placeholder=\"predictionCol -> \r\n                                Parameter for prediction column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"mymetricName\" name=\"metricName\" placeholder=\"metricName ->\r\n                                Parameter for metric name in evaluation (supports silhouette (default))\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"distanceMeasureName\" name=\"distanceMeasure\" >\r\n                            <option value=\"\" disabled selected>distanceMeasure (Parameter for distance measure to be used in evaluation)</option>\r\n                            <option value=\"squaredEuclcontrolIdean\">squaredEuclcontrolIdean</option>\r\n                            <option value=\"cosine\">cosine</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColName\" name=\"featuresCol\" placeholder=\"featuresCol ->\r\n                                Parameter for features column name\" />\r\n                </Form>\r\n            );\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <button type=\"submit\" class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm},this.myfun);}} > \r\n                        Choose your own parameters\r\n                    </button>\r\n                    {this.state.showForm ? this.showForm() : null}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default EvalForm","import React, { Component } from 'react'\r\nimport '../Algorithms.css'\r\nimport Myforms from './form'\r\nimport EvalForm from './EvaluationForm'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver';\r\nimport JSZip from 'jszip'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from '../../ClusterToolbar'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\n\r\n\r\n\r\nfunction submitForm() {\r\n  let myK = \"val kmeans = new KMeans()\";\r\n  if (document.getElementById(\"kname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setK(\" + document.getElementById(\"kname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"maxname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColname\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"predictionColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setPredictionCol(\\\"\" + document.getElementById(\"predictionColname\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"seedname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedname\").value + \"L)\"));\r\n  }\r\n  if (document.getElementById(\"tolname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setTol(\" + document.getElementById(\"tolname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"distanceMeasurename\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setDistanceMeasure(\\\"\" + document.getElementById(\"distanceMeasurename\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"weightColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setWeightCol(\\\"\" + document.getElementById(\"weightColname\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"initModename\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setInitMode(\\\"\" + document.getElementById(\"initModename\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"initStepsname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setInitSteps(\\\"\" + document.getElementById(\"initStepsname\").value + \"\\\")\"));\r\n  }\r\n\r\n  return (myK);\r\n\r\n}\r\n\r\nfunction myevalForm() {\r\n  let myeval = \"\\tval evaluator = new ClusteringEvaluator()\";\r\n\r\n  if (document.getElementById(\"predictionColName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setPredictionCol(\\\"\" + document.getElementById(\"predictionColName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"mymetricName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setMetricName(\\\"\" + document.getElementById(\"mymetricName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"distanceMeasureName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setDistanceMeasure(\\\"\" + document.getElementById(\"distanceMeasureName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColName\").value}\")`));\r\n  }\r\n\r\n  return (myeval);\r\n}\r\n\r\nclass Kmeans extends Component {\r\n\r\n  makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  state = {\r\n    pressed: 0,\r\n    pivot: 0,\r\n    theToggle: false,\r\n    percentage: 0,\r\n    evalColor: 'darkgoldenrod',\r\n    mycolor: 'darkgoldenrod',\r\n    skipcolor: 'darkgoldenrod',\r\n    showbutton: false,\r\n    showButtonIndex: false,\r\n    skipbutton: false,\r\n    changeLibs: [\"import org.apache.spark.ml.clustering.KMeans\"],\r\n    libs: [\"import org.apache.spark.ml.clustering.KMeans\\nimport org.apache.spark.ml.evaluation.ClusteringEvaluator\"],\r\n    standars: [\"\\nimport org.apache.spark.sql.SparkSession\\nobject\\t\"],\r\n    name: [this.makeid()],\r\n    basic: [\"{\\n def main(args: Array[String]): Unit = { \\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()\\n\\tval dataset = spark.read.format(\\\"libsvm\\\").load(\\\"\"],\r\n    dataset: [\"\\\") \\n\\t\"],\r\n    constructor: [\"val kmeans = new KMeans()\\n\"],\r\n    predictions: [\"\\n\\tval model = kmeans.fit(dataset)\\n\\tval predictions = model.transform(dataset)\\n\"],\r\n    evaluator: [\"\\n\\tval evaluator = new ClusteringEvaluator()\\n\"],\r\n    silhouette: [\"\\n\\tval silhouette = evaluator.evaluate(predictions)\\n\\tprintln(s\\\"Silhouette with squared euclidean distance = $silhouette\\\")\\n\"],\r\n    results: [\"\\n\\tprintln(\\\"Cluster Centers: \\\")\\n\\tmodel.clusterCenters.foreach(println)\\n\\tspark.stop()\\n }\\n}\"]\r\n  }\r\n\r\n\r\n  handleEdit = () => { //this is for default params in LDA train\r\n    console.log(this.state.showbutton)\r\n    this.setState({\r\n      showbutton: true,\r\n      mycolor: 'beige',\r\n    });\r\n    this.setState({ pressed: this.state.pressed + 1 });\r\n    if (this.state.percentage <= 39) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n    window.scrollTo({\r\n          top: 1000,\r\n          behavior: 'smooth'\r\n    })\r\n \r\n  };\r\n\r\n  evalEdit = () => { //this is for evaluation with default params\r\n    this.setState({\r\n      showButtonIndex: !this.state.showButtonIndex,\r\n      evalColor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 69) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  };\r\n\r\n  callbackFunction = (childData) => { //this is for progress bar\r\n    this.setState({ percentage: childData })\r\n    this.setState({ pressed: this.state.pressed + 1 })\r\n  }\r\n\r\n  myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    const myToggle = this.state.theToggle;\r\n    this.setState({ theToggle: !myToggle });\r\n    if (this.state.percentage <= 9) {\r\n      this.setState({ percentage: this.state.percentage + 10 });\r\n    }\r\n  }\r\n\r\n  skipEval = () => { //this is for skipping evalutation\r\n    this.setState({\r\n      skipbutton: true,\r\n      skipcolor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 69) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  }\r\n\r\n  notDefaultFile = () => {  //this is the file after skipping evalutation\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    //const element = document.createElement(\"a\");\r\n    const file = [\r\n      new Blob([this.state.changeLibs], { type: 'text/plain' }),\r\n      new Blob([this.state.standars], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset]),\r\n      this.state.showbutton === true ? new Blob([this.state.constructor]) : new Blob([submitForm()]),\r\n      new Blob([this.state.predictions]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/Kmeans.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"Kmeans.zip\");\r\n    });\r\n  }\r\n\r\n  downloadTxtFile = () => { //this is the file after evalutation\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    //const element = document.createElement(\"a\");\r\n    const file = [\r\n      new Blob([this.state.libs], { type: 'text/plain' }),\r\n      new Blob([this.state.standars], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset]),\r\n      this.state.showbutton === true ? new Blob([this.state.constructor]) : new Blob([submitForm()]),\r\n      new Blob([this.state.predictions]),\r\n      this.state.showButtonIndex === true ? new Blob([this.state.evaluator]) : new Blob([myevalForm()]),\r\n      new Blob([this.state.silhouette]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    //element.href = URL.createObjectURL(parts);\r\n    //element.download = \"myFile.txt\";\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/Kmeans.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"Kmeans.zip\");\r\n    });\r\n\r\n    //document.body.appendChild(element); // Required for this to work in FireFox\r\n    //element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <div className=\"welcome\">\r\n          <h1> KMeans Algorithm </h1>\r\n          <br />\r\n          <Jumbotron className=\"myinput\">\r\n            <Form onSubmit={this.myToggler}>\r\n              <Form.Group controlId=\"myInput\">\r\n                <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n              </Form.Group>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n            </Form>\r\n          </Jumbotron>\r\n          <br />\r\n          <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={this.state.percentage} onLoaderFinished={() => this.state.percentage} />\r\n          {\r\n            this.state.theToggle === true ?\r\n              <div>\r\n                <Jumbotron>\r\n                  <h2> Train your K-means model </h2>\r\n                  <br />\r\n                  <button type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.handleEdit}>\r\n                    Default Parameters\r\n                  </button>\r\n                  <br />\r\n                  <br />\r\n                  <Myforms percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                </Jumbotron >\r\n                <br />\r\n                {\r\n                  this.state.pressed >= 1 ?\r\n                    <Jumbotron ref={this.statsRef}>\r\n                      <h2> Evaluate your K-means model </h2>\r\n                      <br />\r\n                      <button type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.evalEdit}>\r\n                        Default Parameters\r\n                      </button>\r\n                      <button type=\"submit\" class=\"btn btn-primary\" onClick={this.skipEval}>\r\n                        Skip Evaluation\r\n                      </button>\r\n                      <br />\r\n                      <br />\r\n                      <EvalForm percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                    </Jumbotron>\r\n                    : null\r\n                }\r\n                <br />\r\n                {\r\n                  this.state.skipbutton === true ?\r\n                    <div>\r\n                      <button disabled={this.state.percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.notDefaultFile}> Download </button>\r\n                      {this.state.pivot === 1 ?\r\n                        <Link to='/cluster'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                        : null\r\n                      }\r\n                    </div> :\r\n                    <div>\r\n                      <button disabled={this.state.percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.downloadTxtFile}> Download</button>\r\n                      {this.state.pivot === 1 ?\r\n                        <Link to='/cluster'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                        : null\r\n                      }\r\n                    </div>\r\n                }\r\n                <br />\r\n              </div> : null\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Kmeans;","import React,{Component} from 'react';\r\nimport '../Algorithms.css'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nclass Myforms extends Component {\r\n    state = { \r\n        showForm: false}\r\n\r\n    \r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 30);\r\n        }        \r\n    } \r\n    \r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control title = \"E.g. 10 means that the cache will get checkpointed every 10 iterations.\" type=\"number\" id=\"checkpointIntervalID\" name=\"checkpointInterval\" placeholder=\"checkpointInterval -> \r\n                                Parameter for set checkpoint interval (>= 1) or disable checkpoint (-1).\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"docConcentrationID\" name=\"docConcentration\" placeholder=\"docConcentration: ->\r\n                                        Larger values mean more smoothing (more regularization)\"\r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol ->\r\n                                        Parameter for features column name.\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"kID\" name=\"k\" placeholder=\" k ->\r\n                                        Parameter for  the number of topics (clusters) to infer. \r\n                                        Must be > 1. Default: 10.\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                        Parameter for maximum number of iterations \r\n                                        Must be (>= 0).\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"optimizerID\" name=\"optimizer\" placeholder=\"optimizer ->\r\n                                        Optimizer or inference algorithm used to estimate the LDA model.\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedID\" name=\"seed\" placeholder=\"seed ->\r\n                                        Parameter for random seed.\" />\r\n                    <br />\r\n                    <Form.Control title=\"Default: 0.05, i.e., 5% of total documents\" type=\"number\" id=\"subsamplingRateID\" name=\"subsamplingRate\" placeholder=\"subsamplingRate ->\r\n                                        Fraction of the corpus to be sampled and used in each iteration.\"\r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"topicConcentrationID\" name=\"topicConcentration\" placeholder=\"topicConcentration ->\r\n                                        Parameter for the prior placed on topics' distributions.)\r\n                                                                    (EM>1,Online>=0)\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control title=\"Returns a vector of zeros for an empty document\" type=\"number\" id=\"topicDistributionColID\" name=\"topicDistributionCol\" placeholder=\"topicDistributionCol ->\r\n                                        Estimates the topic mixture distribution for each document\" \r\n                    />\r\n                                                                                                                                                    \r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button id = \"thebuttons\" type=\"submit\" class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    choose your own parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Myforms\r\n","import React, { Component } from 'react'\r\nimport '../Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver';\r\nimport JSZip from 'jszip'\r\nimport Myforms from './form'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from '../../ClusterToolbar'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\n\r\n\r\n\r\nfunction submitForm() {\r\n  let myK = \"val lda = new LDA()\";\r\n  if (document.getElementById(\"checkpointIntervalID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setCheckpointInterval(\" + document.getElementById(\"checkpointIntervalID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"docConcentrationID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setDocConcentration(\" + document.getElementById(\"docConcentrationID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"kID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setK(\" + document.getElementById(\"kID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"optimizerID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setOptimizer(\"${document.getElementById(\"optimizerID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"seedID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"subsamplingRateID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSubsamplingRate(\" + document.getElementById(\"subsamplingRateID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"topicConcentrationID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setTopicConcentration(\" + document.getElementById(\"topicConcentrationID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"topicDistributionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setTopicDistributionCol(\" + document.getElementById(\"topicDistributionColID\").value + \")\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nclass LDA extends Component {\r\n\r\n  makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  state = {\r\n    theshowup: 0,\r\n    pivot: 0,\r\n    theToggle: false,\r\n    percentage: 0,\r\n    showbutton: false,\r\n    libs: [\"import org.apache.spark.ml.clustering.LDA\\nimport org.apache.spark.sql.SparkSession\\nobject\\t\"],\r\n    name: [this.makeid()],\r\n    basic: [\"{\\n def main(args: Array[String]): Unit = { \\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()\\n\\tval dataset = spark.read.format(\\\"libsvm\\\").load(\\\"\"],\r\n    dataset: [\"\\\") \\n\\t\"],\r\n    trainning: [\"val lda = new LDA()\\n\"],\r\n    continue: [\"\\n\\tval model = lda.fit(dataset)\\n\\n\\tval ll = model.logLikelihood(dataset)\\n\\tval lp = model.logPerplexity(dataset)\\n\\tprintln(s\\\"The lower bound on the log likelihood of the entire corpus: $ll\\\")\\n\\tprintln(s\\\"The upper bound on perplexity: $lp\\\")\\n\"],\r\n    topics: [\"\\n\\tval topics = model.describeTopics(\"],\r\n    printTopics: [\")\\n\\tprintln(\\\"The topics described by their top-weighted terms:\\\")\\n\\ttopics.show(false)\\n\"],\r\n    results: [\"\\n\\tval transformed = model.transform(dataset)\\n\\ttransformed.show(false)\\n\\tspark.stop()\\n }\\n}\"],\r\n  }\r\n\r\n  myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    const myToggle = this.state.theToggle;\r\n    this.setState({ theToggle: !myToggle });\r\n    this.setState({ percentage: this.state.percentage + 10 });\r\n  }\r\n\r\n  handleEdit = () => { //this is for default params in  train\r\n    console.log(this.state.showbutton)\r\n    this.setState({\r\n      showbutton: true,\r\n      mycolor: 'beige',\r\n      theshowup: 1,\r\n    });\r\n    if (this.state.percentage <= 39) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  };\r\n\r\n  callbackFunction = (childData) => { //this is for progress bar\r\n    this.setState({\r\n      percentage: childData,\r\n      theshowup: 1\r\n    });\r\n  }\r\n\r\n  mytopic = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n  }\r\n\r\n  downloadTxtFile = () => { //this is the file (downloading zip)\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    //const element = document.createElement(\"a\");\r\n    const file = [\r\n      new Blob([this.state.libs], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset]),\r\n      this.state.showbutton === true ? new Blob([this.state.trainning]) : new Blob([submitForm()]),\r\n      new Blob([this.state.continue]),\r\n      new Blob([this.state.topics]),\r\n      new Blob([document.getElementById('topicID').value], { type: 'text/plain' }),\r\n      new Blob([this.state.printTopics]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    //element.href = URL.createObjectURL(parts);\r\n    //element.download = \"myFile.txt\";\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/LDA.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"LDA.zip\");\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <div className=\"welcome\">\r\n          <h1> Latent Dirichlet Allocation Algorithm</h1>\r\n          <br />\r\n          <Jumbotron className=\"myinput\">\r\n            <Form onSubmit={this.myToggler}>\r\n              <Form.Group controlId=\"myInput\">\r\n                <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n              </Form.Group>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n            </Form>\r\n          </Jumbotron>\r\n          <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={this.state.percentage} onLoaderFinished={() => this.state.percentage} />\r\n\r\n          {/*<ProgressBar value={this.state.percentage} max={100}/>*/}\r\n          {\r\n            this.state.theToggle === true ?\r\n              <div>\r\n                <Jumbotron>\r\n                  <h2> Train your LDA model </h2>\r\n                  <br />\r\n                  <button type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.handleEdit}>\r\n                    default parameters\r\n                  </button>\r\n                  <br />\r\n                  <br />\r\n                  <Myforms percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                </Jumbotron>\r\n                {\r\n                  this.state.theshowup === 1 ?\r\n                    <div>\r\n                      <Jumbotron>\r\n                        <h2> Choose the ideal number of topic </h2>\r\n                        <br />\r\n                        <Form onSubmit={this.mytopic}>\r\n                          <Form.Group controlId=\"topicID\">\r\n                            <Form.Control min = \"0\" name=\"Topic\" type=\"number\" required={true} placeholder=\"Number of topics\" />\r\n                          </Form.Group>\r\n                          <button type=\"submit\" class=\"btn btn-primary\">Validation</button>\r\n                        </Form>\r\n                      </Jumbotron>\r\n                      <div>\r\n                        <button disabled={this.state.percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.downloadTxtFile}>Download</button>\r\n                        {this.state.pivot === 1 ?\r\n                          <Link to='/cluster'><button type=\"submit\" class=\"btn btn-primary\">Return to menu </button></Link> \r\n                          : null\r\n                        }\r\n                      </div>\r\n                    </div> : null\r\n                }\r\n              </div> : null\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default LDA;","import React,{Component} from 'react';\r\nimport '../Algorithms.css'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nclass TheForm extends Component {\r\n    state = { \r\n        showForm: false}\r\n\r\n    \r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 70);\r\n        }        \r\n    } \r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"dstColID\" name=\"dstCol\" placeholder=\"dstCol -> \r\n                                Name of the Form.Control column for destination vertex IDs. Default: dst\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"kID\" name=\" k\" placeholder=\" k: ->\r\n                                The number of clusters to create. Must be > 1. Default: 2.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                Parameter for maximum number of iterations. Must be >= 0.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"srcColID\" name=\"srcCol\" placeholder=\" srcCol ->\r\n                                Parameter for the name of the form column for source vertex IDs. Default: src\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                Parameter for weight column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"initModeID\" name=\"initMode\" placeholder=\"initMode ->\r\n                                Parameter for the initialization algorithm. Possible options random(default) or degree \r\n                                                                        \" />\r\n                    <br />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    choose your own parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TheForm\r\n","import React, { Component } from 'react'\r\nimport '../Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport TheForm from './TheForm'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from '../../ClusterToolbar'\r\nimport { Jumbotron } from 'react-bootstrap'\r\n\r\nfunction submitForm() {\r\n  let myK = \"val model = new PowerIterationClustering()\";\r\n  if (document.getElementById(\"dstColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setDstCol(\"${document.getElementById(\"dstColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"kID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setK(\" + document.getElementById(\"kID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"srcColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setSrcCol(\"${document.getElementById(\"srcColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"initModeID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setInitMode(\"${document.getElementById(\"initModeID\").value}\")`));\r\n  }\r\n  return (myK);\r\n}\r\n\r\n\r\nclass PIC extends Component {\r\n\r\n  makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  state = {\r\n    pivot: 0,\r\n    theToggle: false,\r\n    percentage: 0,\r\n    mycolor: 'darkgoldenrod',\r\n    showbutton: false,\r\n    libs: [\"import org.apache.spark.ml.clustering.PowerIterationClustering\\nimport org.apache.spark.sql.SparkSession\\nobject\\t\"],\r\n    name: [this.makeid()],\r\n    basic: [\"{\\n def main(args: Array[String]): Unit = { \\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()\\n\\tval dataset = spark.createDataFrame(Seq(\\n \"],\r\n    dataset: [\"\\t\\t(0L, 1L, 1.0),\\n\\t\\t(0L, 2L, 1.0), \\n\\t\\t(1L, 2L, 1.0), \\n\\t\\t(3L, 4L, 1.0), \\n\\t\\t(4L, 0L, 0.1)\\n\\t)).toDF(\\\"src\\\", \\\"dst\\\", \\\"weight\\\")) \\n\\t\"],\r\n    trainning: [\"\\n\\tval model = new PowerIterationClustering()\\n\"],\r\n    prediction: [\"\\n\\tval prediction = model.assignClusters(dataset).select(\\\"id\\\", \\\"cluster\\\")\\n\"],\r\n    results: [\"\\n\\tprediction.show(false)\\n\\tspark.stop()\\n }\\n}\"],\r\n  }\r\n\r\n  handleEdit = () => { //this is for default params in kmeans train\r\n    console.log(this.state.showbutton)\r\n    this.setState({\r\n      showbutton: true,\r\n      mycolor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 39) {\r\n      this.setState({ percentage: this.state.percentage + 70 });\r\n    }\r\n  };\r\n\r\n  callbackFunction = (childData) => { //this is for progress bar\r\n    this.setState({ percentage: childData })\r\n  }\r\n\r\n  downloadTxtFile = () => { //this is the file (downloading zip)\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    //const element = document.createElement(\"a\");\r\n    const file = [\r\n      new Blob([this.state.libs], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset], { type: 'text/plain' }),\r\n      this.state.showbutton === true ? new Blob([this.state.trainning]) : new Blob([submitForm()]),\r\n      new Blob([this.state.prediction]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    //element.href = URL.createObjectURL(parts);\r\n    //element.download = \"myFile.txt\";\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/PIC.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"PIC.zip\");\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <div className=\"welcome\">\r\n          <h1> Power Iteration Clustering Algorithm </h1>\r\n          <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={this.state.percentage} onLoaderFinished={() => this.state.percentage} />\r\n          <div>\r\n            <br />\r\n            <Jumbotron>\r\n              <h2> Train your PIC model </h2>\r\n              <br />\r\n              <button class=\"btn btn-primary\" onClick={this.handleEdit}>\r\n                default parameters\r\n              </button>\r\n              <br />\r\n              <br />\r\n              <TheForm percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n            </Jumbotron>\r\n            <br />\r\n            <button disabled={this.state.percentage <= 69}  class=\"btn btn-primary mr-1\" onClick={this.downloadTxtFile}>Download</button>\r\n            {this.state.pivot === 1 ?\r\n              <Link to='/cluster'><button class=\"btn btn-primary\" >Return to menu </button> </Link>\r\n              : null\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default PIC ","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ClassificationToolbar = () => (\r\n    \r\n        <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n            <div className=\"sidebar-heading\">\r\n                <h1>Classification</h1>\r\n            </div>\r\n            <div className=\"list-group list-group-flush\">\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to='/classification/DecisionTree'>Decision tree</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to='/classification/MultilayerPerceptron'>Multilayer perceptron</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to='/classification/LinearSVM'>Linear Support Vector Machine</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to='/classification/NaiveBayes'>Naive Bayes</Link>\r\n            </div>\r\n        </div>\r\n    \r\n)\r\n\r\nexport default ClassificationToolbar","import React from 'react'\r\nimport '../../Cluster/myCluster.css'\r\nimport { Link } from 'react-router-dom';\r\nimport '../../Cluster/Algorithms/Algorithms.css'\r\nimport ClassificationToolbar from './ClassificationToolbar'\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nconst ClassificationPreview = () => (\r\n\r\n    <div className=\"d-flex\">\r\n        <ClassificationToolbar />\r\n        <div class=\"container-fluid\">\r\n            <div>\r\n                <p>\r\n                    This page describes classification\r\n                    algorithms in MLlib.\r\n                    Below show up details about each algorithm\r\n                </p>\r\n                <Jumbotron>\r\n                    <h1>Decision tree</h1>\r\n                    <p> \r\n                        Decision trees and their ensembles are popular methods for the machine learning\r\n                        tasks of classification and regression.<br />\r\n                        Decision trees are widely used since they are easy to interpret,\r\n                        handle categorical features,\r\n                        extend to the multiclass classification setting,\r\n                        do not require feature scaling,\r\n                        and are able to capture non-linearities and feature interactions.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Decision_tree_learning\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to=\"/classification/DecisionTree\"><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                    <h1>Multilayer perceptron</h1>\r\n                    <p> \r\n                        Multilayer perceptron classifier (MLPC) is a classifier based on the feedforward artificial\r\n                        neural network. <br />\r\n                        MLPC consists of multiple layers of nodes.\r\n                        Each layer is fully connected to the next layer in the network.\r\n                        Nodes in the input layer represent the input data.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Feedforward_neural_network\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to=\"/classification/MultilayerPerceptron\"><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>    \r\n                    <h1>Linear Support Vector Machine</h1>\r\n                    <p>\r\n                        A support vector machine constructs a hyperplane or set of hyperplanes\r\n                        in a high- or infinite-dimensional space,\r\n                        which can be used for classification, regression, or other tasks.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Support_vector_machine\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to=\"/classification/LinearSVM\"><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>    \r\n                    <h1>Naive Bayes</h1>\r\n                    <p>\r\n                        Naive Bayes classifiers are a family of simple probabilistic, multiclass classifiers based on applying Bayes’ theorem with strong (naive) independence assumptions between every pair of features.<br/>\r\n                        Naive Bayes can be trained very efficiently. \r\n                        With a single pass over the training data, it computes the conditional probability distribution of each feature given each label. \r\n                        For prediction, it applies Bayes’ theorem to compute the conditional probability distribution of each label given an observation.\r\n                    </p>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                    <Link to=\"/classification/NaiveBayes\"><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n)\r\n\r\nexport default ClassificationPreview;","import React, { Component } from 'react'; \r\nimport '../Algorithms.css'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nclass Myform extends Component {\r\n    state = { \r\n        showForm: false}\r\n\r\n    \r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 50);\r\n        }        \r\n    } \r\n    \r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <form className=\"theForm\">\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"kname\" name=\"K\" placeholder=\"Κ -> \r\n                                Number of independent Gaussians in the mixture model. Must be greater than 1. Default: 2.\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxname\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                Parameter for maximum number of iterations. \r\n                                Must be >= 0 ,default: 20\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedname\" name=\"seed\" placeholder=\"seed ->\r\n                                Parameter for random seed \"\r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"tolname\" name=\"tol\" placeholder=\"tol ->\r\n                                Parameter for the convergence tolerance \r\n                                for iterative algorithms. \r\n                                Must be >= 0\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColname\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                Parameter for prediction column name\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColname\" name=\"featuresCol\" placeholder=\"featuresCol ->\r\n                                Parameter for features column name.\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"probabilityColID\" name=\"probabilityCol\" placeholder=\"probabilityCol ->\r\n                                Parameter for Column name for predicted class conditional probabilities.\"\r\n                    />   \r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColname\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                Parameter for weight column name\" \r\n                    />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"aggregationDepthID\" name=\"aggregationDepth\" placeholder=\"aggregationDepth ->\r\n                                Parameter for suggested depth for treeAggregate. Must be >= 2.\" \r\n                    />                                                   \r\n                    <br />\r\n                                                                                                                                                                    \r\n                </form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    choose your parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Myform\r\n\r\n","import React, { Component } from 'react'\r\nimport '../Algorithms.css'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport Myform from './Myform'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from '../../ClusterToolbar'\r\nimport { Jumbotron,Form } from 'react-bootstrap'\r\n\r\nfunction submitForm() {\r\n  let myK = \"val gmm = new GaussianMixture()\";\r\n  if (document.getElementById(\"kname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setK(\" + document.getElementById(\"kname\").value + \")\"));\r\n    //this.setState({pivot: this.state.pivot + 1});\r\n  }\r\n  if (document.getElementById(\"maxname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColname\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"predictionColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setPredictionCol(\\\"\" + document.getElementById(\"predictionColname\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"seedname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedname\").value + \"L)\"));\r\n  }\r\n  if (document.getElementById(\"tolname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setTol(\" + document.getElementById(\"tolname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"aggregationDepthID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setAggregationDepth(\" + document.getElementById(\"aggregationDepthID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setWeightCol(\\\"\" + document.getElementById(\"weightColname\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setProbabilityCol(\\\"\" + document.getElementById(\"probabilityColID\").value + \"\\\")\"));\r\n  }\r\n\r\n  return (myK);\r\n\r\n}\r\n\r\nclass GMM extends Component {\r\n\r\n  makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  state = {\r\n    pivot: 0,\r\n    theToggle: false,\r\n    percentage: 0,\r\n    mycolor: 'darkgoldenrod',\r\n    showbutton: false,\r\n    libs: [\"import org.apache.spark.ml.clustering.GaussianMixture\\nimport org.apache.spark.sql.SparkSession\\nobject\\t\"],\r\n    name: [this.makeid()],\r\n    basic: [\"{\\n def main(args: Array[String]): Unit = { \\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()\\n\\tval dataset = spark.read.format(\\\"libsvm\\\").load(\\\"\"],\r\n    dataset: [\"\\\") \\n\\t\"],\r\n    trainning: [\"\\n\\tval gmm = new GaussianMixture()\\n\"],\r\n    theFor: [\"\\n\\tfor (i <- 0 until model.getK) {\"],\r\n    fitmodel: [\"\\n\\tval model = gmm.fit(dataset)\\n\"],\r\n    mix: [\"\\n\\t\\tprintln(s\\\"Gaussian $i:\\\\nweight=${model.weights(i)}\\\\n\\\" +\\n\\t\\t\\ts\\\"mu=${model.gaussians(i).mean}\\\\nsigma=\\\\n${model.gaussians(i).cov}\\\\n\\\")\"],\r\n    results: [\"\\n\\t}\\n\\tspark.stop()\\n }\\n}\"],\r\n  }\r\n\r\n  myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    const myToggle = this.state.theToggle;\r\n    this.setState({ theToggle: !myToggle });\r\n    this.setState({ percentage: this.state.percentage + 20 });\r\n  }\r\n\r\n  handleEdit = () => { //this is for default params in kmeans train\r\n    console.log(this.state.showbutton)\r\n    this.setState({\r\n      showbutton: true,\r\n      mycolor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 39) {\r\n      this.setState({ percentage: this.state.percentage + 50 });\r\n    }\r\n  };\r\n\r\n  callbackFunction = (childData) => { //this is for progress bar\r\n    this.setState({ percentage: childData })\r\n  }\r\n\r\n  downloadTxtFile = () => { //this is the file (downloading zip)\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    //const element = document.createElement(\"a\");\r\n    const file = [\r\n      new Blob([this.state.libs], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset], { type: 'text/plain' }),\r\n      this.state.showbutton === true ? new Blob([this.state.trainning]) : new Blob([submitForm()]),\r\n      new Blob([this.state.fitmodel]),\r\n      new Blob([this.state.theFor]),\r\n      new Blob([this.state.mix]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/GMM.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"GMM.zip\");\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <br />\r\n        <div className=\"welcome\">\r\n          <h1> Gaussian Mixture Model Algorithm </h1>\r\n          <br />\r\n          <Jumbotron className=\"myinput\">\r\n            <Form onSubmit={this.myToggler}>\r\n              <Form.Group controlId=\"myInput\">\r\n                <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n              </Form.Group>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n            </Form>\r\n          </Jumbotron>\r\n          <br />\r\n          <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={this.state.percentage} onLoaderFinished={() => this.state.percentage} />\r\n          {\r\n            this.state.theToggle === true ?\r\n              <div>\r\n                <Jumbotron>\r\n                    <h2> Train your GMM model with </h2>\r\n                    <br />\r\n                    <button class=\"btn btn-primary\" onClick={this.handleEdit}>\r\n                      default parameters\r\n                    </button>\r\n                    <br />\r\n                    <br />\r\n                    <Myform percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                </Jumbotron>\r\n                <br />\r\n                <div>\r\n                  <button disabled={this.state.percentage <= 69} class=\"btn btn-primary mr-1\" onClick={this.downloadTxtFile}>Download</button>\r\n                  {this.state.pivot === 1 ?\r\n                    <Link to='/cluster'><button class=\"btn btn-primary\"> Return to menu  </button></Link>\r\n                    : null\r\n                  }\r\n                </div>\r\n              </div> : null\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GMM ","import React, { Component } from 'react'; \r\nimport '../Algorithms.css'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nclass Myform extends Component {\r\n    state = { \r\n        showForm: false}\r\n\r\n    \r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 30);\r\n        }        \r\n    } \r\n    \r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"kname\" name=\"K\" placeholder=\"Κ -> \r\n                                The number of clusters to create (k).\r\n                                                                        Must be > 1. (default: 2)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxname\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                Parameter for maximum number of iterations. \r\n                                Must be >= 0 (default: 20)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedname\" name=\"seed\" placeholder=\"seed ->\r\n                                Parameter for random seed \r\n                                (default: -1689246527)\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColname\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColname\" name=\"featuresCol\" placeholder=\"featuresCol ->\r\n                                Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"distanceMeasurename\" name=\"distanceMeasure\" >\r\n                            <option value=\"\" disabled selected>distanceMeasure (Parameter for The distance measure.)</option>\r\n                            <option value=\"euclidean\">euclidean</option>\r\n                            <option value=\"cosine\">cosine</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minDivisibleClusterSizeID\" name=\"minDivisibleClusterSize\" placeholder=\"minDivisibleClusterSize ->\r\n                                The minimum number of points (Default: 1.0)\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColname\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                Parameter for weight column name\" \r\n                    />                                                                                                                           \r\n                </Form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    choose your parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Myform","import React, { Component } from 'react'\r\nimport '../Algorithms.css'\r\nimport Myform from './Myform'\r\nimport EvalForm from '../Kmeans/EvaluationForm'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver';\r\nimport JSZip from 'jszip'\r\nimport { Link } from 'react-router-dom';\r\nimport ClusterToolbar from '../../ClusterToolbar'\r\nimport { Jumbotron,Form } from 'react-bootstrap'\r\n\r\n\r\nfunction submitForm() {\r\n  let myK = \"val bkm = new BisectingKMeans()\";\r\n  if (document.getElementById(\"kname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setK(\" + document.getElementById(\"kname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"maxname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxname\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColname\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"predictionColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setPredictionCol(\\\"\" + document.getElementById(\"predictionColname\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"seedname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedname\").value + \"L)\"));\r\n  }\r\n  if (document.getElementById(\"minDivisibleClusterSizeID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMinDivisibleClusterSize(\" + document.getElementById(\"minDivisibleClusterSizeID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"distanceMeasurename\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setDistanceMeasure(\\\"\" + document.getElementById(\"distanceMeasurename\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"weightColname\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setWeightCol(\\\"\" + document.getElementById(\"weightColname\").value + \"\\\")\"));\r\n  }\r\n\r\n  return (myK);\r\n\r\n}\r\n\r\nfunction myevalForm() {\r\n  let myeval = \"\\tval evaluator = new ClusteringEvaluator()\";\r\n\r\n  if (document.getElementById(\"predictionColName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setPredictionCol(\\\"\" + document.getElementById(\"predictionColName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"mymetricName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setMetricName(\\\"\" + document.getElementById(\"mymetricName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"distanceMeasureName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", \"setDistanceMeasure(\\\"\" + document.getElementById(\"distanceMeasureName\").value + \"\\\")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColName\").value !== \"\") {\r\n    myeval = (myeval.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColName\").value}\")`));\r\n  }\r\n\r\n  return (myeval);\r\n}\r\n\r\n\r\nclass BisectingKmeans extends Component {\r\n\r\n  makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  state = {\r\n    pressed: 0,\r\n    theToggle: false,\r\n    pivot: 0,\r\n    percentage: 0,\r\n    evalColor: 'darkgoldenrod',\r\n    mycolor: 'darkgoldenrod',\r\n    skipcolor: 'darkgoldenrod',\r\n    showbutton: false,\r\n    showButtonIndex: false,\r\n    skipbutton: false,\r\n    changeLibs: [\"import org.apache.spark.ml.clustering.BisectingKMeans\\n\"],\r\n    libs: [\"import org.apache.spark.ml.evaluation.ClusteringEvaluator\\n\"],\r\n    standars: [\"import org.apache.spark.sql.SparkSession\\nobject\\t\"],\r\n    name: [this.makeid()],\r\n    basic: [\"{\\n def main(args: Array[String]): Unit = { \\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()\\n\\tval dataset = spark.read.format(\\\"libsvm\\\").load(\\\"\"],\r\n    dataset: [\"\\\") \\n\\t\"],\r\n    constructor: [\"\\n\\tval bkm = new BisectingKMeans()\\n\"],\r\n    predictions: [\"\\t\\nval model = bkm.fit(dataset)\\n\\n\\tval predictions = model.transform(dataset)\\n\"],\r\n    evaluator: [\"\\n\\tval evaluator = new ClusteringEvaluator()\\n\"],\r\n    cost: [\"\\n\\tval cost = model.computeCost(dataset)\\n\\tprintln(s\\\"Within Set Sum of Squared Errors = $cost\\\")\\n\"],\r\n    silhouette: [\"\\n\\tval silhouette = evaluator.evaluate(predictions)\\n\\tprintln(s\\\"Silhouette with squared euclidean distance = $silhouette\\\")\\n\"],\r\n    results: [\"\\n\\tprintln(\\\"Cluster Centers: \\\")\\n\\tval centers = model.clusterCenters\\n\\tcenters.foreach(println)\\n\\n\\tspark.stop()\\n }\\n}\"]\r\n  }\r\n\r\n\r\n  handleEdit = () => { //this is for default params in LDA train\r\n    console.log(this.state.showbutton)\r\n    this.setState({\r\n      showbutton: true,\r\n      mycolor: 'beige',\r\n    });\r\n    this.setState({ pressed: this.state.pressed + 1 });\r\n    if (this.state.percentage <= 39) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  };\r\n\r\n  evalEdit = () => { //this is for evaluation with default params\r\n    this.setState({\r\n      showButtonIndex: !this.state.showButtonIndex,\r\n      evalColor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 69) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  };\r\n\r\n  callbackFunction = (childData) => { //this is for progress bar\r\n    this.setState({ percentage: childData })\r\n    this.setState({ pressed: this.state.pressed + 1 })\r\n  }\r\n\r\n  myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    const myToggle = this.state.theToggle;\r\n    this.setState({ theToggle: !myToggle });\r\n    this.setState({ percentage: this.state.percentage + 10 });\r\n\r\n  }\r\n\r\n  skipEval = () => { //this is for skipping evalutation\r\n    this.setState({\r\n      skipbutton: true,\r\n      skipcolor: 'beige',\r\n    });\r\n    if (this.state.percentage <= 69) {\r\n      this.setState({ percentage: this.state.percentage + 30 });\r\n    }\r\n  }\r\n\r\n  notDefaultFile = () => {  //this is the file after skipping evalutation\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    const file = [\r\n      new Blob([this.state.changeLibs], { type: 'text/plain' }),\r\n      new Blob([this.state.standars], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset]),\r\n      this.state.showbutton === true ? new Blob([this.state.constructor]) : new Blob([submitForm]),\r\n      new Blob([this.state.predictions]),\r\n      new Blob([this.state.cost]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/Bisecting-Kmeans.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"Bkmeans.zip\");\r\n    });\r\n  }\r\n\r\n  downloadTxtFile = () => { //this is the file after evalutation\r\n    this.setState({ percentage: this.state.percentage + 30 });\r\n    this.setState({ pivot: this.state.pivot + 1 });\r\n    const file = [\r\n      new Blob([this.state.changeLibs], { type: 'text/plain' }),\r\n      new Blob([this.state.libs], { type: 'text/plain' }),\r\n      new Blob([this.state.standars], { type: 'text/plain' }),\r\n      new Blob([this.state.name], { type: 'text/plain' }),\r\n      new Blob([this.state.basic], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([this.state.dataset]),\r\n      this.state.showbutton === true ? new Blob([this.state.constructor]) : new Blob([submitForm()]),\r\n      new Blob([this.state.predictions]),\r\n      this.state.showButtonIndex === true ? new Blob([this.state.evaluator]) : new Blob([myevalForm()]),\r\n      new Blob([this.state.silhouette]),\r\n      new Blob([this.state.results]),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/Bisecting-Kmeans.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"Bkmeans.zip\");\r\n    });\r\n  }\r\n  //className=\"myinput\" \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <ClusterToolbar />\r\n        <div className=\"welcome\">\r\n          <h1> Bisecting K-Means Algorithm </h1>\r\n          <br />\r\n          <Jumbotron className=\"myinput\">\r\n            <Form onSubmit={this.myToggler}>\r\n              <Form.Group controlId=\"myInput\">\r\n                <Form.Control onfocus=\"\" required={true} placeholder=\"Please enter your dataset first\" />\r\n              </Form.Group>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n            </Form>\r\n          </Jumbotron>\r\n          <br />\r\n          <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={this.state.percentage} onLoaderFinished={() => this.state.percentage} />\r\n          {\r\n            this.state.theToggle === true ?\r\n              <div>\r\n                <Jumbotron>\r\n                  <h2> Train your Bisecting K-means model with </h2>\r\n                  <br />\r\n                  <button class=\"btn btn-primary\" onClick={this.handleEdit}>\r\n                    default parameters\r\n                  </button>\r\n                  <br />\r\n                  <br />\r\n                  <Myform percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                </Jumbotron>\r\n                <br />\r\n                {\r\n                  this.state.pressed >= 1 ?\r\n                    <Jumbotron>\r\n                      <h2> Evaluate your Bisecting K-means model </h2>\r\n                      <br />\r\n                      <button type=\"submit\" class=\"btn btn-primary mr-1\" onClick={this.evalEdit}>\r\n                        Default Parameters\r\n                      </button>\r\n                      <button type=\"submit\" class=\"btn btn-primary\" onClick={this.skipEval}>\r\n                        Skip Evaluation\r\n                      </button>\r\n                      <br />\r\n                      <br />\r\n                      <EvalForm percentage={this.state.percentage} parentCallback={this.callbackFunction} />\r\n                  </Jumbotron>\r\n                  : null\r\n                }\r\n                <br />\r\n                {\r\n                  this.state.skipbutton === true ?\r\n                    <div>\r\n                      <button class=\"btn btn-primary mr-1\" onClick={this.notDefaultFile}>Download</button>\r\n                      {this.state.pivot === 1 ?\r\n                        <Link to='/cluster'><button class=\"btn btn-primary\"> Return to menu  </button></Link>\r\n                        : null\r\n                      }\r\n                    </div> :\r\n                    <div>\r\n                      <button class=\"btn btn-primary mr-1\" disabled={this.state.percentage <= 69} onClick={this.downloadTxtFile}>Download</button>\r\n                      {this.state.pivot === 1 ?\r\n                        <Link to='/cluster'><button class=\"btn btn-primary\"> Return to menu  </button></Link>\r\n                        : null\r\n                      }\r\n                    </div>\r\n                }\r\n                <br />\r\n              </div> : null\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default BisectingKmeans;\r\n","import React, { Component } from 'react'; \r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\nclass MyForm extends Component {\r\n        state = { \r\n            showForm: false}\r\n    \r\n        myfun = () => { //this is for progress bar\r\n            if (this.props.percentage <= 39) {\r\n                this.props.parentCallback(this.props.percentage + 10);\r\n            }        \r\n        }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                    Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"fitInterceptID\" name=\"fitIntercept\" placeholder=\"fitIntercept ->\r\n                                    Parameter for whether to fit an intercept term (True or False).\" />\r\n                    <br />\r\n                    <Form.Control   type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                    Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                    Parameter for maximum number of iterations (>= 0).\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                    Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"rawPredictionColID\" name=\"rawPredictionCol\" placeholder=\"rawPredictionCol ->\r\n                                    Parameter for raw prediction (a.k.a. confidence) column name.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"regParamID\" name=\"regParam\" placeholder=\"regParam ->\r\n                                    Parameter for regularization parameter (>= 0)\" />   \r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"standardizationID\" name=\"standardization\" placeholder=\"standardization ->\r\n                                    Parameter for whether to standardize the training features before fitting the model\" />   \r\n                    <br />\r\n                    <Form.Control  title = \"For LinearSVC, this threshold is applied to the rawPrediction, rather than a probability. This threshold can be any real number\" type=\"number\" id=\"thresholdID\" name=\"threshold\" placeholder=\"threshold ->\r\n                                    Parameter for threshold in binary classification prediction. Default: 0.0\" /> \r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"tolID\" name=\"tol\" placeholder=\"tol ->\r\n                                    Parameter for the convergence tolerance for iterative algorithms (>= 0).\" /> \r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                    Parameter for weight column name (not set or empty is 1.0)\" />   \r\n                                                                                                                                                                \r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    Choose your own parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default MyForm","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport { Link } from 'react-router-dom';\r\nimport MyForm from './MyForm'\r\n//import MyModal from './MyModal'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport ClassificationToolbar from '../ClassificationToolbar'\r\n\r\n\r\nconst submitForm = () => {\r\n  let myK = \"\\\")\\n\\n\\tval lsvc = new LinearSVC()\";\r\n  if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setFeaturesCol(\" + document.getElementById(\"featuresColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"fitInterceptID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setFitIntercept(\" + document.getElementById(\"fitInterceptID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setPredictionCol(\" + document.getElementById(\"predictionColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"rawPredictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setRawPredictionCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"regParamID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setRegParam(\" + document.getElementById(\"regParamID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"standardizationID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setStandardization(\" + document.getElementById(\"standardizationID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"thresholdID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setThreshold(\" + document.getElementById(\"thresholdID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"tolID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setTol(\" + document.getElementById(\"tolID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setWeightCol(\" + document.getElementById(\"weightColID\").value + \")\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nfunction LinearSVM() {\r\n\r\n  const makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  const [pivot, setPivot] = useState(0);\r\n  const [showbutton, setShowbutton] = useState(false);\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [mycolor, setMycolor] = useState('darkgoldenrod');\r\n  const [toggle, setToggle] = useState(false);\r\n  const [libs] = useState('import org.apache.spark.ml.classification.LinearSVC\\nimport org.apache.spark.sql.SparkSession\\n\\nobject ');\r\n  const [name] = useState(makeid());\r\n  const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(\"LinearSVCExample\")\\n\\t\\t.getOrCreate()');\r\n  const [dataset] = useState('\\n\\tval training = spark.read.format(\"libsvm\").load(\"');\r\n  const [training] = useState('\")\\n\\n\\tval lsvc = new LinearSVC()');\r\n  const [fitting] = useState('\\n\\n\\tval lsvcModel = lsvc.fit(training)');\r\n  const [stopper] = useState('\\n\\n\\tprintln(s\"Coefficients: ${lsvcModel.coefficients} Intercept: ${lsvcModel.intercept}\")\\n\\n\\tspark.stop()\\n }\\n}')\r\n\r\n\r\n  const myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    setToggle(true);\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n  }\r\n\r\n  const handleEdit = () => { //this is for default params in train\r\n    setShowbutton(true);\r\n    setMycolor('beige');\r\n    if (percentage <= 19) {\r\n      setPercentage(currPercentage => currPercentage + 50);\r\n    }\r\n  };\r\n\r\n  const callbackFunction = () => { //this is for progress bar\r\n    setPercentage(currPercentage => currPercentage + 50);\r\n  }\r\n\r\n  const downloadTxtFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      showbutton === true ? new Blob([training]) : new Blob([submitForm()]),\r\n      new Blob([fitting], { type: 'text/plain' }),\r\n      new Blob([stopper], { type: 'text/plain' }),\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/LinearSVM.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"LinearSVM.zip\");\r\n    });\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"d-flex\">\r\n      <ClassificationToolbar />\r\n      <div className=\"welcome\">\r\n        <h1> Linear Support Vector Machine Algorithm </h1>\r\n        <br />\r\n        <Jumbotron className=\"myinput\">\r\n          <Form onSubmit={myToggler}>\r\n            <Form.Group controlId=\"myInput\">\r\n              <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n            </Form.Group>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n          </Form>\r\n        </Jumbotron>\r\n        <br />\r\n        <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n        {\r\n          toggle === true ?\r\n            <div>\r\n              <Jumbotron>\r\n                  <h2> Train your model with </h2>\r\n                  <br />\r\n                  <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                      Default parameters\r\n                  </button>\r\n                  <br />\r\n                  <br />\r\n                  <MyForm percentage={percentage} parentCallback={callbackFunction} />\r\n              </Jumbotron>\r\n              <div>\r\n                <button class=\"btn btn-primary mr-1\" disabled={percentage <= 19} onClick={downloadTxtFile}>Download</button>\r\n                {pivot === 1 ?\r\n                  <Link to='/classification'><button class=\"btn btn-primary\" >Return to menu </button></Link> \r\n                  : null\r\n                }\r\n              </div>\r\n            </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default LinearSVM ","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RegressionToolbar = () => (\r\n    \r\n        <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n            <div className=\"sidebar-heading\">\r\n                <h1>Regression</h1>\r\n            </div>\r\n            <div className=\"list-group list-group-flush\">\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to='/regression/LinearRegression'>Linear regression</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to = '/regression/RandomForestRegression'>Random forest regression</Link>\r\n                <Link className=\"list-group-item list-group-item-action bg-light\" to = '/regression/GradientBoostedTreeRegressor'>Gradient-boosted tree regression</Link>\r\n            </div>\r\n            <br/>\r\n        </div>\r\n    \r\n)\r\n\r\nexport default RegressionToolbar","import React from 'react'\r\nimport '../../Cluster/myCluster.css'\r\nimport { Link } from 'react-router-dom';\r\nimport RegressionToolbar from './RegressionToolbar'\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nconst RegressionPreview = () => (\r\n\r\n    <div className=\"d-flex\">\r\n        <RegressionToolbar />\r\n        <div class=\"container-fluid\">\r\n            <div>\r\n                <p>\r\n                    This page describes regression\r\n                    algorithms in MLlib.\r\n                    Below show up details about each algorithm\r\n                </p>\r\n\r\n                <Jumbotron>\r\n                <h1>Linear Regression</h1>\r\n                <p>\r\n                    In statistics, linear regression is a linear approach to modeling the relationship\r\n                    between a scalar response (or dependent variable)\r\n                    and one or more explanatory variables (or independent variables).\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Linear_regression\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                <Link to='/regression/LinearRegression'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                <h1>Random Forest Regression</h1>\r\n                <p>\r\n                    Random forests combine many decision trees in order to reduce the risk of overfitting\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Random_forest\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                <Link to='/regression/RandomForestRegression'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n\r\n                <Jumbotron>\r\n                <h1>Gradient-Boosted Tree Regression</h1>\r\n                <p>\r\n                    Gradient-Boosted Trees (GBTs) are ensembles of decision trees.\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Gradient_boosting\" target=\"_blank\" rel=\"noopener noreferrer\"><button type=\"button\" class=\"btn btn-secondary mr-1\">Info</button></a>\r\n                <Link to='/regression/GradientBoostedTreeRegressor'><button type=\"button\" class=\"btn btn-primary\">Run algorithm</button></Link>\r\n                </Jumbotron>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default RegressionPreview;","import React, { Component } from 'react';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nclass Splitter extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n            //this.props.parentCallback(this.props.showbutton)\r\n        }\r\n    }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"weightsID\" name=\"weights\" placeholder=\"weights -> \r\n                                    Parameter declare the weights for splits.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedID\" name=\"seed\" placeholder=\"seed ->\r\n                                    Parameter for sampling\" />\r\n                    <br />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Click for parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Splitter","import React, { Component } from 'react';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass TheForm extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                        Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"modelTypeID\" name=\"modelType\" >\r\n                        <option value=\"\" disabled selected>modelType</option>\r\n                        <option value=\"multinomial\">multinomial</option>\r\n                        <option value=\"complement\">complement</option>\r\n                        <option value=\"bernoulli\">bernoulli</option>\r\n                        <option value=\"gaussian\">gaussian</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                        Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"probabilityColID\" name=\"probabilityCol\" placeholder=\"probabilityCol ->\r\n                                        Parameter for column name predicted class conditional probabilities \"/>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                        Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"rawPredictionColID\" name=\"rawPredictionCol\" placeholder=\"rawPredictionCol ->\r\n                                        Parameter for raw prediction (a.k.a. confidence) column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"smoothingID\" name=\"smoothing\" placeholder=\"smoothing ->\r\n                                        Parameter for smoothing, default = 1.0\" />\r\n                    <br />\r\n                    <Form.Control title=\"For LinearSVC, this threshold is applied to the rawPrediction, rather than a probability. This threshold can be any real number\" type=\"number\" id=\"thresholdID\" name=\"threshold\" placeholder=\"threshold ->\r\n                                        Parameter for threshold in binary classification prediction. Default: 0.0\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                        Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TheForm\r\n","import React, { Component } from 'react';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass Myeval extends Component {\r\n    state = {\r\n        showForm: false,\r\n        mycolor: 'darkgoldenrod',\r\n    }\r\n\r\n    myfun = () => {\r\n        if (this.props.percentage <= 69) {\r\n            this.props.parentCallback(this.props.percentage + 40);\r\n        }\r\n    }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"text\" id=\"betaID\" name=\"beta\" placeholder=\"beta -> \r\n                                                                                Parameter which controls precision vs recall weighting.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"metricNameID\" name=\"metricName\" >\r\n                        <option value=\"\" disabled selected>metricName</option>\r\n                        <option value=\"f1\">f1</option>\r\n                        <option value=\"accuracy\">accuracy</option>\r\n                        <option value=\"weightedPrecision\">weightedPrecision</option>\r\n                        <option value=\"weightedRecall\">weightedRecall</option>\r\n                        <option value=\"weightedTruePositiveRate\">weightedTruePositiveRate</option>\r\n                        <option value=\"weightedFalsePositiveRate\">weightedFalsePositiveRate</option>\r\n                        <option value=\"weightedFMeasure\">weightedFMeasure</option>\r\n                        <option value=\"truePositiveRateByLabel\">truePositiveRateByLabel</option>\r\n                        <option value=\"falsePositiveRateByLabel\">falsePositiveRateByLabel</option>\r\n                        <option value=\"precisionByLabel\">precisionByLabel</option>\r\n                        <option value=\"recallByLabel\">recallByLabel</option>\r\n                        <option value=\"fMeasureByLabel\">fMeasureByLabel</option>\r\n                        <option value=\"logLoss\">logLoss</option>\r\n                        <option value=\"hammingLoss\">hammingLoss</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                            Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"number\" id=\"probabilityColID\" name=\"probabilityCol\" placeholder=\"probabilityCol ->\r\n                                                                            Parameter for column name predicted class conditional probabilities \"/>\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                            Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"number\" id=\"epsID\" name=\"eps\" placeholder=\"eps ->\r\n                                                                            Parameter for eps.\" />\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"number\" id=\"metricLabelID\" name=\"metricLabel\" placeholder=\"metricLabel ->\r\n                                                                            Must be greater than or equal to 0\" />\r\n                    <br />\r\n                    <Form.Control className=\"trainForms\" type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                            Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    choose your own parameters\r\n                    </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Myeval","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport { Link } from 'react-router-dom';\r\nimport Splitter from './Splitter'\r\nimport TheForm from './TheForm'\r\nimport Myeval from './Myeval'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport ClassificationToolbar from '../ClassificationToolbar'\r\n\r\nconst mysplit = () => {\r\n  let myK = \")\";\r\n  if (document.getElementById(\"weightsID\").value !== \"\") {\r\n    myK = (myK.concat(\",\", \"weights = \" + document.getElementById(\"weightsID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"seedID\").value !== \"\") {\r\n    myK = (myK.concat(\",\", \"seed = \" + document.getElementById(\"seedID\").value + \"L)\\n\\n\\t\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nconst submitForm = () => {\r\n  let myK = \"\\n\\n\\tval model = new NaiveBayes().fit(trainingData)\";\r\n  if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setFeaturesCol(\" + document.getElementById(\"featuresColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"modelTypeID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setModelType(\"${document.getElementById(\"modelTypeID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setProbabilityCol(\" + document.getElementById(\"probabilityColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setPredictionCol(\" + document.getElementById(\"predictionColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"rawPredictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setRawPredictionCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"smoothingID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setRegParam(\" + document.getElementById(\"smoothingID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"thresholdID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setThreshold(\" + document.getElementById(\"thresholdID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setWeightCol(\" + document.getElementById(\"weightColID\").value + \")\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nconst evalForm = () => {\r\n  let myK = \"\\n\\n\\tval evaluator = new MulticlassClassificationEvaluator()\";\r\n  if (document.getElementById(\"betaID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setBeta(\"${document.getElementById(\"betaID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"metricNameID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setMetricName(\"${document.getElementById(\"metricNameID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setProbabilityCol(\" + document.getElementById(\"probabilityColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value} \")`));\r\n  }\r\n  if (document.getElementById(\"epsID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setEps(\"+ document.getElementById(\"epsID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"metricLabelID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMetricName(\" + document.getElementById(\"metricLabelID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nfunction NaiveBayes() {\r\n\r\n  const makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  const [skipB, setskipB] = useState(false);\r\n  const [nextStep, setNextStep] = useState(0);\r\n  const [showButtonIndex, setshowButtonIndex] = useState(false);\r\n  const [mycolor, setMycolor] = useState(false);\r\n  const [evalColor, setevalColor] = useState('darkgoldenrod');\r\n  const [toggle, setToggle] = useState(false);\r\n  const [showbutton, setShowbutton] = useState(false);\r\n  const [showModel, setShowModel] = useState(false);\r\n  const [pivot, setPivot] = useState(0);\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [libs] = useState('import org.apache.spark.ml.classification.NaiveBayes\\nimport org.apache.spark.sql.SparkSession\\n ');\r\n  const [changer] = useState('\\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator');\r\n  const [first] = useState('\\n\\nobject ');\r\n  const [name] = useState(makeid());\r\n  const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(\"LinearSVCExample\")\\n\\t\\t.getOrCreate()');\r\n  const [dataset] = useState('\\n\\tval data = spark.read.format(\"libsvm\").load(\"');\r\n  const [splits] = useState('\")\\n\\n\\tval Array(trainingData, testData) = data.randomSplit(Array(');\r\n  const [comma] = useState(',');\r\n  const [con] = useState('))\\n\\n\\t');\r\n  const [model] = useState('val model = new NaiveBayes().fit(trainingData)');\r\n  const [predict] = useState('\\n\\n\\tval predictions = model.transform(testData)\\n\\tpredictions.show()');\r\n  const [evaluator] = useState('\\n\\n\\tval evaluator = new MulticlassClassificationEvaluator()');\r\n  const [ending] = useState('\\n\\tval accuracy = evaluator.evaluate(predictions)\\n\\tprintln(s\"Test set accuracy = $accuracy\")\\n\\n\\tspark.stop()\\n }\\n}')\r\n  const [theend] = useState('\\n\\n\\tspark.stop()\\n }\\n}');\r\n\r\n\r\n  const myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    setToggle(true);\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n  }\r\n\r\n  const mytopic = (e) => {\r\n    e.preventDefault();\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n    setNextStep(nextStep => nextStep + 1);\r\n  }\r\n\r\n  const handleEdit = () => { //this is for default params in train\r\n    setShowModel(true);\r\n    setMycolor(true);\r\n    if (percentage <= 39) {\r\n      setPercentage(currPercentage => currPercentage + 30);\r\n    }\r\n  };\r\n\r\n  const callbackFunction = () => { //this is for progress bar\r\n    setPercentage(currPercentage => currPercentage + 30);\r\n    setMycolor(true);\r\n    //setPercentage(newValue);\r\n    //setPivot(currPivot => currPivot + 1);\r\n  }\r\n\r\n  const evalEdit = () => { //this is for evaluation with default params\r\n    setshowButtonIndex(true);\r\n    setevalColor('beige');\r\n    if (percentage <= 69) {\r\n      setPercentage(currPercentage => currPercentage + 40);\r\n    }\r\n  };\r\n\r\n  const theReturnFunction = () => {\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n    setShowbutton(true);\r\n  }\r\n\r\n  const skipEval = () => { //this is for skipping evalutation\r\n    setskipB(true);\r\n    if (percentage <= 69) {\r\n        setPercentage(currPercentage => currPercentage + 20);\r\n    }\r\n  }\r\n\r\n  const notDefaultFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([first], {type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([splits], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n      showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n      showModel === true ? new Blob([model]) : new Blob([submitForm()]),\r\n      new Blob([predict], { type: 'text/plain' }),\r\n      new Blob([theend], { type: 'text/plain' }),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/NaiveBayes.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"NaiveBayes.zip\");\r\n    });\r\n  }\r\n\r\n\r\n\r\n  const downloadTxtFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([changer], {type: 'text/plain' }),\r\n      new Blob([first], {type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([splits], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n      showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n      showModel === true ? new Blob([model]) : new Blob([submitForm()]),\r\n      new Blob([predict], { type: 'text/plain' }),\r\n      showButtonIndex === true ? new Blob([evaluator]) : new Blob([evalForm()]),\r\n      new Blob([ending], { type: 'text/plain' }),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/NaiveBayes.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"NaiveBayes.zip\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <ClassificationToolbar />\r\n      <div className=\"welcome\">\r\n        <h1> Naive Bayes Algorithm </h1>\r\n        <br />\r\n        <Jumbotron className=\"myinput\">\r\n          <Form onSubmit={myToggler}>\r\n            <Form.Group controlId=\"myInput\">\r\n              <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n            </Form.Group>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n          </Form>\r\n        </Jumbotron>\r\n        <br />\r\n        <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n        {\r\n          toggle === true ?\r\n            <div>\r\n              <Jumbotron>\r\n                <h2> Please split your dataset into training and test sets and check the parameters </h2>\r\n                <br />\r\n                <Form onSubmit={mytopic}>\r\n                  <Form.Group controlId=\"trainID\">\r\n                    <Form.Control type=\"number\" required={true} name=\"Train\" max=\"100\" placeholder=\"Write the percentage of train model and we will calculate the percentage of the test model\" />\r\n                  </Form.Group>\r\n                  <button type=\"submit\" class=\"btn btn-primary\"> Validation </button>\r\n                </Form>\r\n                <br />\r\n                <Splitter showbutton={showbutton} percentage={percentage} parentCallback={theReturnFunction} />\r\n              </Jumbotron>\r\n              {\r\n                nextStep >= 1 ?\r\n                  <div>\r\n                    <Jumbotron>\r\n                      <h2> Train your Naive Bayes model with </h2>\r\n                      <br />\r\n                      <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                        default parameters\r\n                        </button>\r\n                      <br />\r\n                      <br />\r\n                      <TheForm percentage={percentage} parentCallback={callbackFunction} />\r\n                    </Jumbotron>\r\n                    {\r\n                    mycolor === true ?\r\n                      <div>\r\n                        <Jumbotron>\r\n                          <h2> Evaluate your Naive Bayes model with </h2>\r\n                          <br />\r\n                          <button class=\"btn btn-primary mr-1\" onClick={evalEdit}>\r\n                            Default parameters\r\n                          </button>\r\n                          <button type=\"submit\" class=\"btn btn-primary\" onClick={skipEval}>\r\n                            Skip Evaluation\r\n                          </button>\r\n                          <br />\r\n                          <br />\r\n                          <Myeval percentage={percentage} parentCallback={callbackFunction} />\r\n                        </Jumbotron>\r\n                      </div>: null\r\n                    }\r\n                    {\r\n                      skipB === true ?\r\n                        <div>\r\n                          <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={notDefaultFile}> Download </button>\r\n                          {pivot === 1 ?\r\n                            <Link to='/classification/AlgorithmsClassification'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                            : null\r\n                          }\r\n                        </div> :\r\n                        <div>\r\n                          <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={downloadTxtFile}> Download</button>\r\n                          {pivot === 1 ?\r\n                            <Link to='/classification'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                            : null\r\n                          }\r\n                        </div>\r\n                    }\r\n                  </div> : null\r\n              }\r\n\r\n            </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NaiveBayes ","import React, { Component } from 'react';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass TheForm extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 30);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"layesID\" name=\"layers\" placeholder=\"layers -> \r\n                                Parameter for form size and output size.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                Parameter for maximum number of iterations (>= 0).\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"probabilityColID\" name=\"probabilityCol\" placeholder=\"probabilityCol ->\r\n                                Parameter for column name predicted class conditional probabilities \"/>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"rawPredictionColID\" name=\"rawPredictionCol\" placeholder=\"rawPredictionCol ->\r\n                                Parameter for raw prediction (a.k.a. confidence) column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"seedID\" name=\"seed\" placeholder=\"seed ->\r\n                                Parameter for random seed.\" />\r\n                    <br />\r\n                    <Form.Control title=\"For LinearSVC, this threshold is applied to the rawPrediction, rather than a probability. This threshold can be any real number\" type=\"number\" id=\"thresholdID\" name=\"threshold\" placeholder=\"threshold ->\r\n                                Parameter for threshold in binary classification prediction. Default: 0.0\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"tolID\" name=\"tol\" placeholder=\"tol ->\r\n                                Parameter for the convergence tolerance for iterative algorithms (>= 0).\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"stepSizeID\" name=\"stepSize\" placeholder=\"stepSize ->\r\n                                Parameter for Step size to be used for each iteration of optimization (> 0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TheForm","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport Splitter from '../NaiveBayes/Splitter'\r\nimport { Link } from 'react-router-dom';\r\nimport MyForm from './MyForm'\r\nimport Myeval from '../NaiveBayes/Myeval'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport ClassificationToolbar from '../ClassificationToolbar'\r\n\r\n\r\nconst mysplit = () => {\r\n  let myK = \")\";\r\n  if (document.getElementById(\"weightsID\").value !== \"\") {\r\n    myK = (myK.concat(\",\", \"weights = \" + document.getElementById(\"weightsID\").value));\r\n  }\r\n  if (document.getElementById(\"seedID\").value !== \"\") {\r\n    myK = (myK.concat(\",\", \"seed = \" + document.getElementById(\"seedID\").value + \"L)\\n\\n\\t\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nconst submitForm = () => {\r\n  let myK = \")\\n\\n\\tval trainer = new MultilayerPerceptronClassifier()\";\r\n  if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"layesID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setLayers(\" + document.getElementById(\"layesID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setProbabilityCol(\"${document.getElementById(\"probabilityColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"rawPredictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setRawPredictionCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"tolID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setTol(\" + document.getElementById(\"tolID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"thresholdID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setThreshold(\" + document.getElementById(\"thresholdID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"seedID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedID\").value + \"L)\"));\r\n  }\r\n  if (document.getElementById(\"stepSizeID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setStepSize(\" + document.getElementById(\"stepSizeID\").value + \")\"));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nconst evalForm = () => {\r\n  let myK = \"\\n\\n\\tval evaluator = new MulticlassClassificationEvaluator()\";\r\n  if (document.getElementById(\"betaID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setBeta(\"${document.getElementById(\"betaID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"metricNameID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setMetricName(\"${document.getElementById(\"metricNameID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \" setProbabilityCol(\" + document.getElementById(\"probabilityColID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value} \")`));\r\n  }\r\n  if (document.getElementById(\"epsID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setEps(\"${document.getElementById(\"epsID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"metricLabelID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMetricName(\" + document.getElementById(\"metricLabelID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value} \")`));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nfunction MultiLayerPerceptron() {\r\n\r\n  const makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  const [skipB, setskipB] = useState(false);\r\n  const [mytry, setMytry] = useState(0);\r\n  const [showbutton, setShowbutton] = useState(false);\r\n  const [nextStep, setNextStep] = useState(0);\r\n  const [showModel, setShowModel] = useState(false);\r\n  const [toggle, setToggle] = useState(false);\r\n  const [pivot, setPivot] = useState(0);\r\n  const [mycolor, setMycolor] = useState('darkgoldenrod');\r\n  const [showButtonIndex, setshowButtonIndex] = useState(false);\r\n  const [evalColor, setevalColor] = useState('darkgoldenrod');\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [libs] = useState('import org.apache.spark.ml.classification.MultilayerPerceptronClassifier\\nimport org.apache.spark.sql.SparkSession');\r\n  const [changer] = useState('\\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator');\r\n  const [first] = useState('\\n\\nobject ');\r\n  const [name] = useState(makeid());\r\n  const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()');\r\n  const [dataset] = useState('\\n\\tval data = spark.read.format(\"libsvm\").load(\"');\r\n  const [splits] = useState('\")\\n\\n\\tval splits = data.randomSplit(Array(');\r\n  const [comma] = useState(',');\r\n  const [con] = useState('))\\n\\n\\t');\r\n  const [variables] = useState('val train = splits(0)\\n\\tval test = splits(1)');\r\n  const [layers] = useState('\\n\\n\\tval layers = Array[Int](');\r\n  const [trainers] = useState(')\\n\\n\\tval trainer = new MultilayerPerceptronClassifier()');\r\n  const [model] = useState('\\n\\n\\tval model = trainer.fit(train)');\r\n  const [results] = useState('\\n\\n\\tval result = model.transform(test)\\n\\tval predictionAndLabels = result.select(\"prediction\", \"label\")');\r\n  const [evaluator] = useState('\\n\\tval evaluator = new MulticlassClassificationEvaluator()');\r\n  const [ending] = useState('\\n\\n\\tprintln(s\"Test set accuracy = ${evaluator.evaluate(predictionAndLabels)}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n  const [altend] = useState('\\n\\n\\tspark.stop()\\n }\\n}');\r\n\r\n\r\n  const myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    setToggle(true);\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n  }\r\n\r\n  const mytopic = (e) => {\r\n    e.preventDefault();\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n    setNextStep(nextStep => nextStep + 1);\r\n  }\r\n\r\n  const theReturnFunction = () => {\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n    setShowbutton(true);\r\n  }\r\n\r\n  const mylayers = (e) => {\r\n    e.preventDefault();\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n    setMytry(1);\r\n  }\r\n\r\n  const handleEdit = () => { //this is for default params in train\r\n    setShowModel(true);\r\n    setMycolor('beige');\r\n    if (percentage <= 39) {\r\n      setPercentage(currPercentage => currPercentage + 30);\r\n    }\r\n  };\r\n\r\n  const callbackFunction = () => { //this is for progress bar\r\n    setPercentage(currPercentage => currPercentage + 30);\r\n    //setPercentage(newValue);\r\n    //setPivot(currPivot => currPivot + 1);\r\n  }\r\n\r\n  const evalEdit = () => { //this is for evaluation with default params\r\n    setshowButtonIndex(true);\r\n    setevalColor('beige');\r\n    if (percentage <= 69) {\r\n      setPercentage(currPercentage => currPercentage + 40);\r\n    }\r\n  };\r\n\r\n  const skipEval = () => { //this is for skipping evalutation\r\n    setskipB(true);\r\n    if (percentage <= 69) {\r\n      setPercentage(currPercentage => currPercentage + 20);\r\n    }\r\n  }\r\n\r\n  const notDefaultFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([first], { type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([splits], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n      showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n      new Blob([variables], { type: 'text/plain' }),\r\n      new Blob([layers], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('InputLayerID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('interID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('inter2ID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('outID').value], { type: 'text/plain' }),\r\n      showModel === true ? new Blob([trainers]) : new Blob([submitForm()]),\r\n      new Blob([model], { type: 'text/plain' }),\r\n      new Blob([results], { type: 'text/plain' }),\r\n      new Blob([altend], { type: 'text/plain' }),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/MultiLayerPerceptron.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"MultiLayerPerceptron.zip\");\r\n    });\r\n  }\r\n\r\n\r\n  const downloadTxtFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([changer], { type: 'text/plain' }),\r\n      new Blob([first], { type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      new Blob([splits], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n      showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n      new Blob([variables], { type: 'text/plain' }),\r\n      new Blob([layers], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('InputLayerID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('interID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('inter2ID').value], { type: 'text/plain' }),\r\n      new Blob([comma], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('outID').value], { type: 'text/plain' }),\r\n      showModel === true ? new Blob([trainers]) : new Blob([submitForm()]),\r\n      new Blob([model], { type: 'text/plain' }),\r\n      new Blob([results], { type: 'text/plain' }),\r\n      showButtonIndex === true ? new Blob([evaluator]) : new Blob([evalForm()]),\r\n      new Blob([ending], { type: 'text/plain' }),\r\n\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/MultiLayerPerceptron.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"MultiLayerPerceptron.zip\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <ClassificationToolbar />\r\n      <div className=\"welcome\">\r\n        <h1> Multilayer Perceptron Algorithm </h1>\r\n        <br />\r\n        <Jumbotron className=\"myinput\">\r\n          <Form onSubmit={myToggler}>\r\n            <Form.Group controlId=\"myInput\">\r\n              <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n            </Form.Group>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n          </Form>\r\n        </Jumbotron>\r\n        <br />\r\n        <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n        {\r\n          toggle === true ?\r\n            <div>\r\n              <Jumbotron>\r\n                <h2> Please split your dataset into training and test sets and check the parameters </h2>\r\n                <br />\r\n                <Form onSubmit={mytopic}>\r\n                  <Form.Group controlId=\"trainID\">\r\n                    <Form.Control type=\"number\" required={true} name=\"Train\" max=\"100\" placeholder=\"Write the percentage of train model and we will calculate the percentage of the test model\" />\r\n                  </Form.Group>\r\n                  <button type=\"submit\" class=\"btn btn-primary\"> Validation </button>\r\n                </Form>\r\n                <br />\r\n                <Splitter showbutton={showbutton} percentage={percentage} parentCallback={theReturnFunction} />\r\n              </Jumbotron>\r\n              {\r\n                nextStep >= 1 ?\r\n                  <div>\r\n                    <Jumbotron>\r\n                      <h2> Specify Layers for the neural network </h2>\r\n                      <br />\r\n                      <Form onSubmit={mylayers}>\r\n                        <Form.Control required={true} min=\"0\" type=\"number\" id=\"InputLayerID\" name=\"InputLayer\" placeholder=\"Declare the input layer\" />\r\n                        <br />\r\n                        <Form.Control required={true} min=\"0\" type=\"number\" id=\"interID\" name=\"interID\" placeholder=\"Declare the intermediate layer\" />\r\n                        <br />\r\n                        <Form.Control min=\"0\" type=\"number\" id=\"inter2ID\" name=\"inter\" placeholder=\"Declare the intermediate layer\" />\r\n                        <br />\r\n                        <Form.Control required={true} min=\"0\" type=\"number\" id=\"outID\" name=\"out\" placeholder=\"Declare the output layer\" />\r\n                        <br />\r\n                        <button class=\"btn btn-primary\"> Validation </button>\r\n                      </Form>\r\n                    </Jumbotron>\r\n                    {\r\n                      mytry >= 1 ?\r\n                        <div>\r\n                          <Jumbotron>\r\n                            <h2> Train your model with </h2>\r\n                            <br />\r\n                            <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                              Default parameters\r\n                              </button>\r\n                            <br />\r\n                            <br />\r\n                            <MyForm percentage={percentage} parentCallback={callbackFunction} />\r\n                          </Jumbotron>\r\n                          <Jumbotron>\r\n                            <h2> Evaluate your model with </h2>\r\n                            <br />\r\n                            <button class=\"btn btn-primary mr-1\" onClick={evalEdit}>\r\n                              Default parameters\r\n                            </button>\r\n                            <button type=\"submit\" class=\"btn btn-primary\" onClick={skipEval}>\r\n                              Skip Evaluation\r\n                            </button>\r\n                            <br />\r\n                            <br />\r\n                            <Myeval percentage={percentage} parentCallback={callbackFunction} />\r\n                          </Jumbotron>\r\n                          {\r\n                            skipB === true ?\r\n                              <div>\r\n                                <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={notDefaultFile}> Download </button>\r\n                                {pivot === 1 ?\r\n                                  <Link to='/classification/AlgorithmsClassification'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                                  : null\r\n                                }\r\n                              </div> :\r\n                              <div>\r\n                                <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={downloadTxtFile}> Download</button>\r\n                                {pivot === 1 ?\r\n                                  <Link to='/classification'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                                  : null\r\n                                }\r\n                              </div>\r\n                          }\r\n                        </div> : null\r\n                    }\r\n\r\n                  </div> : null\r\n              }\r\n            </div> : null\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiLayerPerceptron ","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass StringIndexer extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"handleInvalidID\" name=\"handleInvalid\" >\r\n                        <option value=\"\" disabled selected>handleInvalid</option>\r\n                        <option value=\"skip\">skip</option>\r\n                        <option value=\"error\">error (Default)</option>\r\n                        <option value=\"keep\">keep</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"inputColID\" name=\"inputCol\" placeholder=\"inputCol -> \r\n                                    Parameter for input column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"inputColsID\" name=\"inputCols\" placeholder=\"inputCols ->\r\n                                    Parameter for input column names\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"outputColID\" name=\"outputCol\" placeholder=\"outputCol ->\r\n                                    Parameter for output column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"outputColsID\" name=\"outputCols\" placeholder=\"outputCols ->\r\n                                    Parameter for output column names\"/>\r\n                    <br />\r\n                    <Form.Control as=\"select\" title=\"Parameter for how to order labels of string column.\" type=\"text\" id=\"stringOrderTypeID\" name=\"stringOrderType\" >\r\n                        <option value=\"\" disabled selected>stringOrderType</option>\r\n                        <option value=\"frequencyDesc\">frequencyDesc</option>\r\n                        <option value=\"frequencyAsc\">frequencyAsc</option>\r\n                        <option value=\"alphabetDesc\">alphabetDesc</option>\r\n                        <option value=\"alphabetAsc\">alphabetAsc</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StringIndexer","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass RightForm extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 51) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"checkpointIntervalID\" name=\"checkpointInterval\" placeholder=\"checkpointInterval ->\r\n                                                                        Parameter for set checkpoint interval (>= 1) or disable checkpoint (-1)\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                                                            Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"impurityID\" name=\"impurity\" >\r\n                        <option value=\"\" disabled selected>impurity (Criterion for information gain)</option>\r\n                        <option value=\"entropy\">entropy</option>\r\n                        <option value=\"gini\">gini (Default)</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                        Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"leafColID\" name=\"leafCol\" placeholder=\"leafCol -> \r\n                                                                            Leaf indices column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxBinsID\" name=\"maxBins\" placeholder=\"maxBins -> \r\n                                                                            Maximum number of bins used for discretizing continuous features and for choosing how to split on features at each node.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxDepthID\" name=\"maxDepth\" placeholder=\"maxDepth -> \r\n                                                                            Maximum depth of the tree (nonnegative)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minInstancesPerNodeID\" name=\"minInstancesPerNode\" placeholder=\"minInstancesPerNode -> \r\n                                                                            Minimum number of instances each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minWeightFractionPerNodeID\" name=\"minWeightFractionPerNode\" placeholder=\"minWeightFractionPerNode -> \r\n                                                                            Minimum fraction of the weighted sample count that each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                        Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"probabilityColID\" name=\"probabilityCol\" placeholder=\"probabilityCol ->\r\n                                                                        Parameter for column name predicted class conditional probabilities \"/>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"rawPredictionColID\" name=\"rawPredictionCol\" placeholder=\"rawPredictionCol ->\r\n                                                                        Parameter for raw prediction (a.k.a. confidence) column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"seedID\" name=\"sedd\" placeholder=\"seed ->\r\n                                                                        Parameter for random seed.\" />\r\n                    <br />\r\n                    <Form.Control title=\"For LinearSVC, this threshold is applied to the rawPrediction, rather than a probability. This threshold can be any real number\" type=\"number\" id=\"thresholdID\" name=\"threshold\" placeholder=\"threshold ->\r\n                                                                        Parameter for threshold in binary classification prediction. Default: 0.0\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                        Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RightForm","import React, { Component } from 'react';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport { Form } from 'react-bootstrap';\r\n\r\nclass IndexToString extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"inputColID\" name=\"inputCol\" placeholder=\"inputCol -> \r\n                                    Parameter for input column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelsID\" name=\"labels\" placeholder=\"maxCategories ->\r\n                                    Optional parameter for array of labels specifying index-string mapping.\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"outputColID\" name=\"outputCol\" placeholder=\"outputCol ->\r\n                                    Parameter for output column name\" />\r\n                    <br />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndexToString","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass VectorIndexer extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 39) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"handleInvalidID\" name=\"handleInvalid\" >\r\n                        <option value=\"\" disabled selected>handleInvalid (only applies to categorical features)</option>\r\n                        <option value=\"skip\">skip</option>\r\n                        <option value=\"error\">error (Default)</option>\r\n                        <option value=\"keep\">keep</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"inputColID\" name=\"inputCol\" placeholder=\"inputCol -> \r\n                                        Parameter for input column name.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"maxCategoriesID\" name=\"maxCategories\" placeholder=\"maxCategories ->\r\n                                        Parameter threshold for the number of values a categorical feature can take.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"outputColID\" name=\"outputCol\" placeholder=\"outputCol ->\r\n                                        Parameter for output column name\" />\r\n                    <br />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VectorIndexer","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport Splitter from '../NaiveBayes/Splitter'\r\nimport { Link } from 'react-router-dom';\r\nimport StringIndexer from './StringIndexer'\r\nimport RightForm from './RightForm'\r\nimport IndexToString from './IndexToString'\r\nimport VectorIndexer from './VectorIndexer'\r\nimport Myeval from '../NaiveBayes/Myeval'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport ClassificationToolbar from '../ClassificationToolbar'\r\n\r\nconst submitForm = () => {\r\n    let myK = \")\\n\\n\\tval dt = new DecisionTreeClassifier()\";\r\n    if (document.getElementById(\"checkpointIntervalID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setCheckpointInterval(\" + document.getElementById(\"checkpointIntervalID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"impurityID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setImpurity(\"${document.getElementById(\"impurityID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"leafColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLeafCol(\"${document.getElementById(\"leafColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"maxBinsID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMaxBins(\" + document.getElementById(\"maxBinsID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxDepthID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMaxDepth(\" + document.getElementById(\"maxDepthID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minInstancesPerNodeID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMinInstancesPerNode(\" + document.getElementById(\"minInstancesPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minWeightFractionPerNodeID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMinWeightFractionPerNode(\" + document.getElementById(\"minWeightFractionPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setProbabilityCol(\"${document.getElementById(\"probabilityColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"rawPredictionColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setRawPredictionCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"thresholdID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setThreshold(\" + document.getElementById(\"thresholdID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"seedID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setSeed(\" + document.getElementById(\"seedID\").value + \"L)\"));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst mystringIndexer = () => {\r\n    let myK = \"\\\")\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)\";\r\n    if (document.getElementById(\"handleInvalidID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setHandleInvalid(\"${document.getElementById(\"handleInvalidID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"inputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setInputCol(\"${document.getElementById(\"inputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"inputColsID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setInputCols(\"${document.getElementById(\"inputColsID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setOutputCol(\"${document.getElementById(\"outputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColsID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setOutputCols(\"${document.getElementById(\"outputColsID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"stringOrderTypeID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setStringOrderType(\"${document.getElementById(\"stringOrderTypeID\").value}\")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst myVectorIndexer = () => {\r\n    let myK = \"\\n\\n\\tval featureIndexer = new VectorIndexer().fit(data)\";\r\n    if (document.getElementById(\"handleInvalidID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setHandleInvalid(\"${document.getElementById(\"handleInvalidID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"inputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setInputCol(\"${document.getElementById(\"inputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setOutputCol(\"${document.getElementById(\"outputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"maxCategoriesID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMaxCategories(\" + document.getElementById(\"maxCategoriesID\").value + \")\"));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst myIndexToString = () => {\r\n    let myK = \"\\n\\n\\tval labelConverter = new IndexToString()\";\r\n    if (document.getElementById(\"inputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setInputCol(\"${document.getElementById(\"inputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setOutputCol(\"${document.getElementById(\"outputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelsID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLabels(\"${document.getElementById(\"labelsID\").value}\")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst evalForm = () => {\r\n    let myK = \"\\n\\n\\tval evaluator = new MulticlassClassificationEvaluator()\";\r\n    if (document.getElementById(\"betaID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setBeta(\"${document.getElementById(\"betaID\").value} \")`));\r\n    }\r\n    if (document.getElementById(\"metricNameID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setMetricName(\"${document.getElementById(\"metricNameID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"probabilityColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \" setProbabilityCol(\" + document.getElementById(\"probabilityColID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value} \")`));\r\n    }\r\n    if (document.getElementById(\"epsID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setEps(\"${document.getElementById(\"epsID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"metricLabelID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", \"setMetricName(\" + document.getElementById(\"metricLabelID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value} \")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nfunction DecisionTree() {\r\n\r\n    const makeid = () => { //make the name of the programm\r\n        var name = '';\r\n        var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n        var length = 7;\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return name;\r\n    }\r\n\r\n    const [skipB, setskipB] = useState(false);\r\n    const [evalColor, setevalColor] = useState('darkgoldenrod');\r\n    const [evalbutt, setevalbutt] = useState(false);\r\n    const [DecisionButton, setDecisionButton] = useState(false);\r\n    const [IndexString, setIndexString] = useState(false);\r\n    const [nextStep, setNextStep] = useState(false);\r\n    const [theNext, setTheNext] = useState(false);\r\n    const [mycolor, setMycolor] = useState('darkgoldenrod');\r\n    const [thisColor, setThisColor] = useState('darkgoldenrod');\r\n    const [thecolor, setThecolor] = useState('darkgoldenrod');\r\n    const [IndexColor, setIndexColor] = useState('darkgoldenrod');\r\n    const [showbutton, setShowbutton] = useState(false);\r\n    const [mybutton, setMyButton] = useState(false);\r\n    const [pivot, setPivot] = useState(0);\r\n    const [percentage, setPercentage] = useState(0);\r\n    const [toggle, setToggle] = useState(false);\r\n    const [libs] = useState('import org.apache.spark.ml.Pipeline\\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\\nimport org.apache.spark.sql.SparkSession');\r\n    const [changer] = useState('\\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator');\r\n    const [first] = useState('\\n\\nobject ');\r\n    const [name] = useState(makeid());\r\n    const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()');\r\n    const [dataset] = useState('\\n\\tval data = spark.read.format(\"libsvm\").load(\"');\r\n    const [mystring] = useState('\")\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)');\r\n    const [myvector] = useState('\\n\\n\\tval featureIndexer = new VectorIndexer().fit(data)');\r\n    const [splits] = useState('\\n\\n\\tval Array(trainingData, testData) = data.randomSplit(Array(');\r\n    const [comma] = useState(',');\r\n    const [DecisionModel] = useState('))\\n\\n\\tval dt = new DecisionTreeClassifier()');\r\n    const [myindex] = useState('\\n\\n\\tval labelConverter = new IndexToString()');\r\n    const [mypipeline] = useState('\\n\\n\\tval pipeline = new Pipeline().setStages(Array(labelIndexer, featureIndexer, dt, labelConverter))');\r\n    const [mymodel] = useState('\\n\\n\\tval model = pipeline.fit(trainingData)\\n\\n\\tval predictions = model.transform(testData)\\n\\n\\tpredictions.select(\"predictedLabel\", \"label\", \"features\").show(5)');\r\n    const [evaluator] = useState('\\n\\n\\tval evaluator = new MulticlassClassificationEvaluator()');\r\n    const [stopper] = useState('\\n\\n\\tval accuracy = evaluator.evaluate(predictions)\\n\\tprintln(s\"Test Error = ${(1.0 - accuracy)}\")\\n\\n\\tval treeModel = model.stages(2).asInstanceOf[DecisionTreeClassificationModel]\\n\\tprintln(s\"Learned classification tree model:\\n ${treeModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}')\r\n    const [altEnd] = useState('\\n\\n\\tval treeModel = model.stages(2).asInstanceOf[DecisionTreeClassificationModel]\\n\\tprintln(s\"Learned classification tree model:\\n ${treeModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}')\r\n\r\n    const downloadTxtFile = () => { //this is the file (downloading zip)\r\n        setPercentage(currPercentage => currPercentage + 40);\r\n        setPivot(currPivot => currPivot + 1);\r\n\r\n        const file = [\r\n            new Blob([libs], { type: 'text/plain' }),\r\n            new Blob([changer], { type: 'text/plain' }),\r\n            new Blob([first], { type: 'text/plain' }),\r\n            new Blob([name], { type: 'text/plain' }),\r\n            new Blob([basic], { type: 'text/plain' }),\r\n            new Blob([dataset], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n            showbutton === false ? new Blob([mystring]) : new Blob([mystringIndexer()]),\r\n            mybutton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n            new Blob([splits], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n            new Blob([comma], { type: 'text/plain' }),\r\n            new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n            DecisionButton === false ? new Blob([DecisionModel]) : new Blob([submitForm()]),\r\n            IndexString === false ? new Blob([myindex]) : new Blob([myIndexToString()]),\r\n            new Blob([mypipeline], { type: 'text/plain' }),\r\n            new Blob([mymodel], { type: 'text/plain' }),\r\n            evalbutt === true ? new Blob([evaluator]) : new Blob([evalForm()]),\r\n            new Blob([stopper], { type: 'text/plain' }),\r\n\r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/DecisionTree.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n            // see FileSaver.js\r\n            FileSaver.saveAs(content, \"DecisionTree.zip\");\r\n        });\r\n    }\r\n\r\n    const notDefaultFile = () => { //this is the file (downloading zip)\r\n        setPercentage(currPercentage => currPercentage + 40);\r\n        setPivot(currPivot => currPivot + 1);\r\n\r\n        const file = [\r\n            new Blob([libs], { type: 'text/plain' }),\r\n            new Blob([first], { type: 'text/plain' }),\r\n            new Blob([name], { type: 'text/plain' }),\r\n            new Blob([basic], { type: 'text/plain' }),\r\n            new Blob([dataset], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n            showbutton === false ? new Blob([mystring]) : new Blob([mystringIndexer()]),\r\n            mybutton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n            new Blob([splits], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n            new Blob([comma], { type: 'text/plain' }),\r\n            new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n            DecisionButton === false ? new Blob([DecisionModel]) : new Blob([submitForm()]),\r\n            IndexString === false ? new Blob([myindex]) : new Blob([myIndexToString()]),\r\n            new Blob([mypipeline], { type: 'text/plain' }),\r\n            new Blob([mymodel], { type: 'text/plain' }),\r\n            new Blob([altEnd], { type: 'text/plain' }),\r\n\r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" + localStorage.getItem('Name') + \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' + localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/DecisionTree.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n            // see FileSaver.js\r\n            FileSaver.saveAs(content, \"DecisionTree.zip\");\r\n        });\r\n    }\r\n\r\n    const myToggler = (e) => {  //this is for next button\r\n        e.preventDefault();\r\n        setToggle(true);\r\n        if (percentage <= 9) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n    }\r\n\r\n    const theReturnFunction = () => {\r\n        if (percentage <= 11) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setShowbutton(true);\r\n    }\r\n\r\n    const callbackFunction = () => { //this is for progress bar\r\n        if (percentage <= 21) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setMyButton(true);\r\n        setNextStep(true);\r\n        if (percentage <= 31) {\r\n            setDecisionButton(true);\r\n        }\r\n    }\r\n\r\n    const handleEdit = () => { //this is for default params in train\r\n        //setShowModel(true);\r\n        setMycolor('beige');\r\n        if (percentage <= 11) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n    };\r\n\r\n    const theString = () => { //this is for default params in train\r\n        //setShowModel(true);\r\n        setThecolor('beige');\r\n        if (percentage <= 21) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setNextStep(true);\r\n    };\r\n\r\n    const mytopic = (e) => {\r\n        e.preventDefault();\r\n        if (percentage <= 31) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setTheNext(true);\r\n    }\r\n\r\n    const trainFunction = () => {\r\n        setThisColor('beige');\r\n        if (percentage <= 41) {\r\n            setPercentage(currPercentage => currPercentage + 30);\r\n        }\r\n    };\r\n\r\n    const modelMyFunction = () => {\r\n        if (percentage <= 51) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setDecisionButton(true);\r\n    };\r\n\r\n    const myFunction = () => {\r\n        if (percentage <= 51) {\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n        setIndexString(true);\r\n    }\r\n\r\n    const myIndexString = () => { //this is for default params in train\r\n        //setShowModel(true);\r\n        setIndexColor('beige')\r\n        if (percentage <= 51) {\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    };\r\n\r\n    const evalFunction = () => { //this is for progress bar\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n    }\r\n\r\n    const evalEdit = () => { //this is for evaluation with default params\r\n        setevalbutt(true);\r\n        setevalColor('beige');\r\n        if (percentage <= 69) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n    };\r\n\r\n    const skipEval = () => { //this is for skipping evalutation\r\n        setskipB(true);\r\n        if (percentage <= 69) {\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <ClassificationToolbar />\r\n            <div className=\"welcome\">\r\n                <h1> Decision Tree Algorithm</h1>\r\n                <br />\r\n                <Jumbotron className=\"myinput\">\r\n                    <Form onSubmit={myToggler}>\r\n                        <Form.Group controlId=\"myInput\">\r\n                            <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n                        </Form.Group>\r\n                        <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n                    </Form>\r\n                </Jumbotron>\r\n                <br />\r\n                <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n                {\r\n                    toggle === true ?\r\n                        <div>\r\n                            <Jumbotron>\r\n                                <h2>Index labels with String Indexer</h2>\r\n                                <br />\r\n                                <StringIndexer percentage={percentage} parentCallback={theReturnFunction} />\r\n                                <br />\r\n                                <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                                    Default parameters\r\n                                </button>\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2>Indexing categorical feature columns in a dataset of Vector with Vector Indexer.</h2>\r\n                                <br />\r\n                                <VectorIndexer percentage={percentage} parentCallback={callbackFunction} />\r\n                                <br />\r\n                                <button class=\"btn btn-primary\" onClick={theString}>\r\n                                    Default parameters\r\n                                </button>\r\n                            </Jumbotron>\r\n                            {\r\n                                nextStep === true ?\r\n                                    <div>\r\n                                        <Jumbotron>\r\n                                            <h2> Please split your dataset into training and test sets and check the parameters </h2>\r\n                                            <br />\r\n                                            <Form onSubmit={mytopic}>\r\n                                                <Form.Group controlId=\"trainID\">\r\n                                                    <Form.Control type=\"number\" required={true} name=\"Train\" max=\"100\" placeholder=\"Write the percentage of train model and we will calculate the percentage of the test model\" />\r\n                                                </Form.Group>\r\n                                                <button type=\"submit\" class=\"btn btn-primary\"> Validation </button>\r\n                                            </Form>\r\n                                            <br />\r\n                                            <Splitter showbutton={showbutton} percentage={percentage} parentCallback={theReturnFunction} />\r\n                                        </Jumbotron>\r\n                                        {\r\n                                            theNext === true ?\r\n                                                <div>\r\n                                                    <Jumbotron>\r\n                                                        <h2> Train your model with </h2>\r\n                                                        <br />\r\n                                                        <button class=\"btn btn-primary\" onClick={trainFunction}>\r\n                                                            Default parameters\r\n                                                        </button>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <RightForm percentage={percentage} parentCallback={modelMyFunction} />\r\n                                                    </Jumbotron>\r\n                                                    <Jumbotron>\r\n                                                        <h2>Convert indexed labels back to original labels</h2>\r\n                                                        <br />\r\n                                                        <IndexToString percentage={percentage} parentCallback={myFunction} />\r\n                                                        <br />\r\n                                                        <button class=\"btn btn-primary\" onClick={myIndexString}>\r\n                                                            Default parameters\r\n                                                        </button>\r\n                                                    </Jumbotron>\r\n                                                    <Jumbotron>\r\n                                                        <h2> Evaluate your model with </h2>\r\n                                                        <br />\r\n                                                        <button class=\"btn btn-primary mr-1\" onClick={evalEdit}>\r\n                                                            Default parameters\r\n                                                        </button>\r\n                                                        <button type=\"submit\" class=\"btn btn-primary\" onClick={skipEval}>\r\n                                                            Skip Evaluation\r\n                                                        </button>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <Myeval percentage={percentage} parentCallback={evalFunction} />\r\n                                                    </Jumbotron>\r\n                                                        {\r\n                                                            skipB === true ?\r\n                                                                <div>\r\n                                                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={notDefaultFile}> Download </button>\r\n                                                                    {pivot === 1 ?\r\n                                                                        <Link to='/classification/AlgorithmsClassification'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                                                                        : null\r\n                                                                    }\r\n                                                                </div> :\r\n                                                                <div>\r\n                                                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={downloadTxtFile}> Download</button>\r\n                                                                    {pivot === 1 ?\r\n                                                                        <Link to='/classification'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                                                                        : null\r\n                                                                    }\r\n                                                                </div>\r\n                                                        }\r\n                                                    </div> : null\r\n                                        }\r\n                                    </div> : null\r\n                                        }\r\n                                    </div> : null\r\n                            }\r\n                        </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DecisionTree ","import React, { Component } from 'react'; \r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass TheForm extends Component {\r\n        state = { \r\n            showForm: false}\r\n    \r\n        myfun = () => { //this is for progress bar\r\n            if (this.props.percentage <= 39) {\r\n                this.props.parentCallback(this.props.percentage + 10);\r\n            }        \r\n        }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"elasticNetParamID\" name=\"elasticNetParam\" placeholder=\"elasticNetParam -> \r\n                                                                        Parameter for the ElasticNet mixing parameter, in range [0, 1].\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                                                        Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"fitInterceptID\" name=\"fitIntercept\" >\r\n                            <option value=\"\" disabled selected> fitIntercept </option>\r\n                            <option value=\"true\">true</option>\r\n                            <option value=\"false\">false</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                    Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter ->\r\n                                                                    Parameter for maximum number of iterations (>= 0).\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                    Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"solverID\" name=\"solver\" >\r\n                            <option value=\"\" disabled selected> solver </option>\r\n                            <option value=\"l-bfgs\">l-bfgs</option>\r\n                            <option value=\"normal\">normal</option>\r\n                            <option value=\"auto\">auto (Default)</option>\r\n                    </Form.Control>\r\n                    <br/>\r\n                    <Form.Control  type=\"number\" id=\"regParamID\" name=\"regParam\" placeholder=\"regParam ->\r\n                                                                    Parameter for regularization parameter (>= 0)\" />   \r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"standardizationID\" name=\"standardization\" >\r\n                            <option value=\"\" disabled selected> standardization </option>\r\n                            <option value=\"true\">true</option>\r\n                            <option value=\"false\">false</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"lossID\" name=\"loss\" >\r\n                            <option value=\"\" disabled selected>loss </option>\r\n                            <option value=\"squaredError\">squaredError (Default)</option>\r\n                            <option value=\"hube\">hube</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"tolID\" name=\"tol\" placeholder=\"tol ->\r\n                                                                    Parameter for the convergence tolerance for iterative algorithms (>= 0).\" /> \r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                    Parameter for weight column name (not set or empty is 1.0)\" />   \r\n                                                                                                                                                                \r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => {this.setState({showForm: !this.state.showForm}, this.myfun())}}>\r\n                    Choose your own parameters\r\n                </button>                                                                                                      \r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default TheForm","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport { Link } from 'react-router-dom';\r\nimport TheForm from './TheForm'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport RegressionToolbar from '../RegressionToolbar'\r\n\r\nconst submitForm = () => {\r\n  let myK = \"\\\")\\n\\n\\tval lr = new LinearRegression()\";\r\n  if (document.getElementById(\"elasticNetParamID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setElasticNetParam(\" + document.getElementById(\"elasticNetParamID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"fitInterceptID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setFitIntercept(\" + document.getElementById(\"fitInterceptID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"labelColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"lossID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setLoss(\"${document.getElementById(\"lossID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"regParamID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setRegParam(\" + document.getElementById(\"regParamID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"standardizationID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setStandardization(\" + document.getElementById(\"standardizationID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"solverID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setSolver(\"${document.getElementById(\"solverID\").value}\")`));\r\n  }\r\n  if (document.getElementById(\"tolID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", \"setTol(\" + document.getElementById(\"tolID\").value + \")\"));\r\n  }\r\n  if (document.getElementById(\"weightColID\").value !== \"\") {\r\n    myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n  }\r\n  return (myK);\r\n}\r\n\r\nfunction LinearRegression() {\r\n\r\n  const makeid = () => { //make the name of the programm\r\n    var name = '';\r\n    var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n    var length = 7;\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return name;\r\n  }\r\n\r\n  const [pivot, setPivot] = useState(0);\r\n  const [showbutton, setShowbutton] = useState(false);\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [mycolor, setMycolor] = useState('darkgoldenrod');\r\n  const [toggle, setToggle] = useState(false);\r\n  const [libs] = useState('import org.apache.spark.ml.regression.LinearRegression\\nimport org.apache.spark.sql.SparkSession\\n\\nobject ');\r\n  const [name] = useState(makeid());\r\n  const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()');\r\n  const [dataset] = useState('\\n\\tval training = spark.read.format(\"libsvm\").load(\"');\r\n  const [Linear] = useState('\")\\n\\n\\tval lr = new LinearRegression()');\r\n  const [fitting] = useState('\\n\\n\\tval lrModel = lr.fit(training)');\r\n  const [printer] = useState('\\n\\n\\t println(s\"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}\")');\r\n  const [Summarize] = useState('\\n\\n\\tval trainingSummary = lrModel.summary\\n\\tprintln(s\"numIterations: ${trainingSummary.totalIterations}\")\\n\\tprintln(s\"objectiveHistory: [${trainingSummary.objectiveHistory.mkString(\",\")}]\")\\n\\ttrainingSummary.residuals.show()\\n\\tprintln(s\"RMSE: ${trainingSummary.rootMeanSquaredError}\")\\n\\tprintln(s\"r2: ${trainingSummary.r2}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n\r\n\r\n  const myToggler = (e) => {  //this is for next button\r\n    e.preventDefault();\r\n    setToggle(true);\r\n    setPercentage(currPercentage => currPercentage + 10);\r\n  }\r\n\r\n  const handleEdit = () => { //this is for default params in train\r\n    setShowbutton(true);\r\n    setMycolor('beige');\r\n    if (percentage <= 19) {\r\n      setPercentage(currPercentage => currPercentage + 50);\r\n    }\r\n  };\r\n\r\n  const callbackFunction = () => { //this is for progress bar\r\n    setPercentage(currPercentage => currPercentage + 50);\r\n    //setPercentage(newValue);\r\n    //setPivot(currPivot => currPivot + 1);\r\n  }\r\n\r\n  const downloadTxtFile = () => { //this is the file (downloading zip)\r\n    setPercentage(currPercentage => currPercentage + 40);\r\n    setPivot(currPivot => currPivot + 1);\r\n\r\n    const file = [\r\n      new Blob([libs], { type: 'text/plain' }),\r\n      new Blob([name], { type: 'text/plain' }),\r\n      new Blob([basic], { type: 'text/plain' }),\r\n      new Blob([dataset], { type: 'text/plain' }),\r\n      new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n      showbutton === true ? new Blob([Linear]) : new Blob([submitForm()]),\r\n      new Blob([fitting], { type: 'text/plain' }),\r\n      new Blob([printer], { type: 'text/plain' }),\r\n      new Blob([Summarize], { type: 'text/plain' }),\r\n    ];\r\n    var parts = new File(file, \"myfile\")\r\n    var zip = new JSZip();\r\n    zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n    zip.file(\"src/main/scala/LinearRegression.scala\", parts);\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      FileSaver.saveAs(content, \"LinearR.zip\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <RegressionToolbar />\r\n      <div className=\"welcome\">\r\n        <h1> Linear Regression Algorithm </h1>\r\n        <br />\r\n        <Jumbotron className=\"myinput\">\r\n          <Form onSubmit={myToggler}>\r\n            <Form.Group controlId=\"myInput\">\r\n              <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n            </Form.Group>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n          </Form>\r\n        </Jumbotron>\r\n        <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n        {\r\n          toggle === true ?\r\n            <div>\r\n              <Jumbotron>\r\n                <h2>Train your model with </h2>\r\n                <br/>\r\n                <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                  Default parameters\r\n                </button>\r\n                <br/>\r\n                <br/>\r\n                <TheForm percentage={percentage} parentCallback={callbackFunction} />\r\n              </Jumbotron>\r\n              <div>\r\n                <button class=\"btn btn-primary mr-1\" disabled={percentage <= 59} onClick={downloadTxtFile}>Download</button>\r\n                {pivot === 1 ?\r\n                  <Link to='/regression'><button class=\"btn btn-primary\"> Return to menu </button></Link> \r\n                  : null\r\n                }\r\n              </div>\r\n            </div> : null\r\n        }\r\n      </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default LinearRegression \r\n","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\nclass RegressionEval extends Component {\r\n    state = {\r\n        showForm: false,\r\n        mycolor: 'darkgoldenrod',\r\n    }\r\n\r\n    myfun = () => {\r\n        if (this.props.percentage <= 69) {\r\n            this.props.parentCallback(this.props.percentage + 30);\r\n        }\r\n    }\r\n\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                            Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"metricNameID\" name=\"metricName\" >\r\n                        <option value=\"\" disabled selected>metricName</option>\r\n                        <option value=\"rmse\">rmse</option>\r\n                        <option value=\"mse\">mse</option>\r\n                        <option value=\"r2\">r2</option>\r\n                        <option value=\"mae\">mae</option>\r\n                        <option value=\"var\">var</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                            Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                            Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegressionEval","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass RegressionForm extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 41) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"checkpointIntervalID\" name=\"checkpointInterval\" placeholder=\"checkpointInterval ->\r\n                                    Parameter for set checkpoint interval (>= 1) or disable checkpoint (-1)\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"featureSubsetStrategyID\" name=\"featureSubsetStrategy\" >\r\n                        <option value=\"\" disabled selected>featureSubsetStrategy (The number of features to consider for splits at each tree node)</option>\r\n                        <option value=\"auto\">auto</option>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"onethird\">onethird</option>\r\n                        <option value=\"sqrt\">sqrt</option>\r\n                        <option value=\"log2\">log2</option>\r\n                        <option value=\"n\">n</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                                                            Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"impurityID\" name=\"impurity\" >\r\n                        <option value=\"\" disabled selected>impurity (Criterion for information gain)</option>\r\n                        <option value=\"entropy\">entropy</option>\r\n                        <option value=\"gini\">gini (Default)</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                        Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"leafColID\" name=\"leafCol\" placeholder=\"leafCol -> \r\n                                                                            Leaf indices column name.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxBinsID\" name=\"maxBins\" placeholder=\"maxBins -> \r\n                                                                            Maximum number of bins used for discretizing continuous features and for choosing how to split on features at each node.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"maxDepthID\" name=\"maxDepth\" placeholder=\"maxDepth -> \r\n                                                                            Maximum depth of the tree (nonnegative)\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"minInfoGainID\" name=\"minInfoGain\" placeholder=\"minInfoGain ->\r\n                                                                        Minimum information gain for a split to be considered at a tree node\"/>\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"minInstancesPerNodeID\" name=\"minInstancesPerNode\" placeholder=\"minInstancesPerNode -> \r\n                                                                            Minimum number of instances each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"minWeightFractionPerNodeID\" name=\"minWeightFractionPerNode\" placeholder=\"minWeightFractionPerNode -> \r\n                                                                            Minimum fraction of the weighted sample count that each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"numTreesID\" name=\"numTrees\" placeholder=\"numTrees ->\r\n                                                                        Number of trees to train (at least 1)\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                        Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"seedID\" name=\"sedd\" placeholder=\"seed ->\r\n                                                                        Parameter for random seed.\" />\r\n                    <br />\r\n                    <Form.Control  type=\"number\" id=\"subsamplingRateID\" name=\"subsamplingRate\" placeholder=\"subsamplingRate ->\r\n                                                                        Fraction of the training data used for learning each decision tree, in range (0, 1]\" />\r\n                    <br />\r\n                    <Form.Control  type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                        Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegressionForm","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport VectorIndexer from '../../ClassificationAlgorithms/DecisionTree/VectorIndexer'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport Splitter from '../../ClassificationAlgorithms/NaiveBayes/Splitter'\r\nimport { Link } from 'react-router-dom';\r\nimport RegressionEval from './RegressionEval'\r\nimport RegressionForm from './RegressionForm'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport RegressionToolbar from '../RegressionToolbar'\r\n\r\nconst submitForm = () => {\r\n    let m = \")\\n\\n\\tval dt = new DecisionTreeClassifier()\";\r\n    if (document.getElementById(\"checkpointIntervalID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setCheckpointInterval(\" + document.getElementById(\"checkpointIntervalID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"featureSubsetStrategyID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setFeatureSubsetStrategy(\"${document.getElementById(\"featureSubsetStrategyID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"impurityID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setImpurity(\"${document.getElementById(\"impurityID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"leafColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setLeafCol(\"${document.getElementById(\"leafColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"maxBinsID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMaxBins(\" + document.getElementById(\"maxBinsID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxDepthID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMaxDepth(\" + document.getElementById(\"maxDepthID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minInfoGainID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinInfoGain(\" + document.getElementById(\"minInfoGainID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minInstancesPerNodeID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinInstancesPerNode(\" + document.getElementById(\"minInstancesPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minWeightFractionPerNodeID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinWeightFractionPerNode(\" + document.getElementById(\"minWeightFractionPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"numTreesID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setNumTrees(\" + document.getElementById(\"numTreesID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"subsamplingRateID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setSubsamplingRate(\" + document.getElementById(\"subsamplingRateID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"seedID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setSeed(\" + document.getElementById(\"seedID\").value + \"L)\"));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setWeightCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n    }\r\n    return (m);\r\n}\r\n\r\n\r\nconst mysplit = () => {\r\n    let myK = \")\";\r\n    if (document.getElementById(\"weightsID\").value !== \"\") {\r\n        myK = (myK.concat(\",\", \"weights = \" + document.getElementById(\"weightsID\").value));\r\n    }\r\n    if (document.getElementById(\"seedID\").value !== \"\") {\r\n        myK = (myK.concat(\",\", \"seed = \" + document.getElementById(\"seedID\").value + \"L)\\n\\n\\t\"));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst evalForm = () => {\r\n    let myK = \"\\n\\n\\tpredictions.select(\\\"prediction\\\", \\\"label\\\", \\\"features\\\").show(5)\";\r\n    if (document.getElementById(\"metricNameID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setMetricName(\"${document.getElementById(\"metricNameID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst myVectorIndexer = () => {\r\n    let my = \"\\\")\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)\";\r\n    if (document.getElementById(\"handleInvalidID\").value !== \"\") {\r\n        my = (my.concat(\".\", `setHandleInvalid(\"${document.getElementById(\"handleInvalidID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"inputColID\").value !== \"\") {\r\n        my = (my.concat(\".\", `setInputCol(\"${document.getElementById(\"inputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColID\").value !== \"\") {\r\n        my = (my.concat(\".\", \"setOutputCol(\" + document.getElementById(\"outputColID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxCategoriesID\").value !== \"\") {\r\n        my = (my.concat(\".\", \"setMaxCategories(\" + document.getElementById(\"maxCategoriesID\").value + \")\"));\r\n    }\r\n    return (my);\r\n}\r\n\r\nfunction RandomForestRegression() {\r\n\r\n    const makeid = () => { //make the name of the programm\r\n        var name = '';\r\n        var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n        var length = 7;\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return name;\r\n    }\r\n\r\n    const [skipB, setskipB] = useState(false);\r\n    const [formColor, setformColor] = useState('darkgoldenrod');\r\n    const [formButton, setformButton] = useState(false);\r\n    const [evalColor, setevalColor] = useState('darkgoldenrod');\r\n    const [showButtonIndex, setshowButtonIndex] = useState(false);\r\n    const [showbutton, setShowbutton] = useState(false);\r\n    const [vectorButton, setvectorButton] = useState(false);\r\n    const [pivot, setPivot] = useState(0);\r\n    const [toggle, setToggle] = useState(false);\r\n    const [thecolor, setthecolor] = useState('darkgoldenrod')\r\n    const [percentage, setPercentage] = useState(0);\r\n    const [libs] = useState('import org.apache.spark.ml.Pipeline\\nimport org.apache.spark.ml.feature.VectorIndexer\\nimport org.apache.spark.ml.regression.{RandomForestRegressionModel, RandomForestRegressor}\\nimport org.apache.spark.sql.SparkSession');\r\n    const [changer] = useState('\\nimport org.apache.spark.ml.evaluation.RegressionEvaluator');\r\n    const [first] = useState('\\n\\nobject ')\r\n    const [name] = useState(makeid());\r\n    const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()');\r\n    const [dataset] = useState('\\n\\tval data = spark.read.format(\"libsvm\").load(\"');\r\n    const [myvector] = useState('\")\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)');\r\n    const [thesplitter] = useState('\\n\\n\\tval Array(trainingData, testData) = data.randomSplit(Array(');\r\n    const [comma] = useState(',');\r\n    const [con] = useState('))');\r\n    const [thetrainer] = useState('\\n\\n\\tval rf = new RandomForestRegressor()');\r\n    const [thepipeline] = useState('\\n\\n\\tval pipeline = new Pipeline().setStages(Array(featureIndexer, rf))');\r\n    const [themodel] = useState('\\n\\n\\tval model = pipeline.fit(trainingData)');\r\n    const [thepredict] = useState('\\n\\n\\tval predictions = model.transform(testData)\\n\\n\\tpredictions.select(\"prediction\", \"label\", \"features\").show(5)');\r\n    const [theEvaluator] = useState('\\n\\n\\tpredictions.select(\"prediction\", \"label\", \"features\").show(5)');\r\n    const [ending] = useState('\\n\\tval yerror = evaluator.evaluate(predictions)\\n\\tprintln(s\"Your selected error on test data = $yerror\")\\n\\n\\tval rfModel = model.stages(1).asInstanceOf[RandomForestRegressionModel]\\n\\tprintln(s\"Learned regression forest model:\\\\n ${rfModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n    const [notEval] = useState('\\n\\n\\tval rfModel = model.stages(1).asInstanceOf[RandomForestRegressionModel]\\n\\tprintln(s\"Learned regression forest model:\\\\n ${rfModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n\r\n    const myToggler = (e) => {  //this is for next button\r\n        e.preventDefault();\r\n        setToggle(true);\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n    }\r\n\r\n    const callbackFunction = () => {\r\n        if (percentage <= 19) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setvectorButton(true);\r\n    }\r\n\r\n    const theString = () => { //this is for default params in train\r\n        setthecolor('beige');\r\n        if (percentage <= 19) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        //setNextStep(true);\r\n    };\r\n\r\n    const mytopic = (e) => {\r\n        e.preventDefault();\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n    }\r\n\r\n    const theReturnFunction = () => {\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n        setShowbutton(true);\r\n    }\r\n\r\n    const evalEdit = () => { //this is for evaluation with default params\r\n        setshowButtonIndex(true);\r\n        setevalColor('beige');\r\n        if (percentage <= 69) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    };\r\n\r\n    const theEvalFunction = () => {\r\n        if (percentage <= 69) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n\r\n    }\r\n\r\n    const theFormFunction = () => {\r\n        if (percentage <= 49) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 30);\r\n        }\r\n\r\n    }\r\n\r\n    const handleEdit = () => { //this is for default params in train\r\n        setformColor('beige');\r\n        setformButton(true);\r\n        if (percentage <= 49) {\r\n            setPercentage(currPercentage => currPercentage + 30);\r\n        }\r\n    };\r\n\r\n    const skipEval = () => { //this is for skipping evalutation\r\n        setskipB(true);\r\n        if (percentage <= 69) {\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    }\r\n\r\n    const notDefaultFile = () => {  //this is the file after skipping evalutation\r\n        setPercentage(currPercentage => currPercentage + 20);\r\n        setPivot(currPivot => currPivot + 1);\r\n        //const element = document.createElement(\"a\");\r\n        const file = [\r\n          new Blob([libs], { type: 'text/plain' }),\r\n          new Blob([first], {type: 'text/plain' }),\r\n          new Blob([name], { type: 'text/plain' }),\r\n          new Blob([basic], { type: 'text/plain' }),\r\n          new Blob([dataset], { type: 'text/plain' }),\r\n          new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n          vectorButton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n          new Blob([thesplitter], { type: 'text/plain' }),\r\n          new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n          new Blob([comma], { type: 'text/plain' }),\r\n          new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n          showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n          formButton === true ? new Blob([thetrainer]) : new Blob([submitForm()]),\r\n          new Blob([thepipeline], { type: 'text/plain' }),\r\n          new Blob([themodel], { type: 'text/plain' }),\r\n          new Blob([thepredict], { type: 'text/plain' }),\r\n          new Blob([notEval], { type: 'text/plain' }),\r\n    \r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/RandomForestRegression.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n          // see FileSaver.js\r\n          FileSaver.saveAs(content, \"RandomForestRegression.zip\");\r\n        });\r\n    }\r\n\r\n    const downloadTxtFile = () => { //this is the file (downloading zip)\r\n        setPercentage(currPercentage => currPercentage + 20);\r\n        setPivot(currPivot => currPivot + 1);\r\n\r\n        const file = [\r\n            new Blob([libs], { type: 'text/plain' }),\r\n            new Blob([changer], {type: 'text/plain' }),\r\n            new Blob([first], {type: 'text/plain' }),\r\n            new Blob([name], { type: 'text/plain' }),\r\n            new Blob([basic], { type: 'text/plain' }),\r\n            new Blob([dataset], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n            vectorButton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n            new Blob([thesplitter], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n            new Blob([comma], { type: 'text/plain' }),\r\n            new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n            showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n            formButton === true ? new Blob([thetrainer]) : new Blob([submitForm()]),\r\n            new Blob([thepipeline], { type: 'text/plain' }),\r\n            new Blob([themodel], { type: 'text/plain' }),\r\n            new Blob([thepredict], { type: 'text/plain' }),\r\n            //showButtonIndex === true ? new Blob([theEvaluator]) : new Blob([evalForm()]),\r\n            showButtonIndex === true ? '' : new Blob([evalForm()]),\r\n            new Blob([ending], { type: 'text/plain' }),\r\n\r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/RandomForestRegression.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n            // see FileSaver.js\r\n            FileSaver.saveAs(content, \"RandomFRegression.zip\");\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <RegressionToolbar />\r\n            <div className=\"welcome\">\r\n                <h1> Random Forest Regression Algorithm </h1>\r\n                <br />\r\n                <Jumbotron className=\"myinput\">\r\n                    <Form onSubmit={myToggler}>\r\n                        <Form.Group controlId=\"myInput\">\r\n                            <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n                        </Form.Group>\r\n                        <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n                    </Form>\r\n                </Jumbotron>\r\n                <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n                {\r\n                    toggle === true ?\r\n                        <div>\r\n                            <Jumbotron>\r\n                                <h2>    Indexing categorical feature columns in a dataset of Vector with Vector Indexer.</h2>\r\n                                <br/>\r\n                                <VectorIndexer percentage={percentage} parentCallback={callbackFunction} />\r\n                                <br />\r\n                                <button class=\"btn btn-primary\" onClick={theString}>\r\n                                    default parameters\r\n                                </button>\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2> Please split your dataset into training and test sets and check the parameters </h2>\r\n                                <br />\r\n                                <Form onSubmit={mytopic}>\r\n                                    <Form.Group controlId=\"trainID\">\r\n                                        <Form.Control type=\"number\" required={true} name=\"Train\" max=\"100\" placeholder=\"Write the percentage of train model and we will calculate the percentage of the test model\" />\r\n                                    </Form.Group>\r\n                                    <button type=\"submit\" class=\"btn btn-primary\"> Validation </button>\r\n                                </Form>\r\n                                <br />\r\n                                <Splitter showbutton={showbutton} percentage={percentage} parentCallback={theReturnFunction} />\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2>Train your model with </h2>\r\n                                <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                                    Default parameters\r\n                                </button>\r\n                                <br/>\r\n                                <br/>\r\n                                <RegressionForm percentage={percentage} parentCallback={theFormFunction} />\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2>Evaluate your model with</h2>\r\n                                <br />\r\n                                <button class=\"btn btn-primary mr-1\" onClick={evalEdit}>\r\n                                    Default parameters\r\n                                </button>\r\n                                <button type=\"submit\" class=\"btn btn-primary\" onClick={skipEval}>\r\n                                        Skip Evaluation\r\n                                </button>\r\n                                <br/>\r\n                                <br/>\r\n                                <RegressionEval percentage={percentage} parentCallback={theEvalFunction} />\r\n                            </Jumbotron>\r\n                            \r\n                            {\r\n                                skipB === true ?\r\n                                <div>\r\n                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={notDefaultFile}> Download </button>\r\n                                    {pivot === 1 ?\r\n                                        <Link to='/classification/AlgorithmsClassification'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                                        : null\r\n                                    }\r\n                                </div> :\r\n                                <div>\r\n                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={downloadTxtFile}> Download</button>\r\n                                    {pivot === 1 ?\r\n                                        <Link to='/regression'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomForestRegression","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\n\r\n\r\nclass GradientForm extends Component {\r\n    state = {\r\n        showForm: false\r\n    }\r\n\r\n    myfun = () => { //this is for progress bar\r\n        if (this.props.percentage <= 41) {\r\n            this.props.parentCallback(this.props.percentage + 10);\r\n        }\r\n    }\r\n    showForm = () => {  //this is for form\r\n        console.log(this.props.percentage);\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"checkpointIntervalID\" name=\"checkpointInterval\" placeholder=\"checkpointInterval ->\r\n                                                                        Parameter for set checkpoint interval (>= 1) or disable checkpoint (-1)\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"featureSubsetStrategyID\" name=\"featureSubsetStrategy\" >\r\n                        <option value=\"\" disabled selected>featureSubsetStrategy (The number of features to consider for splits at each tree node)</option>\r\n                        <option value=\"auto\">auto</option>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"onethird\">onethird</option>\r\n                        <option value=\"sqrt\">sqrt</option>\r\n                        <option value=\"log2\">log2</option>\r\n                        <option value=\"n\">n</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"featuresColID\" name=\"featuresCol\" placeholder=\"featuresCol -> \r\n                                                                            Parameter for features column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"impurityID\" name=\"impurity\" >\r\n                        <option value=\"\" disabled selected>impurity (Criterion for information gain)</option>\r\n                        <option value=\"entropy\">entropy</option>\r\n                        <option value=\"gini\">gini (Default)</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"labelColID\" name=\"labelCol\" placeholder=\"labelCol ->\r\n                                                                        Parameter for label column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"leafColID\" name=\"leafCol\" placeholder=\"leafCol -> \r\n                                                                            Leaf indices column name.\" />\r\n                    <br />\r\n                    <Form.Control as=\"select\" type=\"text\" id=\"lossTypeID\" name=\"lossType\" >\r\n                        <option value=\"\" disabled selected>lossType (Loss function which GBT tries to minimize.)</option>\r\n                        <option value=\"squared\">squared (Default)</option>\r\n                        <option value=\"absolute\">absolute</option>\r\n                    </Form.Control>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxBinsID\" name=\"maxBins\" placeholder=\"maxBins -> \r\n                                                                            Maximum number of bins used for discretizing continuous features and for choosing how to split on features at each node.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxDepthID\" name=\"maxDepth\" placeholder=\"maxDepth -> \r\n                                                                            Maximum depth of the tree (nonnegative)\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"maxIterID\" name=\"maxIter\" placeholder=\"maxIter -> \r\n                                                                            Parameter for maximum number of iterations\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minInfoGainID\" name=\"minInfoGain\" placeholder=\"minInfoGain ->\r\n                                                                        Minimum information gain for a split to be considered at a tree node\"/>\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minInstancesPerNodeID\" name=\"minInstancesPerNode\" placeholder=\"minInstancesPerNode -> \r\n                                                                            Minimum number of instances each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"minWeightFractionPerNodeID\" name=\"minWeightFractionPerNode\" placeholder=\"minWeightFractionPerNode -> \r\n                                                                            Minimum fraction of the weighted sample count that each child must have after split\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"predictionColID\" name=\"predictionCol\" placeholder=\"predictionCol ->\r\n                                                                        Parameter for prediction column name\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"seedID\" name=\"seed\" placeholder=\"seed ->\r\n                                                                        Parameter for random seed.\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"stepSizeID\" name=\"stepSize\" placeholder=\"stepSize ->\r\n                                                                        Parameter for Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator\" />\r\n                    <br />\r\n                    <Form.Control type=\"number\" id=\"subsamplingRateID\" name=\"subsamplingRate\" placeholder=\"subsamplingRate ->\r\n                                                                        Fraction of the training data used for learning each decision tree, in range (0, 1]\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"validationIndicatorColID\" name=\"validationIndicatorCol\" placeholder=\"validationIndicatorCol ->\r\n                                                                        Parameter for name of the column that indicates whether each row is for training or for validation\" />\r\n                    <br />\r\n                    <Form.Control type=\"text\" id=\"weightColID\" name=\"weightCol\" placeholder=\"weightCol ->\r\n                                                                        Parameter for weight column name (not set or empty is 1.0)\" />\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button class=\"btn btn-primary\" onClick={() => { this.setState({ showForm: !this.state.showForm }, this.myfun()) }}>\r\n                    Choose your own parameters\r\n                </button>\r\n                {this.state.showForm ? this.showForm() : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GradientForm","import React, { useState } from 'react'\r\nimport '../../../Cluster/Algorithms/Algorithms.css'\r\nimport LoadingBar from 'react-top-loading-bar'\r\nimport VectorIndexer from '../../ClassificationAlgorithms/DecisionTree/VectorIndexer'\r\nimport FileSaver from 'file-saver'\r\nimport JSZip from 'jszip'\r\nimport Splitter from '../../ClassificationAlgorithms/NaiveBayes/Splitter'\r\nimport { Link } from 'react-router-dom';\r\nimport RegressionEval from '../RandomForestRegression/RegressionEval'\r\nimport GradientForm from './GradientForm'\r\nimport { Jumbotron, Form } from 'react-bootstrap'\r\nimport RegressionToolbar from '../RegressionToolbar'\r\n\r\nconst submitForm = () => {\r\n    let m = \")\\n\\n\\tval gbt = new GBTRegressor()\";\r\n    if (document.getElementById(\"checkpointIntervalID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setCheckpointInterval(\" + document.getElementById(\"checkpointIntervalID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"featureSubsetStrategyID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setFeatureSubsetStrategy(\"${document.getElementById(\"featureSubsetStrategyID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"featuresColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setFeaturesCol(\"${document.getElementById(\"featuresColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"impurityID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setImpurity(\"${document.getElementById(\"impurityID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"leafColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setLeafCol(\"${document.getElementById(\"leafColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"lossTypeID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setLossType(\"${document.getElementById(\"lossTypeID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"maxBinsID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMaxBins(\" + document.getElementById(\"maxBinsID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxDepthID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMaxDepth(\" + document.getElementById(\"maxDepthID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxIterID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMaxIter(\" + document.getElementById(\"maxIterID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minInfoGainID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinInfoGain(\" + document.getElementById(\"minInfoGainID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minInstancesPerNodeID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinInstancesPerNode(\" + document.getElementById(\"minInstancesPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"minWeightFractionPerNodeID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setMinWeightFractionPerNode(\" + document.getElementById(\"minWeightFractionPerNodeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"seedID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setSeed(\" + document.getElementById(\"seedID\").value + \"L)\"));\r\n    }\r\n    if (document.getElementById(\"stepSizeID\").value !== \"\") {\r\n        m = (m.concat(\".\", \"setStepSize(\" + document.getElementById(\"stepSizeID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"subsamplingRateID\").value !== \"\") {\r\n        m = (m.concat(\".\", \" setSubsamplingRate(\" + document.getElementById(\"subsamplingRateID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"validationIndicatorColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setValidationIndicatorCol(\"${document.getElementById(\"validationIndicatorColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        m = (m.concat(\".\", `setWeightCol(\"${document.getElementById(\"rawPredictionColID\").value}\")`));\r\n    }\r\n    return (m);\r\n}\r\n\r\nconst mysplit = () => {\r\n    let myK = \")\";\r\n    if (document.getElementById(\"weightsID\").value !== \"\") {\r\n        myK = (myK.concat(\",\", \"weights = \" + document.getElementById(\"weightsID\").value));\r\n    }\r\n    if (document.getElementById(\"seedID\").value !== \"\") {\r\n        myK = (myK.concat(\",\", \"seed = \" + document.getElementById(\"seedID\").value + \"L)\\n\\n\\t\"));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst evalForm = () => {\r\n    let myK = \"\\n\\n\\tpredictions.select(\\\"prediction\\\", \\\"label\\\", \\\"features\\\").show(5)\";\r\n    if (document.getElementById(\"metricNameID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setMetricName(\"${document.getElementById(\"metricNameID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"labelColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setLabelCol(\"${document.getElementById(\"labelColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"predictionColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setPredictionCol(\"${document.getElementById(\"predictionColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"weightColID\").value !== \"\") {\r\n        myK = (myK.concat(\".\", `setWeightCol(\"${document.getElementById(\"weightColID\").value}\")`));\r\n    }\r\n    return (myK);\r\n}\r\n\r\nconst myVectorIndexer = () => {\r\n    let my = \"\\')\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)\";\r\n    if (document.getElementById(\"handleInvalidID\").value !== \"\") {\r\n        my = (my.concat(\".\", `setHandleInvalid(\"${document.getElementById(\"handleInvalidID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"inputColID\").value !== \"\") {\r\n        my = (my.concat(\".\", `setInputCol(\"${document.getElementById(\"inputColID\").value}\")`));\r\n    }\r\n    if (document.getElementById(\"outputColID\").value !== \"\") {\r\n        my = (my.concat(\".\", \"setOutputCol(\" + document.getElementById(\"outputColID\").value + \")\"));\r\n    }\r\n    if (document.getElementById(\"maxCategoriesID\").value !== \"\") {\r\n        my = (my.concat(\".\", \"setMaxCategories(\" + document.getElementById(\"maxCategoriesID\").value + \")\"));\r\n    }\r\n    return (my);\r\n}\r\n\r\nfunction GradientBoostedTreeRegressor() {\r\n\r\n    const makeid = () => { //make the name of the programm\r\n        var name = '';\r\n        var characters = 'abcdefghijklmnopqrstuvwxyz';\r\n        var length = 7;\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            name += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return name;\r\n    }\r\n\r\n    const [skipB, setskipB] = useState(false);\r\n    const [formColor, setformColor] = useState('darkgoldenrod');\r\n    const [formButton, setformButton] = useState(false);\r\n    const [evalColor, setevalColor] = useState('darkgoldenrod');\r\n    const [showButtonIndex, setshowButtonIndex] = useState(false);\r\n    const [showbutton, setShowbutton] = useState(false);\r\n    const [vectorButton, setvectorButton] = useState(false);\r\n    const [pivot, setPivot] = useState(0);\r\n    const [toggle, setToggle] = useState(false);\r\n    const [thecolor, setthecolor] = useState('darkgoldenrod')\r\n    const [percentage, setPercentage] = useState(0);\r\n    const [libs] = useState('import org.apache.spark.ml.Pipeline\\nimport org.apache.spark.ml.feature.VectorIndexer\\nimport org.apache.spark.ml.regression.{RandomForestRegressionModel, RandomForestRegressor}\\nimport org.apache.spark.sql.SparkSession');\r\n    const [changer] = useState('\\nimport org.apache.spark.ml.evaluation.RegressionEvaluator');\r\n    const [first] = useState('\\n\\nobject ')\r\n    const [name] = useState(makeid());\r\n    const [basic] = useState('{\\n\\tdef main(args: Array[String]): Unit = {\\n\\tval spark = SparkSession\\n\\t\\t.builder\\n\\t\\t.appName(s\\\"${this.getClass.getSimpleName}\\\")\\n\\t\\t.getOrCreate()');\r\n    const [dataset] = useState('\\n\\tval data = spark.read.format(\"libsvm\").load(\"');\r\n    const [myvector] = useState('\")\\n\\n\\tval labelIndexer = new StringIndexer().fit(data)');\r\n    const [thesplitter] = useState('\\n\\n\\tval Array(trainingData, testData) = data.randomSplit(Array(');\r\n    const [comma] = useState(',');\r\n    const [con] = useState('))');\r\n    const [thetrainer] = useState('\\n\\n\\tval gbt = new GBTRegressor()');\r\n    const [thepipeline] = useState('\\n\\n\\tval pipeline = new Pipeline().setStages(Array(featureIndexer, rf))');\r\n    const [themodel] = useState('\\n\\n\\tval model = pipeline.fit(trainingData)');\r\n    const [thepredict] = useState('\\n\\n\\tval predictions = model.transform(testData)\\n\\n\\tpredictions.select(\"prediction\", \"label\", \"features\").show(5)');\r\n    const [theEvaluator] = useState('\\n\\n\\tval evaluator = new RegressionEvaluator()');\r\n    const [ending] = useState('\\n\\tval yerror = evaluator.evaluate(predictions)\\n\\tprintln(s\"Your selected error on test data = $yerror\")\\n\\n\\tval gbtModel = model.stages(1).asInstanceOf[GBTRegressionModel]\\n\\tprintln(s\"Learned regression GBT model:\\n ${gbtModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n    const [notEval] = useState('\\n\\n\\tval rfModel = model.stages(1).asInstanceOf[RandomForestRegressionModel]\\n\\tprintln(s\"Learned regression forest model:\\\\n ${rfModel.toDebugString}\")\\n\\n\\tspark.stop()\\n }\\n}');\r\n\r\n    const myToggler = (e) => {  //this is for next button\r\n        e.preventDefault();\r\n        setToggle(true);\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n    }\r\n\r\n    const callbackFunction = () => {\r\n        if (percentage <= 19) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        setvectorButton(true);\r\n    }\r\n\r\n    const theString = () => { //this is for default params in train\r\n        setthecolor('beige');\r\n        if (percentage <= 19) {\r\n            setPercentage(currPercentage => currPercentage + 10);\r\n        }\r\n        //setNextStep(true);\r\n    };\r\n\r\n    const mytopic = (e) => {\r\n        e.preventDefault();\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n    }\r\n\r\n    const theReturnFunction = () => {\r\n        setPercentage(currPercentage => currPercentage + 10);\r\n        setShowbutton(true);\r\n    }\r\n\r\n    const evalEdit = () => { //this is for evaluation with default params\r\n        setshowButtonIndex(true);\r\n        setevalColor('beige');\r\n        if (percentage <= 69) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    };\r\n\r\n    const theEvalFunction = () => {\r\n        if (percentage <= 69) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n\r\n    }\r\n\r\n    const theFormFunction = () => {\r\n        if (percentage <= 49) { //needs change\r\n            setPercentage(currPercentage => currPercentage + 30);\r\n        }\r\n\r\n    }\r\n\r\n    const handleEdit = () => { //this is for default params in train\r\n        setformColor('beige');\r\n        setformButton(true);\r\n        if (percentage <= 49) {\r\n            setPercentage(currPercentage => currPercentage + 30);\r\n        }\r\n    };\r\n\r\n    const skipEval = () => { //this is for skipping evalutation\r\n        setskipB(true);\r\n        if (percentage <= 69) {\r\n            setPercentage(currPercentage => currPercentage + 20);\r\n        }\r\n    }\r\n\r\n    const notDefaultFile = () => {  //this is the file after skipping evalutation\r\n        setPercentage(currPercentage => currPercentage + 20);\r\n        setPivot(currPivot => currPivot + 1);\r\n        //const element = document.createElement(\"a\");\r\n        const file = [\r\n          new Blob([libs], { type: 'text/plain' }),\r\n          new Blob([first], {type: 'text/plain' }),\r\n          new Blob([name], { type: 'text/plain' }),\r\n          new Blob([basic], { type: 'text/plain' }),\r\n          new Blob([dataset], { type: 'text/plain' }),\r\n          new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n          vectorButton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n          new Blob([thesplitter], { type: 'text/plain' }),\r\n          new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n          new Blob([comma], { type: 'text/plain' }),\r\n          new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n          showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n          formButton === true ? new Blob([thetrainer]) : new Blob([submitForm()]),\r\n          new Blob([thepipeline], { type: 'text/plain' }),\r\n          new Blob([themodel], { type: 'text/plain' }),\r\n          new Blob([thepredict], { type: 'text/plain' }),\r\n          new Blob([notEval], { type: 'text/plain' }),\r\n    \r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/GradientBoostedTreeRegressor.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n          // see FileSaver.js\r\n          FileSaver.saveAs(content, \"GradientBTR.zip\");\r\n        });\r\n    }\r\n\r\n    const downloadTxtFile = () => { //this is the file (downloading zip)\r\n        setPercentage(currPercentage => currPercentage + 20);\r\n        setPivot(currPivot => currPivot + 1);\r\n\r\n        const file = [\r\n            new Blob([libs], { type: 'text/plain' }),\r\n            new Blob([changer], {type: 'text/plain' }),\r\n            new Blob([first], {type: 'text/plain' }),\r\n            new Blob([name], { type: 'text/plain' }),\r\n            new Blob([basic], { type: 'text/plain' }),\r\n            new Blob([dataset], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('myInput').value], { type: 'text/plain' }),\r\n            vectorButton === false ? new Blob([myvector]) : new Blob([myVectorIndexer()]),\r\n            new Blob([thesplitter], { type: 'text/plain' }),\r\n            new Blob([document.getElementById('trainID').value / 100], { type: 'text/plain' }),\r\n            new Blob([comma], { type: 'text/plain' }),\r\n            new Blob([(100 - document.getElementById('trainID').value) / 100], { type: 'text/plain' }),\r\n            showbutton === false ? new Blob([con]) : new Blob([mysplit()]),\r\n            formButton === true ? new Blob([thetrainer]) : new Blob([submitForm()]),\r\n            new Blob([thepipeline], { type: 'text/plain' }),\r\n            new Blob([themodel], { type: 'text/plain' }),\r\n            new Blob([thepredict], { type: 'text/plain' }),\r\n            //showButtonIndex === true ? new Blob([theEvaluator]) : new Blob([evalForm()]),\r\n            showButtonIndex === true ? new Blob([theEvaluator]) : new Blob([evalForm()]),\r\n            new Blob([ending], { type: 'text/plain' }),\r\n\r\n        ];\r\n        var parts = new File(file, \"myfile\")\r\n        var zip = new JSZip();\r\n        zip.file(\"build.sbt\", \"name :=\" + \"\\\"\" +localStorage.getItem('Name')+ \"\\\"\" + \"\\n\\nversion := \" + \"\\\"\" + localStorage.getItem('Version') + \"\\\"\" + \"\\n\\nscalaVersion :=\" + '\\\"' +  localStorage.getItem('ScalaVersion') + '\\\"\\n\\n' + \"libraryDependencies ++= Seq( \\n\" + \"\\t\\\"org.apache.spark\\\" %% \\\"spark-sql\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\",\" + \"\\n\\t\\\"org.apache.spark\\\" %% \\\"spark-mllib\\\" % \" + \"\\\"\" + localStorage.getItem('SparkVersion') + \"\\\"\\n)\");\r\n        zip.file(\"src/main/scala/GradientBoostedTreeRegressor.scala\", parts);\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n            // see FileSaver.js\r\n            FileSaver.saveAs(content, \"GradientBTR.zip\");\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <RegressionToolbar />\r\n            <div className=\"welcome\">\r\n                <h1> Gradient Boosted Tree Regression Algorithm </h1>\r\n                <br />\r\n                <Jumbotron className=\"myinput\">\r\n                    <Form onSubmit={myToggler}>\r\n                        <Form.Group controlId=\"myInput\">\r\n                            <Form.Control required={true} placeholder=\"Please enter your dataset first\" />\r\n                        </Form.Group>\r\n                        <button type=\"submit\" class=\"btn btn-primary\">Next Step</button>\r\n                    </Form>\r\n                </Jumbotron>\r\n                <LoadingBar height={10} loaderSpeed={1000} transitionTime={100} color='#00008B' progress={percentage} onLoaderFinished={() => setPercentage} />\r\n                {\r\n                    toggle === true ?\r\n                        <div>\r\n                            <Jumbotron>\r\n                                <h2>Indexing categorical feature columns in a dataset of Vector with Vector Indexer.</h2>\r\n                                <br/>\r\n                                <VectorIndexer percentage={percentage} parentCallback={callbackFunction} />\r\n                                <br/>\r\n                                <button class=\"btn btn-primary\" onClick={theString}>\r\n                                    Default parameters\r\n                                </button>\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2> Please split your dataset into training and test sets and check the parameters </h2>\r\n                                <br />\r\n                                <Form onSubmit={mytopic}>\r\n                                    <Form.Group controlId=\"trainID\">\r\n                                        <Form.Control type=\"number\" required={true} name=\"Train\" max=\"100\" placeholder=\"Write the percentage of train model and we will calculate the percentage of the test model\" />\r\n                                    </Form.Group>\r\n                                    <button type=\"submit\" class=\"btn btn-primary\"> Validation </button>\r\n                                </Form>\r\n                                <br />\r\n                                <Splitter showbutton={showbutton} percentage={percentage} parentCallback={theReturnFunction} />\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2>Train your model with </h2>\r\n                                <br/>\r\n                                <button class=\"btn btn-primary\" onClick={handleEdit}>\r\n                                    Default parameters\r\n                                </button>\r\n                                <br/>\r\n                                <br/>\r\n                                <GradientForm percentage={percentage} parentCallback={theFormFunction} />\r\n                            </Jumbotron>\r\n                            <Jumbotron>\r\n                                <h2>Evaluate your model with</h2>\r\n                                <br/>\r\n                                <button class=\"btn btn-primary mr-1\" onClick={evalEdit}>\r\n                                        Default parameters\r\n                                </button>\r\n                                <button type=\"submit\" class=\"btn btn-primary\" onClick={skipEval}>\r\n                                        Skip Evaluation\r\n                                </button>\r\n                                <br/>\r\n                                <br/>\r\n                                <RegressionEval percentage={percentage} parentCallback={theEvalFunction} />\r\n                            </Jumbotron>\r\n                            {\r\n                                skipB === true ?\r\n                                <div>\r\n                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={notDefaultFile}> Download </button>\r\n                                    {pivot === 1 ?\r\n                                        <Link to='/classification/AlgorithmsClassification'> <button class=\"btn btn-primary\"> Return to menu </button></Link>\r\n                                        : null\r\n                                    }\r\n                                </div> :\r\n                                <div>\r\n                                    <button disabled={percentage <= 69} type=\"submit\" class=\"btn btn-primary mr-1\" onClick={downloadTxtFile}> Download</button>\r\n                                    {pivot === 1 ?\r\n                                        <Link to='/regression'> <button class=\"btn btn-primary\"> Return to menu </button> </Link>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GradientBoostedTreeRegressor","import React from 'react';\nimport Toolbar from './Toolbar'\nimport Mycluster from './Cluster/myCluster'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Myabout from './About/about'\nimport Kmeans from './Cluster/Algorithms/Kmeans/Kmeans'\nimport LDA from './Cluster/Algorithms/LDA/LDA'\nimport PIC from './Cluster/Algorithms/PIC/PIC'\nimport ClassificationPreview from './Classification/ClassificationAlgorithms/ClassificationPreview';\nimport GMM from './Cluster/Algorithms/GMM/GMM'\nimport BisectingKmeans from './Cluster/Algorithms/BisectingKmeans/BisectingKmeans'\nimport LinearSVM from './Classification/ClassificationAlgorithms/LinearSVM/LinearSVM';\nimport RegressionPreview from './Classification/RegressionAlgorithms/RegressionPreview';\nimport NaiveBayes from './Classification/ClassificationAlgorithms/NaiveBayes/NaiveBayes';\nimport MultiLayerPerceptron from './Classification/ClassificationAlgorithms/MultilayerPerceptron/MultiLayerPerceptron';\nimport DecisionTree from './Classification/ClassificationAlgorithms/DecisionTree/DecisionTree';\nimport LinearRegression from './Classification/RegressionAlgorithms/LinearRegression/LinearRegression';\nimport RandomForestRegression from './Classification/RegressionAlgorithms/RandomForestRegression/RandomForestRegression';\nimport GradientBoostedTreeRegressor from './Classification/RegressionAlgorithms/GradientBoostedTreeRegressor/GradientBoostedTreeRegressor'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App d-flex\">\n        <Toolbar />\n        <div id=\"page-content-wrapper\">\n          <div class=\"container-fluid p-0\">\n            <Switch>\n              <Route path=\"/\" component={Myabout} exact />\n              <Route path=\"/cluster\" component={Mycluster} exact />\n              <Route path=\"/cluster/Kmeans\" component={Kmeans} exact />\n              <Route path=\"/cluster/LDA\" component={LDA} exact />\n              <Route path=\"/cluster/PIC\" component={PIC} exact />\n              <Route path=\"/cluster/GMM\" component={GMM} exact />\n              <Route path=\"/cluster/BKmeans\" component={BisectingKmeans} exact />\n              <Route path=\"/about\" component={Myabout} exact />\n              <Route path=\"/classification\" component={ClassificationPreview} exact />\n              <Route path=\"/classification/LinearSVM\" component={LinearSVM} exact />\n              <Route path=\"/classification/NaiveBayes\" component={NaiveBayes} exact />\n              <Route path=\"/classification/MultilayerPerceptron\" component={MultiLayerPerceptron} exact />\n              <Route path=\"/classification/DecisionTree\" component={DecisionTree} exact />\n              <Route path=\"/regression\" component={RegressionPreview} exact />\n              <Route path=\"/regression/LinearRegression\" component={LinearRegression} exact />\n              <Route path=\"/regression/RandomForestRegression\" component={RandomForestRegression} exact />\n              <Route path=\"/regression/GradientBoostedTreeRegressor\" component={GradientBoostedTreeRegressor} exact />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}